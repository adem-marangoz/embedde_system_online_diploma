
Atmega32_test1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000216  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000026a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000026a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000029c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000088  00000000  00000000  000002d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a66  00000000  00000000  00000360  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000712  00000000  00000000  00000dc6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004f7  00000000  00000000  000014d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000114  00000000  00000000  000019d0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000443  00000000  00000000  00001ae4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000422  00000000  00000000  00001f27  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000078  00000000  00000000  00002349  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__vector_3>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 04 01 	call	0x208	; 0x208 <main>
  64:	0c 94 09 01 	jmp	0x212	; 0x212 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <init>:




void init(void)
{
  6c:	cf 93       	push	r28
  6e:	df 93       	push	r29
  70:	00 d0       	rcall	.+0      	; 0x72 <init+0x6>
  72:	1f 92       	push	r1
  74:	cd b7       	in	r28, 0x3d	; 61
  76:	de b7       	in	r29, 0x3e	; 62
    /*Config PA0 pin as Output */
    GPIO_config config_i_o = {0};
  78:	19 82       	std	Y+1, r1	; 0x01
  7a:	1a 82       	std	Y+2, r1	; 0x02
  7c:	1b 82       	std	Y+3, r1	; 0x03
	config_i_o.pin = PIN_0 ;
  7e:	81 e0       	ldi	r24, 0x01	; 1
  80:	89 83       	std	Y+1, r24	; 0x01
	config_i_o.mode = OUTPUT;
  82:	8a 83       	std	Y+2, r24	; 0x02
	Init_GPIO(PORT_A,&config_i_o);
  84:	be 01       	movw	r22, r28
  86:	6f 5f       	subi	r22, 0xFF	; 255
  88:	7f 4f       	sbci	r23, 0xFF	; 255
  8a:	89 e3       	ldi	r24, 0x39	; 57
  8c:	90 e0       	ldi	r25, 0x00	; 0
  8e:	0e 94 88 00 	call	0x110	; 0x110 <Init_GPIO>

    /*Config PB2 pin as External interrupt*/
    config_i_o.pin = PIN_2;
  92:	84 e0       	ldi	r24, 0x04	; 4
  94:	89 83       	std	Y+1, r24	; 0x01
    config_i_o.mode = Rising_Ed_Ex_Int;
  96:	83 e8       	ldi	r24, 0x83	; 131
  98:	8a 83       	std	Y+2, r24	; 0x02
    Init_GPIO(PORT_B,&config_i_o);
  9a:	be 01       	movw	r22, r28
  9c:	6f 5f       	subi	r22, 0xFF	; 255
  9e:	7f 4f       	sbci	r23, 0xFF	; 255
  a0:	86 e3       	ldi	r24, 0x36	; 54
  a2:	90 e0       	ldi	r25, 0x00	; 0
  a4:	0e 94 88 00 	call	0x110	; 0x110 <Init_GPIO>

    /*Enable INT2 interrupt and Global interrupt*/
    Enable_EXTI_2();
  a8:	8b b7       	in	r24, 0x3b	; 59
  aa:	80 62       	ori	r24, 0x20	; 32
  ac:	8b bf       	out	0x3b, r24	; 59
    Enable_Global_EXTI();
  ae:	8f b7       	in	r24, 0x3f	; 63
  b0:	80 68       	ori	r24, 0x80	; 128
  b2:	8f bf       	out	0x3f, r24	; 63
}
  b4:	0f 90       	pop	r0
  b6:	0f 90       	pop	r0
  b8:	0f 90       	pop	r0
  ba:	df 91       	pop	r29
  bc:	cf 91       	pop	r28
  be:	08 95       	ret

000000c0 <program>:

void program(void)
{ 
  c0:	08 95       	ret

000000c2 <__vector_3>:
 *        and was called from within the interrupt file
 * @param: Hardware Interrupt Source base interupt vector table
 * @retval: None
 */
ISR(INT2_vect)
{
  c2:	1f 92       	push	r1
  c4:	0f 92       	push	r0
  c6:	0f b6       	in	r0, 0x3f	; 63
  c8:	0f 92       	push	r0
  ca:	11 24       	eor	r1, r1
  cc:	2f 93       	push	r18
  ce:	3f 93       	push	r19
  d0:	4f 93       	push	r20
  d2:	5f 93       	push	r21
  d4:	6f 93       	push	r22
  d6:	7f 93       	push	r23
  d8:	8f 93       	push	r24
  da:	9f 93       	push	r25
  dc:	af 93       	push	r26
  de:	bf 93       	push	r27
  e0:	ef 93       	push	r30
  e2:	ff 93       	push	r31
    Toggle_pin(PORT_A,PIN_0);
  e4:	61 e0       	ldi	r22, 0x01	; 1
  e6:	89 e3       	ldi	r24, 0x39	; 57
  e8:	90 e0       	ldi	r25, 0x00	; 0
  ea:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <Toggle_pin>
}
  ee:	ff 91       	pop	r31
  f0:	ef 91       	pop	r30
  f2:	bf 91       	pop	r27
  f4:	af 91       	pop	r26
  f6:	9f 91       	pop	r25
  f8:	8f 91       	pop	r24
  fa:	7f 91       	pop	r23
  fc:	6f 91       	pop	r22
  fe:	5f 91       	pop	r21
 100:	4f 91       	pop	r20
 102:	3f 91       	pop	r19
 104:	2f 91       	pop	r18
 106:	0f 90       	pop	r0
 108:	0f be       	out	0x3f, r0	; 63
 10a:	0f 90       	pop	r0
 10c:	1f 90       	pop	r1
 10e:	18 95       	reti

00000110 <Init_GPIO>:
{
    if(!(Check_PORT(GPIO))){return 0;}

    if((GPIO->PINx & Pin) == High) {return High;}
    else {return Low;}
}
 110:	dc 01       	movw	r26, r24
 112:	fb 01       	movw	r30, r22
 114:	89 33       	cpi	r24, 0x39	; 57
 116:	91 05       	cpc	r25, r1
 118:	09 f4       	brne	.+2      	; 0x11c <Init_GPIO+0xc>
 11a:	59 c0       	rjmp	.+178    	; 0x1ce <Init_GPIO+0xbe>
 11c:	86 33       	cpi	r24, 0x36	; 54
 11e:	91 05       	cpc	r25, r1
 120:	09 f4       	brne	.+2      	; 0x124 <Init_GPIO+0x14>
 122:	57 c0       	rjmp	.+174    	; 0x1d2 <Init_GPIO+0xc2>
 124:	83 33       	cpi	r24, 0x33	; 51
 126:	91 05       	cpc	r25, r1
 128:	09 f4       	brne	.+2      	; 0x12c <Init_GPIO+0x1c>
 12a:	55 c0       	rjmp	.+170    	; 0x1d6 <Init_GPIO+0xc6>
 12c:	c0 97       	sbiw	r24, 0x30	; 48
 12e:	09 f0       	breq	.+2      	; 0x132 <Init_GPIO+0x22>
 130:	58 c0       	rjmp	.+176    	; 0x1e2 <Init_GPIO+0xd2>
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	51 c0       	rjmp	.+162    	; 0x1d8 <Init_GPIO+0xc8>
 136:	69 2f       	mov	r22, r25
 138:	70 e0       	ldi	r23, 0x00	; 0
 13a:	21 e0       	ldi	r18, 0x01	; 1
 13c:	30 e0       	ldi	r19, 0x00	; 0
 13e:	09 2e       	mov	r0, r25
 140:	02 c0       	rjmp	.+4      	; 0x146 <Init_GPIO+0x36>
 142:	22 0f       	add	r18, r18
 144:	33 1f       	adc	r19, r19
 146:	0a 94       	dec	r0
 148:	e2 f7       	brpl	.-8      	; 0x142 <Init_GPIO+0x32>
 14a:	30 81       	ld	r19, Z
 14c:	32 23       	and	r19, r18
 14e:	32 13       	cpse	r19, r18
 150:	3c c0       	rjmp	.+120    	; 0x1ca <Init_GPIO+0xba>
 152:	41 81       	ldd	r20, Z+1	; 0x01
 154:	41 30       	cpi	r20, 0x01	; 1
 156:	89 f4       	brne	.+34     	; 0x17a <Init_GPIO+0x6a>
 158:	11 96       	adiw	r26, 0x01	; 1
 15a:	8c 91       	ld	r24, X
 15c:	11 97       	sbiw	r26, 0x01	; 1
 15e:	50 e0       	ldi	r21, 0x00	; 0
 160:	09 2e       	mov	r0, r25
 162:	02 c0       	rjmp	.+4      	; 0x168 <Init_GPIO+0x58>
 164:	44 0f       	add	r20, r20
 166:	55 1f       	adc	r21, r21
 168:	0a 94       	dec	r0
 16a:	e2 f7       	brpl	.-8      	; 0x164 <Init_GPIO+0x54>
 16c:	24 2f       	mov	r18, r20
 16e:	20 95       	com	r18
 170:	82 23       	and	r24, r18
 172:	48 2b       	or	r20, r24
 174:	11 96       	adiw	r26, 0x01	; 1
 176:	4c 93       	st	X, r20
 178:	11 97       	sbiw	r26, 0x01	; 1
 17a:	41 81       	ldd	r20, Z+1	; 0x01
 17c:	44 23       	and	r20, r20
 17e:	2c f5       	brge	.+74     	; 0x1ca <Init_GPIO+0xba>
 180:	8f ef       	ldi	r24, 0xFF	; 255
 182:	83 0f       	add	r24, r19
 184:	82 30       	cpi	r24, 0x02	; 2
 186:	78 f4       	brcc	.+30     	; 0x1a6 <Init_GPIO+0x96>
 188:	85 b7       	in	r24, 0x35	; 53
 18a:	40 78       	andi	r20, 0x80	; 128
 18c:	50 e0       	ldi	r21, 0x00	; 0
 18e:	66 0f       	add	r22, r22
 190:	77 1f       	adc	r23, r23
 192:	02 c0       	rjmp	.+4      	; 0x198 <Init_GPIO+0x88>
 194:	44 0f       	add	r20, r20
 196:	55 1f       	adc	r21, r21
 198:	6a 95       	dec	r22
 19a:	e2 f7       	brpl	.-8      	; 0x194 <Init_GPIO+0x84>
 19c:	24 2f       	mov	r18, r20
 19e:	20 95       	com	r18
 1a0:	82 23       	and	r24, r18
 1a2:	48 2b       	or	r20, r24
 1a4:	45 bf       	out	0x35, r20	; 53
 1a6:	34 30       	cpi	r19, 0x04	; 4
 1a8:	81 f4       	brne	.+32     	; 0x1ca <Init_GPIO+0xba>
 1aa:	34 b7       	in	r19, 0x34	; 52
 1ac:	81 81       	ldd	r24, Z+1	; 0x01
 1ae:	82 78       	andi	r24, 0x82	; 130
 1b0:	28 2f       	mov	r18, r24
 1b2:	22 95       	swap	r18
 1b4:	22 0f       	add	r18, r18
 1b6:	20 7e       	andi	r18, 0xE0	; 224
 1b8:	20 95       	com	r18
 1ba:	42 2f       	mov	r20, r18
 1bc:	43 23       	and	r20, r19
 1be:	50 e2       	ldi	r21, 0x20	; 32
 1c0:	85 9f       	mul	r24, r21
 1c2:	90 01       	movw	r18, r0
 1c4:	11 24       	eor	r1, r1
 1c6:	24 2b       	or	r18, r20
 1c8:	24 bf       	out	0x34, r18	; 52
 1ca:	9f 5f       	subi	r25, 0xFF	; 255
 1cc:	05 c0       	rjmp	.+10     	; 0x1d8 <Init_GPIO+0xc8>
 1ce:	90 e0       	ldi	r25, 0x00	; 0
 1d0:	03 c0       	rjmp	.+6      	; 0x1d8 <Init_GPIO+0xc8>
 1d2:	90 e0       	ldi	r25, 0x00	; 0
 1d4:	01 c0       	rjmp	.+2      	; 0x1d8 <Init_GPIO+0xc8>
 1d6:	90 e0       	ldi	r25, 0x00	; 0
 1d8:	98 30       	cpi	r25, 0x08	; 8
 1da:	08 f4       	brcc	.+2      	; 0x1de <Init_GPIO+0xce>
 1dc:	ac cf       	rjmp	.-168    	; 0x136 <Init_GPIO+0x26>
 1de:	81 e0       	ldi	r24, 0x01	; 1
 1e0:	08 95       	ret
 1e2:	80 e0       	ldi	r24, 0x00	; 0
 1e4:	08 95       	ret

000001e6 <Toggle_pin>:


void Toggle_pin(St_GPIO *GPIO,uint8_t Pin)
{
	if(!(Check_PORT(GPIO))){return;}
 1e6:	89 33       	cpi	r24, 0x39	; 57
 1e8:	91 05       	cpc	r25, r1
 1ea:	49 f0       	breq	.+18     	; 0x1fe <Toggle_pin+0x18>
 1ec:	86 33       	cpi	r24, 0x36	; 54
 1ee:	91 05       	cpc	r25, r1
 1f0:	31 f0       	breq	.+12     	; 0x1fe <Toggle_pin+0x18>
 1f2:	83 33       	cpi	r24, 0x33	; 51
 1f4:	91 05       	cpc	r25, r1
 1f6:	19 f0       	breq	.+6      	; 0x1fe <Toggle_pin+0x18>
 1f8:	80 33       	cpi	r24, 0x30	; 48
 1fa:	91 05       	cpc	r25, r1
 1fc:	21 f4       	brne	.+8      	; 0x206 <Toggle_pin+0x20>

	GPIO->PORTx ^= Pin;
 1fe:	fc 01       	movw	r30, r24
 200:	22 81       	ldd	r18, Z+2	; 0x02
 202:	62 27       	eor	r22, r18
 204:	62 83       	std	Z+2, r22	; 0x02
 206:	08 95       	ret

00000208 <main>:

int main(void)
{
	
    /* Replace with your application code */
	init();
 208:	0e 94 36 00 	call	0x6c	; 0x6c <init>
	while (1)
	{
		program();
 20c:	0e 94 60 00 	call	0xc0	; 0xc0 <program>
 210:	fd cf       	rjmp	.-6      	; 0x20c <main+0x4>

00000212 <_exit>:
 212:	f8 94       	cli

00000214 <__stop_program>:
 214:	ff cf       	rjmp	.-2      	; 0x214 <__stop_program>
