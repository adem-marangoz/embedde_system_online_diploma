
Atmega32_test1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000280  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000002f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800060  00800060  000002f4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002f4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000324  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000088  00000000  00000000  00000360  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b23  00000000  00000000  000003e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000795  00000000  00000000  00000f0b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005ba  00000000  00000000  000016a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000114  00000000  00000000  00001c5c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004b7  00000000  00000000  00001d70  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000422  00000000  00000000  00002227  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000078  00000000  00000000  00002649  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__vector_3>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a1 36       	cpi	r26, 0x61	; 97
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 30 01 	call	0x260	; 0x260 <main>
  74:	0c 94 3e 01 	jmp	0x27c	; 0x27c <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <init>:




void init(void)
{
  7c:	cf 93       	push	r28
  7e:	df 93       	push	r29
  80:	00 d0       	rcall	.+0      	; 0x82 <init+0x6>
  82:	1f 92       	push	r1
  84:	cd b7       	in	r28, 0x3d	; 61
  86:	de b7       	in	r29, 0x3e	; 62
    /*Config PA0 pin as Output */
    GPIO_config config_i_o = {0};
  88:	19 82       	std	Y+1, r1	; 0x01
  8a:	1a 82       	std	Y+2, r1	; 0x02
  8c:	1b 82       	std	Y+3, r1	; 0x03
	config_i_o.pin = PIN_0| PIN_1 | PIN_2 | PIN_3 | PIN_4 | PIN_5 | PIN_6 | PIN_7;
  8e:	8f ef       	ldi	r24, 0xFF	; 255
  90:	89 83       	std	Y+1, r24	; 0x01
	config_i_o.mode = OUTPUT;
  92:	81 e0       	ldi	r24, 0x01	; 1
  94:	8a 83       	std	Y+2, r24	; 0x02
	Init_GPIO(PORT_A,&config_i_o);
  96:	be 01       	movw	r22, r28
  98:	6f 5f       	subi	r22, 0xFF	; 255
  9a:	7f 4f       	sbci	r23, 0xFF	; 255
  9c:	89 e3       	ldi	r24, 0x39	; 57
  9e:	90 e0       	ldi	r25, 0x00	; 0
  a0:	0e 94 97 00 	call	0x12e	; 0x12e <Init_GPIO>

}
  a4:	0f 90       	pop	r0
  a6:	0f 90       	pop	r0
  a8:	0f 90       	pop	r0
  aa:	df 91       	pop	r29
  ac:	cf 91       	pop	r28
  ae:	08 95       	ret

000000b0 <program>:

void program(void)
{ 
	volatile static uint8_t counter = 0;
	if(counter < 8)
  b0:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  b4:	88 30       	cpi	r24, 0x08	; 8
  b6:	98 f4       	brcc	.+38     	; 0xde <program+0x2e>
	{
		Write_Pin(PORT_A,PIN_0 << counter, High);
  b8:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  bc:	61 e0       	ldi	r22, 0x01	; 1
  be:	70 e0       	ldi	r23, 0x00	; 0
  c0:	02 c0       	rjmp	.+4      	; 0xc6 <program+0x16>
  c2:	66 0f       	add	r22, r22
  c4:	77 1f       	adc	r23, r23
  c6:	8a 95       	dec	r24
  c8:	e2 f7       	brpl	.-8      	; 0xc2 <program+0x12>
  ca:	41 e0       	ldi	r20, 0x01	; 1
  cc:	89 e3       	ldi	r24, 0x39	; 57
  ce:	90 e0       	ldi	r25, 0x00	; 0
  d0:	0e 94 02 01 	call	0x204	; 0x204 <Write_Pin>
		counter ++;
  d4:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  d8:	8f 5f       	subi	r24, 0xFF	; 255
  da:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
  de:	08 95       	ret

000000e0 <__vector_3>:
 *        and was called from within the interrupt file
 * @param: Hardware Interrupt Source base interupt vector table
 * @retval: None
 */
ISR(INT2_vect)
{
  e0:	1f 92       	push	r1
  e2:	0f 92       	push	r0
  e4:	0f b6       	in	r0, 0x3f	; 63
  e6:	0f 92       	push	r0
  e8:	11 24       	eor	r1, r1
  ea:	2f 93       	push	r18
  ec:	3f 93       	push	r19
  ee:	4f 93       	push	r20
  f0:	5f 93       	push	r21
  f2:	6f 93       	push	r22
  f4:	7f 93       	push	r23
  f6:	8f 93       	push	r24
  f8:	9f 93       	push	r25
  fa:	af 93       	push	r26
  fc:	bf 93       	push	r27
  fe:	ef 93       	push	r30
 100:	ff 93       	push	r31
    Toggle_pin(PORT_A,PIN_0);
 102:	61 e0       	ldi	r22, 0x01	; 1
 104:	89 e3       	ldi	r24, 0x39	; 57
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	0e 94 1f 01 	call	0x23e	; 0x23e <Toggle_pin>
}
 10c:	ff 91       	pop	r31
 10e:	ef 91       	pop	r30
 110:	bf 91       	pop	r27
 112:	af 91       	pop	r26
 114:	9f 91       	pop	r25
 116:	8f 91       	pop	r24
 118:	7f 91       	pop	r23
 11a:	6f 91       	pop	r22
 11c:	5f 91       	pop	r21
 11e:	4f 91       	pop	r20
 120:	3f 91       	pop	r19
 122:	2f 91       	pop	r18
 124:	0f 90       	pop	r0
 126:	0f be       	out	0x3f, r0	; 63
 128:	0f 90       	pop	r0
 12a:	1f 90       	pop	r1
 12c:	18 95       	reti

0000012e <Init_GPIO>:
{
    if(!(Check_PORT(GPIO))){return 0;}

    if((GPIO->PINx & Pin) == High) {return High;}
    else {return Low;}
}
 12e:	dc 01       	movw	r26, r24
 130:	fb 01       	movw	r30, r22
 132:	89 33       	cpi	r24, 0x39	; 57
 134:	91 05       	cpc	r25, r1
 136:	09 f4       	brne	.+2      	; 0x13a <Init_GPIO+0xc>
 138:	59 c0       	rjmp	.+178    	; 0x1ec <Init_GPIO+0xbe>
 13a:	86 33       	cpi	r24, 0x36	; 54
 13c:	91 05       	cpc	r25, r1
 13e:	09 f4       	brne	.+2      	; 0x142 <Init_GPIO+0x14>
 140:	57 c0       	rjmp	.+174    	; 0x1f0 <Init_GPIO+0xc2>
 142:	83 33       	cpi	r24, 0x33	; 51
 144:	91 05       	cpc	r25, r1
 146:	09 f4       	brne	.+2      	; 0x14a <Init_GPIO+0x1c>
 148:	55 c0       	rjmp	.+170    	; 0x1f4 <Init_GPIO+0xc6>
 14a:	c0 97       	sbiw	r24, 0x30	; 48
 14c:	09 f0       	breq	.+2      	; 0x150 <Init_GPIO+0x22>
 14e:	58 c0       	rjmp	.+176    	; 0x200 <Init_GPIO+0xd2>
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	51 c0       	rjmp	.+162    	; 0x1f6 <Init_GPIO+0xc8>
 154:	69 2f       	mov	r22, r25
 156:	70 e0       	ldi	r23, 0x00	; 0
 158:	21 e0       	ldi	r18, 0x01	; 1
 15a:	30 e0       	ldi	r19, 0x00	; 0
 15c:	09 2e       	mov	r0, r25
 15e:	02 c0       	rjmp	.+4      	; 0x164 <Init_GPIO+0x36>
 160:	22 0f       	add	r18, r18
 162:	33 1f       	adc	r19, r19
 164:	0a 94       	dec	r0
 166:	e2 f7       	brpl	.-8      	; 0x160 <Init_GPIO+0x32>
 168:	30 81       	ld	r19, Z
 16a:	32 23       	and	r19, r18
 16c:	32 13       	cpse	r19, r18
 16e:	3c c0       	rjmp	.+120    	; 0x1e8 <Init_GPIO+0xba>
 170:	41 81       	ldd	r20, Z+1	; 0x01
 172:	41 30       	cpi	r20, 0x01	; 1
 174:	89 f4       	brne	.+34     	; 0x198 <Init_GPIO+0x6a>
 176:	11 96       	adiw	r26, 0x01	; 1
 178:	8c 91       	ld	r24, X
 17a:	11 97       	sbiw	r26, 0x01	; 1
 17c:	50 e0       	ldi	r21, 0x00	; 0
 17e:	09 2e       	mov	r0, r25
 180:	02 c0       	rjmp	.+4      	; 0x186 <Init_GPIO+0x58>
 182:	44 0f       	add	r20, r20
 184:	55 1f       	adc	r21, r21
 186:	0a 94       	dec	r0
 188:	e2 f7       	brpl	.-8      	; 0x182 <Init_GPIO+0x54>
 18a:	24 2f       	mov	r18, r20
 18c:	20 95       	com	r18
 18e:	82 23       	and	r24, r18
 190:	48 2b       	or	r20, r24
 192:	11 96       	adiw	r26, 0x01	; 1
 194:	4c 93       	st	X, r20
 196:	11 97       	sbiw	r26, 0x01	; 1
 198:	41 81       	ldd	r20, Z+1	; 0x01
 19a:	44 23       	and	r20, r20
 19c:	2c f5       	brge	.+74     	; 0x1e8 <Init_GPIO+0xba>
 19e:	8f ef       	ldi	r24, 0xFF	; 255
 1a0:	83 0f       	add	r24, r19
 1a2:	82 30       	cpi	r24, 0x02	; 2
 1a4:	78 f4       	brcc	.+30     	; 0x1c4 <Init_GPIO+0x96>
 1a6:	85 b7       	in	r24, 0x35	; 53
 1a8:	40 78       	andi	r20, 0x80	; 128
 1aa:	50 e0       	ldi	r21, 0x00	; 0
 1ac:	66 0f       	add	r22, r22
 1ae:	77 1f       	adc	r23, r23
 1b0:	02 c0       	rjmp	.+4      	; 0x1b6 <Init_GPIO+0x88>
 1b2:	44 0f       	add	r20, r20
 1b4:	55 1f       	adc	r21, r21
 1b6:	6a 95       	dec	r22
 1b8:	e2 f7       	brpl	.-8      	; 0x1b2 <Init_GPIO+0x84>
 1ba:	24 2f       	mov	r18, r20
 1bc:	20 95       	com	r18
 1be:	82 23       	and	r24, r18
 1c0:	48 2b       	or	r20, r24
 1c2:	45 bf       	out	0x35, r20	; 53
 1c4:	34 30       	cpi	r19, 0x04	; 4
 1c6:	81 f4       	brne	.+32     	; 0x1e8 <Init_GPIO+0xba>
 1c8:	34 b7       	in	r19, 0x34	; 52
 1ca:	81 81       	ldd	r24, Z+1	; 0x01
 1cc:	82 78       	andi	r24, 0x82	; 130
 1ce:	28 2f       	mov	r18, r24
 1d0:	22 95       	swap	r18
 1d2:	22 0f       	add	r18, r18
 1d4:	20 7e       	andi	r18, 0xE0	; 224
 1d6:	20 95       	com	r18
 1d8:	42 2f       	mov	r20, r18
 1da:	43 23       	and	r20, r19
 1dc:	50 e2       	ldi	r21, 0x20	; 32
 1de:	85 9f       	mul	r24, r21
 1e0:	90 01       	movw	r18, r0
 1e2:	11 24       	eor	r1, r1
 1e4:	24 2b       	or	r18, r20
 1e6:	24 bf       	out	0x34, r18	; 52
 1e8:	9f 5f       	subi	r25, 0xFF	; 255
 1ea:	05 c0       	rjmp	.+10     	; 0x1f6 <Init_GPIO+0xc8>
 1ec:	90 e0       	ldi	r25, 0x00	; 0
 1ee:	03 c0       	rjmp	.+6      	; 0x1f6 <Init_GPIO+0xc8>
 1f0:	90 e0       	ldi	r25, 0x00	; 0
 1f2:	01 c0       	rjmp	.+2      	; 0x1f6 <Init_GPIO+0xc8>
 1f4:	90 e0       	ldi	r25, 0x00	; 0
 1f6:	98 30       	cpi	r25, 0x08	; 8
 1f8:	08 f4       	brcc	.+2      	; 0x1fc <Init_GPIO+0xce>
 1fa:	ac cf       	rjmp	.-168    	; 0x154 <Init_GPIO+0x26>
 1fc:	81 e0       	ldi	r24, 0x01	; 1
 1fe:	08 95       	ret
 200:	80 e0       	ldi	r24, 0x00	; 0
 202:	08 95       	ret

00000204 <Write_Pin>:
 204:	89 33       	cpi	r24, 0x39	; 57
 206:	91 05       	cpc	r25, r1
 208:	49 f0       	breq	.+18     	; 0x21c <Write_Pin+0x18>
 20a:	86 33       	cpi	r24, 0x36	; 54
 20c:	91 05       	cpc	r25, r1
 20e:	31 f0       	breq	.+12     	; 0x21c <Write_Pin+0x18>
 210:	83 33       	cpi	r24, 0x33	; 51
 212:	91 05       	cpc	r25, r1
 214:	19 f0       	breq	.+6      	; 0x21c <Write_Pin+0x18>
 216:	80 33       	cpi	r24, 0x30	; 48
 218:	91 05       	cpc	r25, r1
 21a:	79 f4       	brne	.+30     	; 0x23a <Write_Pin+0x36>
 21c:	41 30       	cpi	r20, 0x01	; 1
 21e:	31 f4       	brne	.+12     	; 0x22c <Write_Pin+0x28>
 220:	fc 01       	movw	r30, r24
 222:	22 81       	ldd	r18, Z+2	; 0x02
 224:	62 2b       	or	r22, r18
 226:	62 83       	std	Z+2, r22	; 0x02
 228:	81 e0       	ldi	r24, 0x01	; 1
 22a:	08 95       	ret
 22c:	60 95       	com	r22
 22e:	fc 01       	movw	r30, r24
 230:	22 81       	ldd	r18, Z+2	; 0x02
 232:	62 23       	and	r22, r18
 234:	62 83       	std	Z+2, r22	; 0x02
 236:	81 e0       	ldi	r24, 0x01	; 1
 238:	08 95       	ret
 23a:	80 e0       	ldi	r24, 0x00	; 0
 23c:	08 95       	ret

0000023e <Toggle_pin>:


void Toggle_pin(St_GPIO *GPIO,uint8_t Pin)
{
	if(!(Check_PORT(GPIO))){return;}
 23e:	89 33       	cpi	r24, 0x39	; 57
 240:	91 05       	cpc	r25, r1
 242:	49 f0       	breq	.+18     	; 0x256 <Toggle_pin+0x18>
 244:	86 33       	cpi	r24, 0x36	; 54
 246:	91 05       	cpc	r25, r1
 248:	31 f0       	breq	.+12     	; 0x256 <Toggle_pin+0x18>
 24a:	83 33       	cpi	r24, 0x33	; 51
 24c:	91 05       	cpc	r25, r1
 24e:	19 f0       	breq	.+6      	; 0x256 <Toggle_pin+0x18>
 250:	80 33       	cpi	r24, 0x30	; 48
 252:	91 05       	cpc	r25, r1
 254:	21 f4       	brne	.+8      	; 0x25e <Toggle_pin+0x20>

	GPIO->PORTx ^= Pin;
 256:	fc 01       	movw	r30, r24
 258:	22 81       	ldd	r18, Z+2	; 0x02
 25a:	62 27       	eor	r22, r18
 25c:	62 83       	std	Z+2, r22	; 0x02
 25e:	08 95       	ret

00000260 <main>:

int main(void)
{
	
    /* Replace with your application code */
	init();
 260:	0e 94 3e 00 	call	0x7c	; 0x7c <init>
	while (1)
	{
		program();
 264:	0e 94 58 00 	call	0xb0	; 0xb0 <program>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 268:	2f ef       	ldi	r18, 0xFF	; 255
 26a:	83 ed       	ldi	r24, 0xD3	; 211
 26c:	90 e3       	ldi	r25, 0x30	; 48
 26e:	21 50       	subi	r18, 0x01	; 1
 270:	80 40       	sbci	r24, 0x00	; 0
 272:	90 40       	sbci	r25, 0x00	; 0
 274:	e1 f7       	brne	.-8      	; 0x26e <main+0xe>
 276:	00 c0       	rjmp	.+0      	; 0x278 <main+0x18>
 278:	00 00       	nop
 27a:	f4 cf       	rjmp	.-24     	; 0x264 <main+0x4>

0000027c <_exit>:
 27c:	f8 94       	cli

0000027e <__stop_program>:
 27e:	ff cf       	rjmp	.-2      	; 0x27e <__stop_program>
