
Atmega32_test1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000264  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000002d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800060  00800060  000002d8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002d8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000308  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000088  00000000  00000000  00000344  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a95  00000000  00000000  000003cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000722  00000000  00000000  00000e61  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000503  00000000  00000000  00001583  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000114  00000000  00000000  00001a88  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004f6  00000000  00000000  00001b9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000422  00000000  00000000  00002092  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000078  00000000  00000000  000024b4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__vector_3>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a1 36       	cpi	r26, 0x61	; 97
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 2b 01 	call	0x256	; 0x256 <main>
  74:	0c 94 30 01 	jmp	0x260	; 0x260 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <init>:




void init(void)
{
  7c:	cf 93       	push	r28
  7e:	df 93       	push	r29
  80:	00 d0       	rcall	.+0      	; 0x82 <init+0x6>
  82:	1f 92       	push	r1
  84:	cd b7       	in	r28, 0x3d	; 61
  86:	de b7       	in	r29, 0x3e	; 62
    /*Config PA0, PA1, PA2, PA3, PA4, PA5, PA6 and PA7  pin as Output */
    GPIO_config config_i_o = {0};
  88:	19 82       	std	Y+1, r1	; 0x01
  8a:	1a 82       	std	Y+2, r1	; 0x02
  8c:	1b 82       	std	Y+3, r1	; 0x03
	config_i_o.pin = PIN_0| PIN_1 | PIN_2 | PIN_3 | PIN_4 | PIN_5 | PIN_6 | PIN_7;
  8e:	8f ef       	ldi	r24, 0xFF	; 255
  90:	89 83       	std	Y+1, r24	; 0x01
	config_i_o.mode = OUTPUT;
  92:	81 e0       	ldi	r24, 0x01	; 1
  94:	8a 83       	std	Y+2, r24	; 0x02
	Init_GPIO(PORT_A,&config_i_o);
  96:	be 01       	movw	r22, r28
  98:	6f 5f       	subi	r22, 0xFF	; 255
  9a:	7f 4f       	sbci	r23, 0xFF	; 255
  9c:	89 e3       	ldi	r24, 0x39	; 57
  9e:	90 e0       	ldi	r25, 0x00	; 0
  a0:	0e 94 a3 00 	call	0x146	; 0x146 <Init_GPIO>
	
	/*Config PB2 pin as External interrupt*/
	config_i_o.pin = PIN_2;
  a4:	84 e0       	ldi	r24, 0x04	; 4
  a6:	89 83       	std	Y+1, r24	; 0x01
	config_i_o.mode = Rising_Ed_Ex_Int;
  a8:	83 e8       	ldi	r24, 0x83	; 131
  aa:	8a 83       	std	Y+2, r24	; 0x02
	Init_GPIO(PORT_B,&config_i_o);
  ac:	be 01       	movw	r22, r28
  ae:	6f 5f       	subi	r22, 0xFF	; 255
  b0:	7f 4f       	sbci	r23, 0xFF	; 255
  b2:	86 e3       	ldi	r24, 0x36	; 54
  b4:	90 e0       	ldi	r25, 0x00	; 0
  b6:	0e 94 a3 00 	call	0x146	; 0x146 <Init_GPIO>

	/*Enable INT2 interrupt and Global interrupt*/
	Enable_EXTI_2();
  ba:	8b b7       	in	r24, 0x3b	; 59
  bc:	80 62       	ori	r24, 0x20	; 32
  be:	8b bf       	out	0x3b, r24	; 59
	Enable_Global_EXTI();
  c0:	8f b7       	in	r24, 0x3f	; 63
  c2:	80 68       	ori	r24, 0x80	; 128
  c4:	8f bf       	out	0x3f, r24	; 63

}
  c6:	0f 90       	pop	r0
  c8:	0f 90       	pop	r0
  ca:	0f 90       	pop	r0
  cc:	df 91       	pop	r29
  ce:	cf 91       	pop	r28
  d0:	08 95       	ret

000000d2 <program>:

void program(void)
{ 	
  d2:	08 95       	ret

000000d4 <__vector_3>:
 *        and was called from within the interrupt file
 * @param: Hardware Interrupt Source base interupt vector table
 * @retval: None
 */
ISR(INT2_vect)
{
  d4:	1f 92       	push	r1
  d6:	0f 92       	push	r0
  d8:	0f b6       	in	r0, 0x3f	; 63
  da:	0f 92       	push	r0
  dc:	11 24       	eor	r1, r1
  de:	2f 93       	push	r18
  e0:	3f 93       	push	r19
  e2:	4f 93       	push	r20
  e4:	5f 93       	push	r21
  e6:	6f 93       	push	r22
  e8:	7f 93       	push	r23
  ea:	8f 93       	push	r24
  ec:	9f 93       	push	r25
  ee:	af 93       	push	r26
  f0:	bf 93       	push	r27
  f2:	ef 93       	push	r30
  f4:	ff 93       	push	r31
    volatile static uint8_t counter = 0;
    if(counter < 8)
  f6:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
  fa:	88 30       	cpi	r24, 0x08	; 8
  fc:	98 f4       	brcc	.+38     	; 0x124 <__vector_3+0x50>
    {
	    Write_Pin(PORT_A,PIN_0 << counter, High);
  fe:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
 102:	61 e0       	ldi	r22, 0x01	; 1
 104:	70 e0       	ldi	r23, 0x00	; 0
 106:	02 c0       	rjmp	.+4      	; 0x10c <__vector_3+0x38>
 108:	66 0f       	add	r22, r22
 10a:	77 1f       	adc	r23, r23
 10c:	8a 95       	dec	r24
 10e:	e2 f7       	brpl	.-8      	; 0x108 <__vector_3+0x34>
 110:	41 e0       	ldi	r20, 0x01	; 1
 112:	89 e3       	ldi	r24, 0x39	; 57
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	0e 94 0e 01 	call	0x21c	; 0x21c <Write_Pin>
	    counter ++;
 11a:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
 11e:	8f 5f       	subi	r24, 0xFF	; 255
 120:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
    }
}
 124:	ff 91       	pop	r31
 126:	ef 91       	pop	r30
 128:	bf 91       	pop	r27
 12a:	af 91       	pop	r26
 12c:	9f 91       	pop	r25
 12e:	8f 91       	pop	r24
 130:	7f 91       	pop	r23
 132:	6f 91       	pop	r22
 134:	5f 91       	pop	r21
 136:	4f 91       	pop	r20
 138:	3f 91       	pop	r19
 13a:	2f 91       	pop	r18
 13c:	0f 90       	pop	r0
 13e:	0f be       	out	0x3f, r0	; 63
 140:	0f 90       	pop	r0
 142:	1f 90       	pop	r1
 144:	18 95       	reti

00000146 <Init_GPIO>:
 146:	dc 01       	movw	r26, r24
 148:	fb 01       	movw	r30, r22
 14a:	89 33       	cpi	r24, 0x39	; 57
 14c:	91 05       	cpc	r25, r1
 14e:	09 f4       	brne	.+2      	; 0x152 <Init_GPIO+0xc>
 150:	59 c0       	rjmp	.+178    	; 0x204 <Init_GPIO+0xbe>
 152:	86 33       	cpi	r24, 0x36	; 54
 154:	91 05       	cpc	r25, r1
 156:	09 f4       	brne	.+2      	; 0x15a <Init_GPIO+0x14>
 158:	57 c0       	rjmp	.+174    	; 0x208 <Init_GPIO+0xc2>
 15a:	83 33       	cpi	r24, 0x33	; 51
 15c:	91 05       	cpc	r25, r1
 15e:	09 f4       	brne	.+2      	; 0x162 <Init_GPIO+0x1c>
 160:	55 c0       	rjmp	.+170    	; 0x20c <Init_GPIO+0xc6>
 162:	c0 97       	sbiw	r24, 0x30	; 48
 164:	09 f0       	breq	.+2      	; 0x168 <Init_GPIO+0x22>
 166:	58 c0       	rjmp	.+176    	; 0x218 <Init_GPIO+0xd2>
 168:	90 e0       	ldi	r25, 0x00	; 0
 16a:	51 c0       	rjmp	.+162    	; 0x20e <Init_GPIO+0xc8>
 16c:	69 2f       	mov	r22, r25
 16e:	70 e0       	ldi	r23, 0x00	; 0
 170:	21 e0       	ldi	r18, 0x01	; 1
 172:	30 e0       	ldi	r19, 0x00	; 0
 174:	09 2e       	mov	r0, r25
 176:	02 c0       	rjmp	.+4      	; 0x17c <Init_GPIO+0x36>
 178:	22 0f       	add	r18, r18
 17a:	33 1f       	adc	r19, r19
 17c:	0a 94       	dec	r0
 17e:	e2 f7       	brpl	.-8      	; 0x178 <Init_GPIO+0x32>
 180:	30 81       	ld	r19, Z
 182:	32 23       	and	r19, r18
 184:	32 13       	cpse	r19, r18
 186:	3c c0       	rjmp	.+120    	; 0x200 <Init_GPIO+0xba>
 188:	41 81       	ldd	r20, Z+1	; 0x01
 18a:	41 30       	cpi	r20, 0x01	; 1
 18c:	89 f4       	brne	.+34     	; 0x1b0 <Init_GPIO+0x6a>
 18e:	11 96       	adiw	r26, 0x01	; 1
 190:	8c 91       	ld	r24, X
 192:	11 97       	sbiw	r26, 0x01	; 1
 194:	50 e0       	ldi	r21, 0x00	; 0
 196:	09 2e       	mov	r0, r25
 198:	02 c0       	rjmp	.+4      	; 0x19e <Init_GPIO+0x58>
 19a:	44 0f       	add	r20, r20
 19c:	55 1f       	adc	r21, r21
 19e:	0a 94       	dec	r0
 1a0:	e2 f7       	brpl	.-8      	; 0x19a <Init_GPIO+0x54>
 1a2:	24 2f       	mov	r18, r20
 1a4:	20 95       	com	r18
 1a6:	82 23       	and	r24, r18
 1a8:	48 2b       	or	r20, r24
 1aa:	11 96       	adiw	r26, 0x01	; 1
 1ac:	4c 93       	st	X, r20
 1ae:	11 97       	sbiw	r26, 0x01	; 1
 1b0:	41 81       	ldd	r20, Z+1	; 0x01
 1b2:	44 23       	and	r20, r20
 1b4:	2c f5       	brge	.+74     	; 0x200 <Init_GPIO+0xba>
 1b6:	8f ef       	ldi	r24, 0xFF	; 255
 1b8:	83 0f       	add	r24, r19
 1ba:	82 30       	cpi	r24, 0x02	; 2
 1bc:	78 f4       	brcc	.+30     	; 0x1dc <Init_GPIO+0x96>
 1be:	85 b7       	in	r24, 0x35	; 53
 1c0:	40 78       	andi	r20, 0x80	; 128
 1c2:	50 e0       	ldi	r21, 0x00	; 0
 1c4:	66 0f       	add	r22, r22
 1c6:	77 1f       	adc	r23, r23
 1c8:	02 c0       	rjmp	.+4      	; 0x1ce <Init_GPIO+0x88>
 1ca:	44 0f       	add	r20, r20
 1cc:	55 1f       	adc	r21, r21
 1ce:	6a 95       	dec	r22
 1d0:	e2 f7       	brpl	.-8      	; 0x1ca <Init_GPIO+0x84>
 1d2:	24 2f       	mov	r18, r20
 1d4:	20 95       	com	r18
 1d6:	82 23       	and	r24, r18
 1d8:	48 2b       	or	r20, r24
 1da:	45 bf       	out	0x35, r20	; 53
 1dc:	34 30       	cpi	r19, 0x04	; 4
 1de:	81 f4       	brne	.+32     	; 0x200 <Init_GPIO+0xba>
 1e0:	34 b7       	in	r19, 0x34	; 52
 1e2:	81 81       	ldd	r24, Z+1	; 0x01
 1e4:	82 78       	andi	r24, 0x82	; 130
 1e6:	28 2f       	mov	r18, r24
 1e8:	22 95       	swap	r18
 1ea:	22 0f       	add	r18, r18
 1ec:	20 7e       	andi	r18, 0xE0	; 224
 1ee:	20 95       	com	r18
 1f0:	42 2f       	mov	r20, r18
 1f2:	43 23       	and	r20, r19
 1f4:	50 e2       	ldi	r21, 0x20	; 32
 1f6:	85 9f       	mul	r24, r21
 1f8:	90 01       	movw	r18, r0
 1fa:	11 24       	eor	r1, r1
 1fc:	24 2b       	or	r18, r20
 1fe:	24 bf       	out	0x34, r18	; 52
 200:	9f 5f       	subi	r25, 0xFF	; 255
 202:	05 c0       	rjmp	.+10     	; 0x20e <Init_GPIO+0xc8>
 204:	90 e0       	ldi	r25, 0x00	; 0
 206:	03 c0       	rjmp	.+6      	; 0x20e <Init_GPIO+0xc8>
 208:	90 e0       	ldi	r25, 0x00	; 0
 20a:	01 c0       	rjmp	.+2      	; 0x20e <Init_GPIO+0xc8>
 20c:	90 e0       	ldi	r25, 0x00	; 0
 20e:	98 30       	cpi	r25, 0x08	; 8
 210:	08 f4       	brcc	.+2      	; 0x214 <Init_GPIO+0xce>
 212:	ac cf       	rjmp	.-168    	; 0x16c <Init_GPIO+0x26>
 214:	81 e0       	ldi	r24, 0x01	; 1
 216:	08 95       	ret
 218:	80 e0       	ldi	r24, 0x00	; 0
 21a:	08 95       	ret

0000021c <Write_Pin>:
 21c:	89 33       	cpi	r24, 0x39	; 57
 21e:	91 05       	cpc	r25, r1
 220:	49 f0       	breq	.+18     	; 0x234 <Write_Pin+0x18>
 222:	86 33       	cpi	r24, 0x36	; 54
 224:	91 05       	cpc	r25, r1
 226:	31 f0       	breq	.+12     	; 0x234 <Write_Pin+0x18>
 228:	83 33       	cpi	r24, 0x33	; 51
 22a:	91 05       	cpc	r25, r1
 22c:	19 f0       	breq	.+6      	; 0x234 <Write_Pin+0x18>
 22e:	80 33       	cpi	r24, 0x30	; 48
 230:	91 05       	cpc	r25, r1
 232:	79 f4       	brne	.+30     	; 0x252 <Write_Pin+0x36>
 234:	41 30       	cpi	r20, 0x01	; 1
 236:	31 f4       	brne	.+12     	; 0x244 <Write_Pin+0x28>
 238:	fc 01       	movw	r30, r24
 23a:	22 81       	ldd	r18, Z+2	; 0x02
 23c:	62 2b       	or	r22, r18
 23e:	62 83       	std	Z+2, r22	; 0x02
 240:	81 e0       	ldi	r24, 0x01	; 1
 242:	08 95       	ret
 244:	60 95       	com	r22
 246:	fc 01       	movw	r30, r24
 248:	22 81       	ldd	r18, Z+2	; 0x02
 24a:	62 23       	and	r22, r18
 24c:	62 83       	std	Z+2, r22	; 0x02
 24e:	81 e0       	ldi	r24, 0x01	; 1
 250:	08 95       	ret
 252:	80 e0       	ldi	r24, 0x00	; 0
 254:	08 95       	ret

00000256 <main>:

int main(void)
{
	
    /* Replace with your application code */
	init();
 256:	0e 94 3e 00 	call	0x7c	; 0x7c <init>
	while (1)
	{
		program();
 25a:	0e 94 69 00 	call	0xd2	; 0xd2 <program>
 25e:	fd cf       	rjmp	.-6      	; 0x25a <main+0x4>

00000260 <_exit>:
 260:	f8 94       	cli

00000262 <__stop_program>:
 262:	ff cf       	rjmp	.-2      	; 0x262 <__stop_program>
