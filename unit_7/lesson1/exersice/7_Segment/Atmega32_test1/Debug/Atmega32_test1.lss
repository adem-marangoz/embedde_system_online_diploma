
Atmega32_test1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000027e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  0000027e  00000312  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  0080006a  0080006a  0000031c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000031c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000034c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000090  00000000  00000000  00000388  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b68  00000000  00000000  00000418  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007d8  00000000  00000000  00000f80  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000061b  00000000  00000000  00001758  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000124  00000000  00000000  00001d74  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004e1  00000000  00000000  00001e98  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000422  00000000  00000000  00002379  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000080  00000000  00000000  0000279b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__vector_3>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee e7       	ldi	r30, 0x7E	; 126
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 36       	cpi	r26, 0x6A	; 106
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	aa e6       	ldi	r26, 0x6A	; 106
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ab 36       	cpi	r26, 0x6B	; 107
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 2f 01 	call	0x25e	; 0x25e <main>
  8a:	0c 94 3d 01 	jmp	0x27a	; 0x27a <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <init>:




void init(void)
{
  92:	cf 93       	push	r28
  94:	df 93       	push	r29
  96:	00 d0       	rcall	.+0      	; 0x98 <init+0x6>
  98:	1f 92       	push	r1
  9a:	cd b7       	in	r28, 0x3d	; 61
  9c:	de b7       	in	r29, 0x3e	; 62
    /*Config PA0, PA1, PA2, PA3, PA4, PA5, PA6 and PA7 pin as Output */
    GPIO_config config_i_o = {0};
  9e:	19 82       	std	Y+1, r1	; 0x01
  a0:	1a 82       	std	Y+2, r1	; 0x02
  a2:	1b 82       	std	Y+3, r1	; 0x03
	config_i_o.pin = PIN_0| PIN_1 | PIN_2 | PIN_3 | PIN_4 | PIN_5 | PIN_6 | PIN_7;
  a4:	8f ef       	ldi	r24, 0xFF	; 255
  a6:	89 83       	std	Y+1, r24	; 0x01
	config_i_o.mode = OUTPUT;
  a8:	81 e0       	ldi	r24, 0x01	; 1
  aa:	8a 83       	std	Y+2, r24	; 0x02
	Init_GPIO(PORT_D,&config_i_o);
  ac:	be 01       	movw	r22, r28
  ae:	6f 5f       	subi	r22, 0xFF	; 255
  b0:	7f 4f       	sbci	r23, 0xFF	; 255
  b2:	80 e3       	ldi	r24, 0x30	; 48
  b4:	90 e0       	ldi	r25, 0x00	; 0
  b6:	0e 94 a4 00 	call	0x148	; 0x148 <Init_GPIO>

}
  ba:	0f 90       	pop	r0
  bc:	0f 90       	pop	r0
  be:	0f 90       	pop	r0
  c0:	df 91       	pop	r29
  c2:	cf 91       	pop	r28
  c4:	08 95       	ret

000000c6 <program>:

void program(void)
{ 
	volatile static uint8_t counter = 0;
	if(counter < 10)
  c6:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__data_end>
  ca:	8a 30       	cpi	r24, 0x0A	; 10
  cc:	a8 f4       	brcc	.+42     	; 0xf8 <program+0x32>
	{
		Write_Regester(PORT_D,numbers[counter]);
  ce:	e0 91 6a 00 	lds	r30, 0x006A	; 0x80006a <__data_end>
  d2:	f0 e0       	ldi	r31, 0x00	; 0
  d4:	e0 5a       	subi	r30, 0xA0	; 160
  d6:	ff 4f       	sbci	r31, 0xFF	; 255
  d8:	60 81       	ld	r22, Z
  da:	80 e3       	ldi	r24, 0x30	; 48
  dc:	90 e0       	ldi	r25, 0x00	; 0
  de:	0e 94 20 01 	call	0x240	; 0x240 <Write_Regester>
		counter ++;
  e2:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__data_end>
  e6:	8f 5f       	subi	r24, 0xFF	; 255
  e8:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <__data_end>
		if(counter == 10){counter = 0;}
  ec:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__data_end>
  f0:	8a 30       	cpi	r24, 0x0A	; 10
  f2:	11 f4       	brne	.+4      	; 0xf8 <program+0x32>
  f4:	10 92 6a 00 	sts	0x006A, r1	; 0x80006a <__data_end>
  f8:	08 95       	ret

000000fa <__vector_3>:
 *        and was called from within the interrupt file
 * @param: Hardware Interrupt Source base interupt vector table
 * @retval: None
 */
ISR(INT2_vect)
{
  fa:	1f 92       	push	r1
  fc:	0f 92       	push	r0
  fe:	0f b6       	in	r0, 0x3f	; 63
 100:	0f 92       	push	r0
 102:	11 24       	eor	r1, r1
 104:	2f 93       	push	r18
 106:	3f 93       	push	r19
 108:	4f 93       	push	r20
 10a:	5f 93       	push	r21
 10c:	6f 93       	push	r22
 10e:	7f 93       	push	r23
 110:	8f 93       	push	r24
 112:	9f 93       	push	r25
 114:	af 93       	push	r26
 116:	bf 93       	push	r27
 118:	ef 93       	push	r30
 11a:	ff 93       	push	r31
    Toggle_pin(PORT_A,PIN_0);
 11c:	61 e0       	ldi	r22, 0x01	; 1
 11e:	89 e3       	ldi	r24, 0x39	; 57
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	0e 94 0f 01 	call	0x21e	; 0x21e <Toggle_pin>
}
 126:	ff 91       	pop	r31
 128:	ef 91       	pop	r30
 12a:	bf 91       	pop	r27
 12c:	af 91       	pop	r26
 12e:	9f 91       	pop	r25
 130:	8f 91       	pop	r24
 132:	7f 91       	pop	r23
 134:	6f 91       	pop	r22
 136:	5f 91       	pop	r21
 138:	4f 91       	pop	r20
 13a:	3f 91       	pop	r19
 13c:	2f 91       	pop	r18
 13e:	0f 90       	pop	r0
 140:	0f be       	out	0x3f, r0	; 63
 142:	0f 90       	pop	r0
 144:	1f 90       	pop	r1
 146:	18 95       	reti

00000148 <Init_GPIO>:
{
    if(!(Check_PORT(GPIO))){return 0;}

    if((GPIO->PINx & Pin) == High) {return High;}
    else {return Low;}
}
 148:	dc 01       	movw	r26, r24
 14a:	fb 01       	movw	r30, r22
 14c:	89 33       	cpi	r24, 0x39	; 57
 14e:	91 05       	cpc	r25, r1
 150:	09 f4       	brne	.+2      	; 0x154 <Init_GPIO+0xc>
 152:	59 c0       	rjmp	.+178    	; 0x206 <Init_GPIO+0xbe>
 154:	86 33       	cpi	r24, 0x36	; 54
 156:	91 05       	cpc	r25, r1
 158:	09 f4       	brne	.+2      	; 0x15c <Init_GPIO+0x14>
 15a:	57 c0       	rjmp	.+174    	; 0x20a <Init_GPIO+0xc2>
 15c:	83 33       	cpi	r24, 0x33	; 51
 15e:	91 05       	cpc	r25, r1
 160:	09 f4       	brne	.+2      	; 0x164 <Init_GPIO+0x1c>
 162:	55 c0       	rjmp	.+170    	; 0x20e <Init_GPIO+0xc6>
 164:	c0 97       	sbiw	r24, 0x30	; 48
 166:	09 f0       	breq	.+2      	; 0x16a <Init_GPIO+0x22>
 168:	58 c0       	rjmp	.+176    	; 0x21a <Init_GPIO+0xd2>
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	51 c0       	rjmp	.+162    	; 0x210 <Init_GPIO+0xc8>
 16e:	69 2f       	mov	r22, r25
 170:	70 e0       	ldi	r23, 0x00	; 0
 172:	21 e0       	ldi	r18, 0x01	; 1
 174:	30 e0       	ldi	r19, 0x00	; 0
 176:	09 2e       	mov	r0, r25
 178:	02 c0       	rjmp	.+4      	; 0x17e <Init_GPIO+0x36>
 17a:	22 0f       	add	r18, r18
 17c:	33 1f       	adc	r19, r19
 17e:	0a 94       	dec	r0
 180:	e2 f7       	brpl	.-8      	; 0x17a <Init_GPIO+0x32>
 182:	30 81       	ld	r19, Z
 184:	32 23       	and	r19, r18
 186:	32 13       	cpse	r19, r18
 188:	3c c0       	rjmp	.+120    	; 0x202 <Init_GPIO+0xba>
 18a:	41 81       	ldd	r20, Z+1	; 0x01
 18c:	41 30       	cpi	r20, 0x01	; 1
 18e:	89 f4       	brne	.+34     	; 0x1b2 <Init_GPIO+0x6a>
 190:	11 96       	adiw	r26, 0x01	; 1
 192:	8c 91       	ld	r24, X
 194:	11 97       	sbiw	r26, 0x01	; 1
 196:	50 e0       	ldi	r21, 0x00	; 0
 198:	09 2e       	mov	r0, r25
 19a:	02 c0       	rjmp	.+4      	; 0x1a0 <Init_GPIO+0x58>
 19c:	44 0f       	add	r20, r20
 19e:	55 1f       	adc	r21, r21
 1a0:	0a 94       	dec	r0
 1a2:	e2 f7       	brpl	.-8      	; 0x19c <Init_GPIO+0x54>
 1a4:	24 2f       	mov	r18, r20
 1a6:	20 95       	com	r18
 1a8:	82 23       	and	r24, r18
 1aa:	48 2b       	or	r20, r24
 1ac:	11 96       	adiw	r26, 0x01	; 1
 1ae:	4c 93       	st	X, r20
 1b0:	11 97       	sbiw	r26, 0x01	; 1
 1b2:	41 81       	ldd	r20, Z+1	; 0x01
 1b4:	44 23       	and	r20, r20
 1b6:	2c f5       	brge	.+74     	; 0x202 <Init_GPIO+0xba>
 1b8:	8f ef       	ldi	r24, 0xFF	; 255
 1ba:	83 0f       	add	r24, r19
 1bc:	82 30       	cpi	r24, 0x02	; 2
 1be:	78 f4       	brcc	.+30     	; 0x1de <Init_GPIO+0x96>
 1c0:	85 b7       	in	r24, 0x35	; 53
 1c2:	40 78       	andi	r20, 0x80	; 128
 1c4:	50 e0       	ldi	r21, 0x00	; 0
 1c6:	66 0f       	add	r22, r22
 1c8:	77 1f       	adc	r23, r23
 1ca:	02 c0       	rjmp	.+4      	; 0x1d0 <Init_GPIO+0x88>
 1cc:	44 0f       	add	r20, r20
 1ce:	55 1f       	adc	r21, r21
 1d0:	6a 95       	dec	r22
 1d2:	e2 f7       	brpl	.-8      	; 0x1cc <Init_GPIO+0x84>
 1d4:	24 2f       	mov	r18, r20
 1d6:	20 95       	com	r18
 1d8:	82 23       	and	r24, r18
 1da:	48 2b       	or	r20, r24
 1dc:	45 bf       	out	0x35, r20	; 53
 1de:	34 30       	cpi	r19, 0x04	; 4
 1e0:	81 f4       	brne	.+32     	; 0x202 <Init_GPIO+0xba>
 1e2:	34 b7       	in	r19, 0x34	; 52
 1e4:	81 81       	ldd	r24, Z+1	; 0x01
 1e6:	82 78       	andi	r24, 0x82	; 130
 1e8:	28 2f       	mov	r18, r24
 1ea:	22 95       	swap	r18
 1ec:	22 0f       	add	r18, r18
 1ee:	20 7e       	andi	r18, 0xE0	; 224
 1f0:	20 95       	com	r18
 1f2:	42 2f       	mov	r20, r18
 1f4:	43 23       	and	r20, r19
 1f6:	50 e2       	ldi	r21, 0x20	; 32
 1f8:	85 9f       	mul	r24, r21
 1fa:	90 01       	movw	r18, r0
 1fc:	11 24       	eor	r1, r1
 1fe:	24 2b       	or	r18, r20
 200:	24 bf       	out	0x34, r18	; 52
 202:	9f 5f       	subi	r25, 0xFF	; 255
 204:	05 c0       	rjmp	.+10     	; 0x210 <Init_GPIO+0xc8>
 206:	90 e0       	ldi	r25, 0x00	; 0
 208:	03 c0       	rjmp	.+6      	; 0x210 <Init_GPIO+0xc8>
 20a:	90 e0       	ldi	r25, 0x00	; 0
 20c:	01 c0       	rjmp	.+2      	; 0x210 <Init_GPIO+0xc8>
 20e:	90 e0       	ldi	r25, 0x00	; 0
 210:	98 30       	cpi	r25, 0x08	; 8
 212:	08 f4       	brcc	.+2      	; 0x216 <Init_GPIO+0xce>
 214:	ac cf       	rjmp	.-168    	; 0x16e <Init_GPIO+0x26>
 216:	81 e0       	ldi	r24, 0x01	; 1
 218:	08 95       	ret
 21a:	80 e0       	ldi	r24, 0x00	; 0
 21c:	08 95       	ret

0000021e <Toggle_pin>:


void Toggle_pin(St_GPIO *GPIO,uint8_t Pin)
{
	if(!(Check_PORT(GPIO))){return;}
 21e:	89 33       	cpi	r24, 0x39	; 57
 220:	91 05       	cpc	r25, r1
 222:	49 f0       	breq	.+18     	; 0x236 <Toggle_pin+0x18>
 224:	86 33       	cpi	r24, 0x36	; 54
 226:	91 05       	cpc	r25, r1
 228:	31 f0       	breq	.+12     	; 0x236 <Toggle_pin+0x18>
 22a:	83 33       	cpi	r24, 0x33	; 51
 22c:	91 05       	cpc	r25, r1
 22e:	19 f0       	breq	.+6      	; 0x236 <Toggle_pin+0x18>
 230:	80 33       	cpi	r24, 0x30	; 48
 232:	91 05       	cpc	r25, r1
 234:	21 f4       	brne	.+8      	; 0x23e <Toggle_pin+0x20>

	GPIO->PORTx ^= Pin;
 236:	fc 01       	movw	r30, r24
 238:	22 81       	ldd	r18, Z+2	; 0x02
 23a:	62 27       	eor	r22, r18
 23c:	62 83       	std	Z+2, r22	; 0x02
 23e:	08 95       	ret

00000240 <Write_Regester>:
}

void Write_Regester(St_GPIO *GPIO,uint8_t Pin)
{
	if(!(Check_PORT(GPIO))){return;}
 240:	89 33       	cpi	r24, 0x39	; 57
 242:	91 05       	cpc	r25, r1
 244:	49 f0       	breq	.+18     	; 0x258 <Write_Regester+0x18>
 246:	86 33       	cpi	r24, 0x36	; 54
 248:	91 05       	cpc	r25, r1
 24a:	31 f0       	breq	.+12     	; 0x258 <Write_Regester+0x18>
 24c:	83 33       	cpi	r24, 0x33	; 51
 24e:	91 05       	cpc	r25, r1
 250:	19 f0       	breq	.+6      	; 0x258 <Write_Regester+0x18>
 252:	80 33       	cpi	r24, 0x30	; 48
 254:	91 05       	cpc	r25, r1
 256:	11 f4       	brne	.+4      	; 0x25c <Write_Regester+0x1c>
	GPIO->PORTx = Pin;
 258:	fc 01       	movw	r30, r24
 25a:	62 83       	std	Z+2, r22	; 0x02
 25c:	08 95       	ret

0000025e <main>:

int main(void)
{
	
    /* Replace with your application code */
	init();
 25e:	0e 94 49 00 	call	0x92	; 0x92 <init>
	while (1)
	{
		program();
 262:	0e 94 63 00 	call	0xc6	; 0xc6 <program>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 266:	2f ef       	ldi	r18, 0xFF	; 255
 268:	83 ed       	ldi	r24, 0xD3	; 211
 26a:	90 e3       	ldi	r25, 0x30	; 48
 26c:	21 50       	subi	r18, 0x01	; 1
 26e:	80 40       	sbci	r24, 0x00	; 0
 270:	90 40       	sbci	r25, 0x00	; 0
 272:	e1 f7       	brne	.-8      	; 0x26c <main+0xe>
 274:	00 c0       	rjmp	.+0      	; 0x276 <main+0x18>
 276:	00 00       	nop
 278:	f4 cf       	rjmp	.-24     	; 0x262 <main+0x4>

0000027a <_exit>:
 27a:	f8 94       	cli

0000027c <__stop_program>:
 27c:	ff cf       	rjmp	.-2      	; 0x27c <__stop_program>
