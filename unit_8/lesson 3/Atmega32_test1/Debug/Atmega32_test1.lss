
Atmega32_test1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000aa4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  00000aa4  00000b38  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000021  00800070  00800070  00000b48  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000b48  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000b78  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000178  00000000  00000000  00000bb4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001f31  00000000  00000000  00000d2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000bc4  00000000  00000000  00002c5d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001178  00000000  00000000  00003821  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000418  00000000  00000000  0000499c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000991  00000000  00000000  00004db4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000808  00000000  00000000  00005745  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000118  00000000  00000000  00005f4d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 ea       	ldi	r30, 0xA4	; 164
  68:	fa e0       	ldi	r31, 0x0A	; 10
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 37       	cpi	r26, 0x70	; 112
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 e7       	ldi	r26, 0x70	; 112
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a1 39       	cpi	r26, 0x91	; 145
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 b4 03 	call	0x768	; 0x768 <main>
  8a:	0c 94 50 05 	jmp	0xaa0	; 0xaa0 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <init>:

LCD_16_2 Lcd_config = {0};
St_Key_pad key_pad = {0};

void init(void)
{
  92:	cf 93       	push	r28
  94:	df 93       	push	r29
  96:	cd b7       	in	r28, 0x3d	; 61
  98:	de b7       	in	r29, 0x3e	; 62
	// key_pad.input.Pins = PIN_1|PIN_2|PIN_3|PIN_4;
	// key_pad.output.Port = PORT_C;
	// key_pad.output.Pins =PIN_1|PIN_2|PIN_3|PIN_4;
	// Key_pad_init(&key_pad);

	UART_Config.BuadRate = 4012;
  9a:	8c ea       	ldi	r24, 0xAC	; 172
  9c:	9f e0       	ldi	r25, 0x0F	; 15
  9e:	90 93 90 00 	sts	0x0090, r25	; 0x800090 <UART_Config+0x7>
  a2:	80 93 8f 00 	sts	0x008F, r24	; 0x80008f <UART_Config+0x6>
	UART_Config.Char_Size = Eight_bit;
  a6:	83 e0       	ldi	r24, 0x03	; 3
  a8:	80 93 8b 00 	sts	0x008B, r24	; 0x80008b <UART_Config+0x2>
	UART_Config.Clk_Polarity = Rising_Edge;
  ac:	10 92 8c 00 	sts	0x008C, r1	; 0x80008c <UART_Config+0x3>
	UART_Config.Communcation_Mode = Full_Duplex;
  b0:	83 e0       	ldi	r24, 0x03	; 3
  b2:	80 93 8e 00 	sts	0x008E, r24	; 0x80008e <UART_Config+0x5>
	UART_Config.Parity = Even_Parity;
  b6:	82 e0       	ldi	r24, 0x02	; 2
  b8:	80 93 8d 00 	sts	0x008D, r24	; 0x80008d <UART_Config+0x4>
	UART_Config.Mode = synchronous;
  bc:	81 e0       	ldi	r24, 0x01	; 1
  be:	80 93 89 00 	sts	0x0089, r24	; 0x800089 <UART_Config>
	UART_Config.Stop = One_bit;
  c2:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <UART_Config+0x1>
	Init_Uart(&UART_Config);
  c6:	89 e8       	ldi	r24, 0x89	; 137
  c8:	90 e0       	ldi	r25, 0x00	; 0
  ca:	0e 94 69 03 	call	0x6d2	; 0x6d2 <Init_Uart>
}
  ce:	00 00       	nop
  d0:	df 91       	pop	r29
  d2:	cf 91       	pop	r28
  d4:	08 95       	ret

000000d6 <program>:

void program(void)
{ 
  d6:	cf 93       	push	r28
  d8:	df 93       	push	r29
  da:	cd b7       	in	r28, 0x3d	; 61
  dc:	de b7       	in	r29, 0x3e	; 62
	Check_Prass_Button(&key_pad);
  de:	8b e7       	ldi	r24, 0x7B	; 123
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	0e 94 30 01 	call	0x260	; 0x260 <Check_Prass_Button>
}
  e6:	00 00       	nop
  e8:	df 91       	pop	r29
  ea:	cf 91       	pop	r28
  ec:	08 95       	ret

000000ee <Write_Pin>:
		break;
	
	default:
		break;
	}
}
  ee:	cf 93       	push	r28
  f0:	df 93       	push	r29
  f2:	00 d0       	rcall	.+0      	; 0xf4 <Write_Pin+0x6>
  f4:	00 d0       	rcall	.+0      	; 0xf6 <Write_Pin+0x8>
  f6:	cd b7       	in	r28, 0x3d	; 61
  f8:	de b7       	in	r29, 0x3e	; 62
  fa:	9a 83       	std	Y+2, r25	; 0x02
  fc:	89 83       	std	Y+1, r24	; 0x01
  fe:	6b 83       	std	Y+3, r22	; 0x03
 100:	4c 83       	std	Y+4, r20	; 0x04
 102:	89 81       	ldd	r24, Y+1	; 0x01
 104:	9a 81       	ldd	r25, Y+2	; 0x02
 106:	c9 97       	sbiw	r24, 0x39	; 57
 108:	71 f0       	breq	.+28     	; 0x126 <Write_Pin+0x38>
 10a:	89 81       	ldd	r24, Y+1	; 0x01
 10c:	9a 81       	ldd	r25, Y+2	; 0x02
 10e:	c6 97       	sbiw	r24, 0x36	; 54
 110:	51 f0       	breq	.+20     	; 0x126 <Write_Pin+0x38>
 112:	89 81       	ldd	r24, Y+1	; 0x01
 114:	9a 81       	ldd	r25, Y+2	; 0x02
 116:	c3 97       	sbiw	r24, 0x33	; 51
 118:	31 f0       	breq	.+12     	; 0x126 <Write_Pin+0x38>
 11a:	89 81       	ldd	r24, Y+1	; 0x01
 11c:	9a 81       	ldd	r25, Y+2	; 0x02
 11e:	c0 97       	sbiw	r24, 0x30	; 48
 120:	11 f0       	breq	.+4      	; 0x126 <Write_Pin+0x38>
 122:	80 e0       	ldi	r24, 0x00	; 0
 124:	1d c0       	rjmp	.+58     	; 0x160 <Write_Pin+0x72>
 126:	8c 81       	ldd	r24, Y+4	; 0x04
 128:	81 30       	cpi	r24, 0x01	; 1
 12a:	61 f4       	brne	.+24     	; 0x144 <Write_Pin+0x56>
 12c:	89 81       	ldd	r24, Y+1	; 0x01
 12e:	9a 81       	ldd	r25, Y+2	; 0x02
 130:	fc 01       	movw	r30, r24
 132:	92 81       	ldd	r25, Z+2	; 0x02
 134:	8b 81       	ldd	r24, Y+3	; 0x03
 136:	29 2f       	mov	r18, r25
 138:	28 2b       	or	r18, r24
 13a:	89 81       	ldd	r24, Y+1	; 0x01
 13c:	9a 81       	ldd	r25, Y+2	; 0x02
 13e:	fc 01       	movw	r30, r24
 140:	22 83       	std	Z+2, r18	; 0x02
 142:	0d c0       	rjmp	.+26     	; 0x15e <Write_Pin+0x70>
 144:	89 81       	ldd	r24, Y+1	; 0x01
 146:	9a 81       	ldd	r25, Y+2	; 0x02
 148:	fc 01       	movw	r30, r24
 14a:	82 81       	ldd	r24, Z+2	; 0x02
 14c:	98 2f       	mov	r25, r24
 14e:	8b 81       	ldd	r24, Y+3	; 0x03
 150:	80 95       	com	r24
 152:	89 23       	and	r24, r25
 154:	28 2f       	mov	r18, r24
 156:	89 81       	ldd	r24, Y+1	; 0x01
 158:	9a 81       	ldd	r25, Y+2	; 0x02
 15a:	fc 01       	movw	r30, r24
 15c:	22 83       	std	Z+2, r18	; 0x02
 15e:	81 e0       	ldi	r24, 0x01	; 1
 160:	0f 90       	pop	r0
 162:	0f 90       	pop	r0
 164:	0f 90       	pop	r0
 166:	0f 90       	pop	r0
 168:	df 91       	pop	r29
 16a:	cf 91       	pop	r28
 16c:	08 95       	ret

0000016e <Read_Pin>:
 16e:	cf 93       	push	r28
 170:	df 93       	push	r29
 172:	00 d0       	rcall	.+0      	; 0x174 <Read_Pin+0x6>
 174:	1f 92       	push	r1
 176:	cd b7       	in	r28, 0x3d	; 61
 178:	de b7       	in	r29, 0x3e	; 62
 17a:	9a 83       	std	Y+2, r25	; 0x02
 17c:	89 83       	std	Y+1, r24	; 0x01
 17e:	6b 83       	std	Y+3, r22	; 0x03
 180:	89 81       	ldd	r24, Y+1	; 0x01
 182:	9a 81       	ldd	r25, Y+2	; 0x02
 184:	c9 97       	sbiw	r24, 0x39	; 57
 186:	71 f0       	breq	.+28     	; 0x1a4 <Read_Pin+0x36>
 188:	89 81       	ldd	r24, Y+1	; 0x01
 18a:	9a 81       	ldd	r25, Y+2	; 0x02
 18c:	c6 97       	sbiw	r24, 0x36	; 54
 18e:	51 f0       	breq	.+20     	; 0x1a4 <Read_Pin+0x36>
 190:	89 81       	ldd	r24, Y+1	; 0x01
 192:	9a 81       	ldd	r25, Y+2	; 0x02
 194:	c3 97       	sbiw	r24, 0x33	; 51
 196:	31 f0       	breq	.+12     	; 0x1a4 <Read_Pin+0x36>
 198:	89 81       	ldd	r24, Y+1	; 0x01
 19a:	9a 81       	ldd	r25, Y+2	; 0x02
 19c:	c0 97       	sbiw	r24, 0x30	; 48
 19e:	11 f0       	breq	.+4      	; 0x1a4 <Read_Pin+0x36>
 1a0:	80 e0       	ldi	r24, 0x00	; 0
 1a2:	0c c0       	rjmp	.+24     	; 0x1bc <Read_Pin+0x4e>
 1a4:	89 81       	ldd	r24, Y+1	; 0x01
 1a6:	9a 81       	ldd	r25, Y+2	; 0x02
 1a8:	fc 01       	movw	r30, r24
 1aa:	90 81       	ld	r25, Z
 1ac:	8b 81       	ldd	r24, Y+3	; 0x03
 1ae:	98 23       	and	r25, r24
 1b0:	8b 81       	ldd	r24, Y+3	; 0x03
 1b2:	98 17       	cp	r25, r24
 1b4:	11 f4       	brne	.+4      	; 0x1ba <Read_Pin+0x4c>
 1b6:	81 e0       	ldi	r24, 0x01	; 1
 1b8:	01 c0       	rjmp	.+2      	; 0x1bc <Read_Pin+0x4e>
 1ba:	80 e0       	ldi	r24, 0x00	; 0
 1bc:	0f 90       	pop	r0
 1be:	0f 90       	pop	r0
 1c0:	0f 90       	pop	r0
 1c2:	df 91       	pop	r29
 1c4:	cf 91       	pop	r28
 1c6:	08 95       	ret

000001c8 <Write_Port_Register>:
 1c8:	cf 93       	push	r28
 1ca:	df 93       	push	r29
 1cc:	00 d0       	rcall	.+0      	; 0x1ce <Write_Port_Register+0x6>
 1ce:	1f 92       	push	r1
 1d0:	cd b7       	in	r28, 0x3d	; 61
 1d2:	de b7       	in	r29, 0x3e	; 62
 1d4:	9a 83       	std	Y+2, r25	; 0x02
 1d6:	89 83       	std	Y+1, r24	; 0x01
 1d8:	6b 83       	std	Y+3, r22	; 0x03
 1da:	89 81       	ldd	r24, Y+1	; 0x01
 1dc:	9a 81       	ldd	r25, Y+2	; 0x02
 1de:	c9 97       	sbiw	r24, 0x39	; 57
 1e0:	61 f0       	breq	.+24     	; 0x1fa <Write_Port_Register+0x32>
 1e2:	89 81       	ldd	r24, Y+1	; 0x01
 1e4:	9a 81       	ldd	r25, Y+2	; 0x02
 1e6:	c6 97       	sbiw	r24, 0x36	; 54
 1e8:	41 f0       	breq	.+16     	; 0x1fa <Write_Port_Register+0x32>
 1ea:	89 81       	ldd	r24, Y+1	; 0x01
 1ec:	9a 81       	ldd	r25, Y+2	; 0x02
 1ee:	c3 97       	sbiw	r24, 0x33	; 51
 1f0:	21 f0       	breq	.+8      	; 0x1fa <Write_Port_Register+0x32>
 1f2:	89 81       	ldd	r24, Y+1	; 0x01
 1f4:	9a 81       	ldd	r25, Y+2	; 0x02
 1f6:	c0 97       	sbiw	r24, 0x30	; 48
 1f8:	31 f4       	brne	.+12     	; 0x206 <Write_Port_Register+0x3e>
 1fa:	89 81       	ldd	r24, Y+1	; 0x01
 1fc:	9a 81       	ldd	r25, Y+2	; 0x02
 1fe:	2b 81       	ldd	r18, Y+3	; 0x03
 200:	fc 01       	movw	r30, r24
 202:	22 83       	std	Z+2, r18	; 0x02
 204:	01 c0       	rjmp	.+2      	; 0x208 <Write_Port_Register+0x40>
 206:	00 00       	nop
 208:	0f 90       	pop	r0
 20a:	0f 90       	pop	r0
 20c:	0f 90       	pop	r0
 20e:	df 91       	pop	r29
 210:	cf 91       	pop	r28
 212:	08 95       	ret

00000214 <Write_Dir_Register>:

void Write_Dir_Register(St_GPIO *GPIO,unsigned char Pin)
{
 214:	cf 93       	push	r28
 216:	df 93       	push	r29
 218:	00 d0       	rcall	.+0      	; 0x21a <Write_Dir_Register+0x6>
 21a:	1f 92       	push	r1
 21c:	cd b7       	in	r28, 0x3d	; 61
 21e:	de b7       	in	r29, 0x3e	; 62
 220:	9a 83       	std	Y+2, r25	; 0x02
 222:	89 83       	std	Y+1, r24	; 0x01
 224:	6b 83       	std	Y+3, r22	; 0x03
	if(!(Check_PORT(GPIO))){return;}
 226:	89 81       	ldd	r24, Y+1	; 0x01
 228:	9a 81       	ldd	r25, Y+2	; 0x02
 22a:	c9 97       	sbiw	r24, 0x39	; 57
 22c:	61 f0       	breq	.+24     	; 0x246 <Write_Dir_Register+0x32>
 22e:	89 81       	ldd	r24, Y+1	; 0x01
 230:	9a 81       	ldd	r25, Y+2	; 0x02
 232:	c6 97       	sbiw	r24, 0x36	; 54
 234:	41 f0       	breq	.+16     	; 0x246 <Write_Dir_Register+0x32>
 236:	89 81       	ldd	r24, Y+1	; 0x01
 238:	9a 81       	ldd	r25, Y+2	; 0x02
 23a:	c3 97       	sbiw	r24, 0x33	; 51
 23c:	21 f0       	breq	.+8      	; 0x246 <Write_Dir_Register+0x32>
 23e:	89 81       	ldd	r24, Y+1	; 0x01
 240:	9a 81       	ldd	r25, Y+2	; 0x02
 242:	c0 97       	sbiw	r24, 0x30	; 48
 244:	31 f4       	brne	.+12     	; 0x252 <Write_Dir_Register+0x3e>
	GPIO->Un_DDRx.DDRx = Pin;
 246:	89 81       	ldd	r24, Y+1	; 0x01
 248:	9a 81       	ldd	r25, Y+2	; 0x02
 24a:	2b 81       	ldd	r18, Y+3	; 0x03
 24c:	fc 01       	movw	r30, r24
 24e:	21 83       	std	Z+1, r18	; 0x01
 250:	01 c0       	rjmp	.+2      	; 0x254 <Write_Dir_Register+0x40>
	}
}

void Write_Dir_Register(St_GPIO *GPIO,unsigned char Pin)
{
	if(!(Check_PORT(GPIO))){return;}
 252:	00 00       	nop
	GPIO->Un_DDRx.DDRx = Pin;
 254:	0f 90       	pop	r0
 256:	0f 90       	pop	r0
 258:	0f 90       	pop	r0
 25a:	df 91       	pop	r29
 25c:	cf 91       	pop	r28
 25e:	08 95       	ret

00000260 <Check_Prass_Button>:
}



void Check_Prass_Button(St_Key_pad *key_pad)
{
 260:	cf 93       	push	r28
 262:	df 93       	push	r29
 264:	00 d0       	rcall	.+0      	; 0x266 <Check_Prass_Button+0x6>
 266:	00 d0       	rcall	.+0      	; 0x268 <Check_Prass_Button+0x8>
 268:	cd b7       	in	r28, 0x3d	; 61
 26a:	de b7       	in	r29, 0x3e	; 62
 26c:	9c 83       	std	Y+4, r25	; 0x04
 26e:	8b 83       	std	Y+3, r24	; 0x03
    Write_Pin(key_pad->output.Port,key_pad->output.Pins,High);
 270:	8b 81       	ldd	r24, Y+3	; 0x03
 272:	9c 81       	ldd	r25, Y+4	; 0x04
 274:	fc 01       	movw	r30, r24
 276:	22 81       	ldd	r18, Z+2	; 0x02
 278:	8b 81       	ldd	r24, Y+3	; 0x03
 27a:	9c 81       	ldd	r25, Y+4	; 0x04
 27c:	fc 01       	movw	r30, r24
 27e:	80 81       	ld	r24, Z
 280:	91 81       	ldd	r25, Z+1	; 0x01
 282:	41 e0       	ldi	r20, 0x01	; 1
 284:	62 2f       	mov	r22, r18
 286:	0e 94 77 00 	call	0xee	; 0xee <Write_Pin>
    Write_Pin(key_pad->input.Port,key_pad->input.Pins,High);
 28a:	8b 81       	ldd	r24, Y+3	; 0x03
 28c:	9c 81       	ldd	r25, Y+4	; 0x04
 28e:	fc 01       	movw	r30, r24
 290:	25 81       	ldd	r18, Z+5	; 0x05
 292:	8b 81       	ldd	r24, Y+3	; 0x03
 294:	9c 81       	ldd	r25, Y+4	; 0x04
 296:	fc 01       	movw	r30, r24
 298:	83 81       	ldd	r24, Z+3	; 0x03
 29a:	94 81       	ldd	r25, Z+4	; 0x04
 29c:	41 e0       	ldi	r20, 0x01	; 1
 29e:	62 2f       	mov	r22, r18
 2a0:	0e 94 77 00 	call	0xee	; 0xee <Write_Pin>
    for(volatile uint8_t i = 0; i < 4; i++)
 2a4:	19 82       	std	Y+1, r1	; 0x01
 2a6:	8b c0       	rjmp	.+278    	; 0x3be <Check_Prass_Button+0x15e>
    {
        Write_Pin(key_pad->output.Port,pad_output_pin[i],Low);
 2a8:	89 81       	ldd	r24, Y+1	; 0x01
 2aa:	88 2f       	mov	r24, r24
 2ac:	90 e0       	ldi	r25, 0x00	; 0
 2ae:	8f 57       	subi	r24, 0x7F	; 127
 2b0:	9f 4f       	sbci	r25, 0xFF	; 255
 2b2:	fc 01       	movw	r30, r24
 2b4:	20 81       	ld	r18, Z
 2b6:	8b 81       	ldd	r24, Y+3	; 0x03
 2b8:	9c 81       	ldd	r25, Y+4	; 0x04
 2ba:	fc 01       	movw	r30, r24
 2bc:	80 81       	ld	r24, Z
 2be:	91 81       	ldd	r25, Z+1	; 0x01
 2c0:	40 e0       	ldi	r20, 0x00	; 0
 2c2:	62 2f       	mov	r22, r18
 2c4:	0e 94 77 00 	call	0xee	; 0xee <Write_Pin>
        for(volatile uint8_t j = 0; j < 4; j++)
 2c8:	1a 82       	std	Y+2, r1	; 0x02
 2ca:	73 c0       	rjmp	.+230    	; 0x3b2 <Check_Prass_Button+0x152>
        {
            while(Read_Pin(key_pad->input.Port,pad_input_pin[j]) == Low)
            {
                Write_Pin(key_pad->output.Port,pad_output_pin[i],High);
 2cc:	89 81       	ldd	r24, Y+1	; 0x01
 2ce:	88 2f       	mov	r24, r24
 2d0:	90 e0       	ldi	r25, 0x00	; 0
 2d2:	8f 57       	subi	r24, 0x7F	; 127
 2d4:	9f 4f       	sbci	r25, 0xFF	; 255
 2d6:	fc 01       	movw	r30, r24
 2d8:	20 81       	ld	r18, Z
 2da:	8b 81       	ldd	r24, Y+3	; 0x03
 2dc:	9c 81       	ldd	r25, Y+4	; 0x04
 2de:	fc 01       	movw	r30, r24
 2e0:	80 81       	ld	r24, Z
 2e2:	91 81       	ldd	r25, Z+1	; 0x01
 2e4:	41 e0       	ldi	r20, 0x01	; 1
 2e6:	62 2f       	mov	r22, r18
 2e8:	0e 94 77 00 	call	0xee	; 0xee <Write_Pin>
                while(Read_Pin(key_pad->input.Port,pad_input_pin[j]) == Low);
 2ec:	00 00       	nop
 2ee:	8a 81       	ldd	r24, Y+2	; 0x02
 2f0:	88 2f       	mov	r24, r24
 2f2:	90 e0       	ldi	r25, 0x00	; 0
 2f4:	8b 57       	subi	r24, 0x7B	; 123
 2f6:	9f 4f       	sbci	r25, 0xFF	; 255
 2f8:	fc 01       	movw	r30, r24
 2fa:	20 81       	ld	r18, Z
 2fc:	8b 81       	ldd	r24, Y+3	; 0x03
 2fe:	9c 81       	ldd	r25, Y+4	; 0x04
 300:	fc 01       	movw	r30, r24
 302:	83 81       	ldd	r24, Z+3	; 0x03
 304:	94 81       	ldd	r25, Z+4	; 0x04
 306:	62 2f       	mov	r22, r18
 308:	0e 94 b7 00 	call	0x16e	; 0x16e <Read_Pin>
 30c:	88 23       	and	r24, r24
 30e:	79 f3       	breq	.-34     	; 0x2ee <Check_Prass_Button+0x8e>
                Write_Pin(key_pad->input.Port,key_pad->input.Pins,High);
 310:	8b 81       	ldd	r24, Y+3	; 0x03
 312:	9c 81       	ldd	r25, Y+4	; 0x04
 314:	fc 01       	movw	r30, r24
 316:	25 81       	ldd	r18, Z+5	; 0x05
 318:	8b 81       	ldd	r24, Y+3	; 0x03
 31a:	9c 81       	ldd	r25, Y+4	; 0x04
 31c:	fc 01       	movw	r30, r24
 31e:	83 81       	ldd	r24, Z+3	; 0x03
 320:	94 81       	ldd	r25, Z+4	; 0x04
 322:	41 e0       	ldi	r20, 0x01	; 1
 324:	62 2f       	mov	r22, r18
 326:	0e 94 77 00 	call	0xee	; 0xee <Write_Pin>
                Write_Pin(key_pad->input.Port,key_pad->input.Pins,High);
 32a:	8b 81       	ldd	r24, Y+3	; 0x03
 32c:	9c 81       	ldd	r25, Y+4	; 0x04
 32e:	fc 01       	movw	r30, r24
 330:	25 81       	ldd	r18, Z+5	; 0x05
 332:	8b 81       	ldd	r24, Y+3	; 0x03
 334:	9c 81       	ldd	r25, Y+4	; 0x04
 336:	fc 01       	movw	r30, r24
 338:	83 81       	ldd	r24, Z+3	; 0x03
 33a:	94 81       	ldd	r25, Z+4	; 0x04
 33c:	41 e0       	ldi	r20, 0x01	; 1
 33e:	62 2f       	mov	r22, r18
 340:	0e 94 77 00 	call	0xee	; 0xee <Write_Pin>
                if((j == 3) && (i == 0)){clean_Lcd(&Lcd_config); return;}
 344:	8a 81       	ldd	r24, Y+2	; 0x02
 346:	83 30       	cpi	r24, 0x03	; 3
 348:	41 f4       	brne	.+16     	; 0x35a <Check_Prass_Button+0xfa>
 34a:	89 81       	ldd	r24, Y+1	; 0x01
 34c:	88 23       	and	r24, r24
 34e:	29 f4       	brne	.+10     	; 0x35a <Check_Prass_Button+0xfa>
 350:	80 e7       	ldi	r24, 0x70	; 112
 352:	90 e0       	ldi	r25, 0x00	; 0
 354:	0e 94 57 03 	call	0x6ae	; 0x6ae <clean_Lcd>
 358:	36 c0       	rjmp	.+108    	; 0x3c6 <Check_Prass_Button+0x166>
                Write_Character(&Lcd_config,key_pad_keys[j][i]);
 35a:	8a 81       	ldd	r24, Y+2	; 0x02
 35c:	28 2f       	mov	r18, r24
 35e:	30 e0       	ldi	r19, 0x00	; 0
 360:	89 81       	ldd	r24, Y+1	; 0x01
 362:	88 2f       	mov	r24, r24
 364:	90 e0       	ldi	r25, 0x00	; 0
 366:	22 0f       	add	r18, r18
 368:	33 1f       	adc	r19, r19
 36a:	22 0f       	add	r18, r18
 36c:	33 1f       	adc	r19, r19
 36e:	82 0f       	add	r24, r18
 370:	93 1f       	adc	r25, r19
 372:	80 5a       	subi	r24, 0xA0	; 160
 374:	9f 4f       	sbci	r25, 0xFF	; 255
 376:	fc 01       	movw	r30, r24
 378:	80 81       	ld	r24, Z
 37a:	68 2f       	mov	r22, r24
 37c:	80 e7       	ldi	r24, 0x70	; 112
 37e:	90 e0       	ldi	r25, 0x00	; 0
 380:	0e 94 d6 02 	call	0x5ac	; 0x5ac <Write_Character>

                break;
 384:	13 c0       	rjmp	.+38     	; 0x3ac <Check_Prass_Button+0x14c>
    for(volatile uint8_t i = 0; i < 4; i++)
    {
        Write_Pin(key_pad->output.Port,pad_output_pin[i],Low);
        for(volatile uint8_t j = 0; j < 4; j++)
        {
            while(Read_Pin(key_pad->input.Port,pad_input_pin[j]) == Low)
 386:	00 00       	nop
 388:	8a 81       	ldd	r24, Y+2	; 0x02
 38a:	88 2f       	mov	r24, r24
 38c:	90 e0       	ldi	r25, 0x00	; 0
 38e:	8b 57       	subi	r24, 0x7B	; 123
 390:	9f 4f       	sbci	r25, 0xFF	; 255
 392:	fc 01       	movw	r30, r24
 394:	20 81       	ld	r18, Z
 396:	8b 81       	ldd	r24, Y+3	; 0x03
 398:	9c 81       	ldd	r25, Y+4	; 0x04
 39a:	fc 01       	movw	r30, r24
 39c:	83 81       	ldd	r24, Z+3	; 0x03
 39e:	94 81       	ldd	r25, Z+4	; 0x04
 3a0:	62 2f       	mov	r22, r18
 3a2:	0e 94 b7 00 	call	0x16e	; 0x16e <Read_Pin>
 3a6:	88 23       	and	r24, r24
 3a8:	09 f4       	brne	.+2      	; 0x3ac <Check_Prass_Button+0x14c>
 3aa:	90 cf       	rjmp	.-224    	; 0x2cc <Check_Prass_Button+0x6c>
    Write_Pin(key_pad->output.Port,key_pad->output.Pins,High);
    Write_Pin(key_pad->input.Port,key_pad->input.Pins,High);
    for(volatile uint8_t i = 0; i < 4; i++)
    {
        Write_Pin(key_pad->output.Port,pad_output_pin[i],Low);
        for(volatile uint8_t j = 0; j < 4; j++)
 3ac:	8a 81       	ldd	r24, Y+2	; 0x02
 3ae:	8f 5f       	subi	r24, 0xFF	; 255
 3b0:	8a 83       	std	Y+2, r24	; 0x02
 3b2:	8a 81       	ldd	r24, Y+2	; 0x02
 3b4:	84 30       	cpi	r24, 0x04	; 4
 3b6:	38 f3       	brcs	.-50     	; 0x386 <Check_Prass_Button+0x126>

void Check_Prass_Button(St_Key_pad *key_pad)
{
    Write_Pin(key_pad->output.Port,key_pad->output.Pins,High);
    Write_Pin(key_pad->input.Port,key_pad->input.Pins,High);
    for(volatile uint8_t i = 0; i < 4; i++)
 3b8:	89 81       	ldd	r24, Y+1	; 0x01
 3ba:	8f 5f       	subi	r24, 0xFF	; 255
 3bc:	89 83       	std	Y+1, r24	; 0x01
 3be:	89 81       	ldd	r24, Y+1	; 0x01
 3c0:	84 30       	cpi	r24, 0x04	; 4
 3c2:	08 f4       	brcc	.+2      	; 0x3c6 <Check_Prass_Button+0x166>
 3c4:	71 cf       	rjmp	.-286    	; 0x2a8 <Check_Prass_Button+0x48>

                break;
            }
        }
    }
 3c6:	0f 90       	pop	r0
 3c8:	0f 90       	pop	r0
 3ca:	0f 90       	pop	r0
 3cc:	0f 90       	pop	r0
 3ce:	df 91       	pop	r29
 3d0:	cf 91       	pop	r28
 3d2:	08 95       	ret

000003d4 <Kick_Enable_pin>:
    }
    if(counter > 15)
    {
        base_temp++;
    }
}
 3d4:	cf 93       	push	r28
 3d6:	df 93       	push	r29
 3d8:	cd b7       	in	r28, 0x3d	; 61
 3da:	de b7       	in	r29, 0x3e	; 62
 3dc:	60 97       	sbiw	r28, 0x10	; 16
 3de:	0f b6       	in	r0, 0x3f	; 63
 3e0:	f8 94       	cli
 3e2:	de bf       	out	0x3e, r29	; 62
 3e4:	0f be       	out	0x3f, r0	; 63
 3e6:	cd bf       	out	0x3d, r28	; 61
 3e8:	98 8b       	std	Y+16, r25	; 0x10
 3ea:	8f 87       	std	Y+15, r24	; 0x0f
 3ec:	8f 85       	ldd	r24, Y+15	; 0x0f
 3ee:	98 89       	ldd	r25, Y+16	; 0x10
 3f0:	fc 01       	movw	r30, r24
 3f2:	21 85       	ldd	r18, Z+9	; 0x09
 3f4:	8f 85       	ldd	r24, Y+15	; 0x0f
 3f6:	98 89       	ldd	r25, Y+16	; 0x10
 3f8:	fc 01       	movw	r30, r24
 3fa:	86 81       	ldd	r24, Z+6	; 0x06
 3fc:	97 81       	ldd	r25, Z+7	; 0x07
 3fe:	40 e0       	ldi	r20, 0x00	; 0
 400:	62 2f       	mov	r22, r18
 402:	0e 94 77 00 	call	0xee	; 0xee <Write_Pin>
 406:	00 00       	nop
 408:	00 00       	nop
 40a:	80 e0       	ldi	r24, 0x00	; 0
 40c:	90 e0       	ldi	r25, 0x00	; 0
 40e:	a0 e8       	ldi	r26, 0x80	; 128
 410:	bf e3       	ldi	r27, 0x3F	; 63
 412:	89 83       	std	Y+1, r24	; 0x01
 414:	9a 83       	std	Y+2, r25	; 0x02
 416:	ab 83       	std	Y+3, r26	; 0x03
 418:	bc 83       	std	Y+4, r27	; 0x04
 41a:	20 e0       	ldi	r18, 0x00	; 0
 41c:	30 e0       	ldi	r19, 0x00	; 0
 41e:	4a e7       	ldi	r20, 0x7A	; 122
 420:	55 e4       	ldi	r21, 0x45	; 69
 422:	69 81       	ldd	r22, Y+1	; 0x01
 424:	7a 81       	ldd	r23, Y+2	; 0x02
 426:	8b 81       	ldd	r24, Y+3	; 0x03
 428:	9c 81       	ldd	r25, Y+4	; 0x04
 42a:	0e 94 bb 04 	call	0x976	; 0x976 <__mulsf3>
 42e:	dc 01       	movw	r26, r24
 430:	cb 01       	movw	r24, r22
 432:	8d 83       	std	Y+5, r24	; 0x05
 434:	9e 83       	std	Y+6, r25	; 0x06
 436:	af 83       	std	Y+7, r26	; 0x07
 438:	b8 87       	std	Y+8, r27	; 0x08
 43a:	20 e0       	ldi	r18, 0x00	; 0
 43c:	30 e0       	ldi	r19, 0x00	; 0
 43e:	40 e8       	ldi	r20, 0x80	; 128
 440:	5f e3       	ldi	r21, 0x3F	; 63
 442:	6d 81       	ldd	r22, Y+5	; 0x05
 444:	7e 81       	ldd	r23, Y+6	; 0x06
 446:	8f 81       	ldd	r24, Y+7	; 0x07
 448:	98 85       	ldd	r25, Y+8	; 0x08
 44a:	0e 94 35 04 	call	0x86a	; 0x86a <__cmpsf2>
 44e:	88 23       	and	r24, r24
 450:	2c f4       	brge	.+10     	; 0x45c <__EEPROM_REGION_LENGTH__+0x5c>
 452:	81 e0       	ldi	r24, 0x01	; 1
 454:	90 e0       	ldi	r25, 0x00	; 0
 456:	9a 87       	std	Y+10, r25	; 0x0a
 458:	89 87       	std	Y+9, r24	; 0x09
 45a:	3f c0       	rjmp	.+126    	; 0x4da <__EEPROM_REGION_LENGTH__+0xda>
 45c:	20 e0       	ldi	r18, 0x00	; 0
 45e:	3f ef       	ldi	r19, 0xFF	; 255
 460:	4f e7       	ldi	r20, 0x7F	; 127
 462:	57 e4       	ldi	r21, 0x47	; 71
 464:	6d 81       	ldd	r22, Y+5	; 0x05
 466:	7e 81       	ldd	r23, Y+6	; 0x06
 468:	8f 81       	ldd	r24, Y+7	; 0x07
 46a:	98 85       	ldd	r25, Y+8	; 0x08
 46c:	0e 94 b6 04 	call	0x96c	; 0x96c <__gesf2>
 470:	18 16       	cp	r1, r24
 472:	4c f5       	brge	.+82     	; 0x4c6 <__EEPROM_REGION_LENGTH__+0xc6>
 474:	20 e0       	ldi	r18, 0x00	; 0
 476:	30 e0       	ldi	r19, 0x00	; 0
 478:	40 e2       	ldi	r20, 0x20	; 32
 47a:	51 e4       	ldi	r21, 0x41	; 65
 47c:	69 81       	ldd	r22, Y+1	; 0x01
 47e:	7a 81       	ldd	r23, Y+2	; 0x02
 480:	8b 81       	ldd	r24, Y+3	; 0x03
 482:	9c 81       	ldd	r25, Y+4	; 0x04
 484:	0e 94 bb 04 	call	0x976	; 0x976 <__mulsf3>
 488:	dc 01       	movw	r26, r24
 48a:	cb 01       	movw	r24, r22
 48c:	bc 01       	movw	r22, r24
 48e:	cd 01       	movw	r24, r26
 490:	0e 94 3a 04 	call	0x874	; 0x874 <__fixunssfsi>
 494:	dc 01       	movw	r26, r24
 496:	cb 01       	movw	r24, r22
 498:	9a 87       	std	Y+10, r25	; 0x0a
 49a:	89 87       	std	Y+9, r24	; 0x09
 49c:	0f c0       	rjmp	.+30     	; 0x4bc <__EEPROM_REGION_LENGTH__+0xbc>
 49e:	80 e9       	ldi	r24, 0x90	; 144
 4a0:	91 e0       	ldi	r25, 0x01	; 1
 4a2:	9c 87       	std	Y+12, r25	; 0x0c
 4a4:	8b 87       	std	Y+11, r24	; 0x0b
 4a6:	8b 85       	ldd	r24, Y+11	; 0x0b
 4a8:	9c 85       	ldd	r25, Y+12	; 0x0c
 4aa:	01 97       	sbiw	r24, 0x01	; 1
 4ac:	f1 f7       	brne	.-4      	; 0x4aa <__EEPROM_REGION_LENGTH__+0xaa>
 4ae:	9c 87       	std	Y+12, r25	; 0x0c
 4b0:	8b 87       	std	Y+11, r24	; 0x0b
 4b2:	89 85       	ldd	r24, Y+9	; 0x09
 4b4:	9a 85       	ldd	r25, Y+10	; 0x0a
 4b6:	01 97       	sbiw	r24, 0x01	; 1
 4b8:	9a 87       	std	Y+10, r25	; 0x0a
 4ba:	89 87       	std	Y+9, r24	; 0x09
 4bc:	89 85       	ldd	r24, Y+9	; 0x09
 4be:	9a 85       	ldd	r25, Y+10	; 0x0a
 4c0:	89 2b       	or	r24, r25
 4c2:	69 f7       	brne	.-38     	; 0x49e <__EEPROM_REGION_LENGTH__+0x9e>
 4c4:	14 c0       	rjmp	.+40     	; 0x4ee <__EEPROM_REGION_LENGTH__+0xee>
 4c6:	6d 81       	ldd	r22, Y+5	; 0x05
 4c8:	7e 81       	ldd	r23, Y+6	; 0x06
 4ca:	8f 81       	ldd	r24, Y+7	; 0x07
 4cc:	98 85       	ldd	r25, Y+8	; 0x08
 4ce:	0e 94 3a 04 	call	0x874	; 0x874 <__fixunssfsi>
 4d2:	dc 01       	movw	r26, r24
 4d4:	cb 01       	movw	r24, r22
 4d6:	9a 87       	std	Y+10, r25	; 0x0a
 4d8:	89 87       	std	Y+9, r24	; 0x09
 4da:	89 85       	ldd	r24, Y+9	; 0x09
 4dc:	9a 85       	ldd	r25, Y+10	; 0x0a
 4de:	9e 87       	std	Y+14, r25	; 0x0e
 4e0:	8d 87       	std	Y+13, r24	; 0x0d
 4e2:	8d 85       	ldd	r24, Y+13	; 0x0d
 4e4:	9e 85       	ldd	r25, Y+14	; 0x0e
 4e6:	01 97       	sbiw	r24, 0x01	; 1
 4e8:	f1 f7       	brne	.-4      	; 0x4e6 <__EEPROM_REGION_LENGTH__+0xe6>
 4ea:	9e 87       	std	Y+14, r25	; 0x0e
 4ec:	8d 87       	std	Y+13, r24	; 0x0d
 4ee:	8f 85       	ldd	r24, Y+15	; 0x0f
 4f0:	98 89       	ldd	r25, Y+16	; 0x10
 4f2:	fc 01       	movw	r30, r24
 4f4:	21 85       	ldd	r18, Z+9	; 0x09
 4f6:	8f 85       	ldd	r24, Y+15	; 0x0f
 4f8:	98 89       	ldd	r25, Y+16	; 0x10
 4fa:	fc 01       	movw	r30, r24
 4fc:	86 81       	ldd	r24, Z+6	; 0x06
 4fe:	97 81       	ldd	r25, Z+7	; 0x07
 500:	41 e0       	ldi	r20, 0x01	; 1
 502:	62 2f       	mov	r22, r18
 504:	0e 94 77 00 	call	0xee	; 0xee <Write_Pin>
 508:	00 00       	nop
 50a:	60 96       	adiw	r28, 0x10	; 16
 50c:	0f b6       	in	r0, 0x3f	; 63
 50e:	f8 94       	cli
 510:	de bf       	out	0x3e, r29	; 62
 512:	0f be       	out	0x3f, r0	; 63
 514:	cd bf       	out	0x3d, r28	; 61
 516:	df 91       	pop	r29
 518:	cf 91       	pop	r28
 51a:	08 95       	ret

0000051c <Check_BF>:
 51c:	cf 93       	push	r28
 51e:	df 93       	push	r29
 520:	00 d0       	rcall	.+0      	; 0x522 <Check_BF+0x6>
 522:	cd b7       	in	r28, 0x3d	; 61
 524:	de b7       	in	r29, 0x3e	; 62
 526:	9a 83       	std	Y+2, r25	; 0x02
 528:	89 83       	std	Y+1, r24	; 0x01
 52a:	89 81       	ldd	r24, Y+1	; 0x01
 52c:	9a 81       	ldd	r25, Y+2	; 0x02
 52e:	fc 01       	movw	r30, r24
 530:	80 81       	ld	r24, Z
 532:	91 81       	ldd	r25, Z+1	; 0x01
 534:	60 e0       	ldi	r22, 0x00	; 0
 536:	0e 94 0a 01 	call	0x214	; 0x214 <Write_Dir_Register>
 53a:	89 81       	ldd	r24, Y+1	; 0x01
 53c:	9a 81       	ldd	r25, Y+2	; 0x02
 53e:	fc 01       	movw	r30, r24
 540:	20 85       	ldd	r18, Z+8	; 0x08
 542:	89 81       	ldd	r24, Y+1	; 0x01
 544:	9a 81       	ldd	r25, Y+2	; 0x02
 546:	fc 01       	movw	r30, r24
 548:	84 81       	ldd	r24, Z+4	; 0x04
 54a:	95 81       	ldd	r25, Z+5	; 0x05
 54c:	41 e0       	ldi	r20, 0x01	; 1
 54e:	62 2f       	mov	r22, r18
 550:	0e 94 77 00 	call	0xee	; 0xee <Write_Pin>
 554:	89 81       	ldd	r24, Y+1	; 0x01
 556:	9a 81       	ldd	r25, Y+2	; 0x02
 558:	fc 01       	movw	r30, r24
 55a:	22 85       	ldd	r18, Z+10	; 0x0a
 55c:	89 81       	ldd	r24, Y+1	; 0x01
 55e:	9a 81       	ldd	r25, Y+2	; 0x02
 560:	fc 01       	movw	r30, r24
 562:	82 81       	ldd	r24, Z+2	; 0x02
 564:	93 81       	ldd	r25, Z+3	; 0x03
 566:	40 e0       	ldi	r20, 0x00	; 0
 568:	62 2f       	mov	r22, r18
 56a:	0e 94 77 00 	call	0xee	; 0xee <Write_Pin>
 56e:	89 81       	ldd	r24, Y+1	; 0x01
 570:	9a 81       	ldd	r25, Y+2	; 0x02
 572:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <Kick_Enable_pin>
 576:	89 81       	ldd	r24, Y+1	; 0x01
 578:	9a 81       	ldd	r25, Y+2	; 0x02
 57a:	fc 01       	movw	r30, r24
 57c:	80 81       	ld	r24, Z
 57e:	91 81       	ldd	r25, Z+1	; 0x01
 580:	6f ef       	ldi	r22, 0xFF	; 255
 582:	0e 94 0a 01 	call	0x214	; 0x214 <Write_Dir_Register>
 586:	89 81       	ldd	r24, Y+1	; 0x01
 588:	9a 81       	ldd	r25, Y+2	; 0x02
 58a:	fc 01       	movw	r30, r24
 58c:	20 85       	ldd	r18, Z+8	; 0x08
 58e:	89 81       	ldd	r24, Y+1	; 0x01
 590:	9a 81       	ldd	r25, Y+2	; 0x02
 592:	fc 01       	movw	r30, r24
 594:	84 81       	ldd	r24, Z+4	; 0x04
 596:	95 81       	ldd	r25, Z+5	; 0x05
 598:	40 e0       	ldi	r20, 0x00	; 0
 59a:	62 2f       	mov	r22, r18
 59c:	0e 94 77 00 	call	0xee	; 0xee <Write_Pin>
 5a0:	00 00       	nop
 5a2:	0f 90       	pop	r0
 5a4:	0f 90       	pop	r0
 5a6:	df 91       	pop	r29
 5a8:	cf 91       	pop	r28
 5aa:	08 95       	ret

000005ac <Write_Character>:
 5ac:	cf 93       	push	r28
 5ae:	df 93       	push	r29
 5b0:	00 d0       	rcall	.+0      	; 0x5b2 <Write_Character+0x6>
 5b2:	1f 92       	push	r1
 5b4:	cd b7       	in	r28, 0x3d	; 61
 5b6:	de b7       	in	r29, 0x3e	; 62
 5b8:	9a 83       	std	Y+2, r25	; 0x02
 5ba:	89 83       	std	Y+1, r24	; 0x01
 5bc:	6b 83       	std	Y+3, r22	; 0x03
 5be:	89 81       	ldd	r24, Y+1	; 0x01
 5c0:	9a 81       	ldd	r25, Y+2	; 0x02
 5c2:	0e 94 8e 02 	call	0x51c	; 0x51c <Check_BF>
 5c6:	89 81       	ldd	r24, Y+1	; 0x01
 5c8:	9a 81       	ldd	r25, Y+2	; 0x02
 5ca:	fc 01       	movw	r30, r24
 5cc:	22 85       	ldd	r18, Z+10	; 0x0a
 5ce:	89 81       	ldd	r24, Y+1	; 0x01
 5d0:	9a 81       	ldd	r25, Y+2	; 0x02
 5d2:	fc 01       	movw	r30, r24
 5d4:	82 81       	ldd	r24, Z+2	; 0x02
 5d6:	93 81       	ldd	r25, Z+3	; 0x03
 5d8:	41 e0       	ldi	r20, 0x01	; 1
 5da:	62 2f       	mov	r22, r18
 5dc:	0e 94 77 00 	call	0xee	; 0xee <Write_Pin>
 5e0:	89 81       	ldd	r24, Y+1	; 0x01
 5e2:	9a 81       	ldd	r25, Y+2	; 0x02
 5e4:	fc 01       	movw	r30, r24
 5e6:	80 81       	ld	r24, Z
 5e8:	91 81       	ldd	r25, Z+1	; 0x01
 5ea:	6b 81       	ldd	r22, Y+3	; 0x03
 5ec:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <Write_Port_Register>
 5f0:	89 81       	ldd	r24, Y+1	; 0x01
 5f2:	9a 81       	ldd	r25, Y+2	; 0x02
 5f4:	fc 01       	movw	r30, r24
 5f6:	22 85       	ldd	r18, Z+10	; 0x0a
 5f8:	89 81       	ldd	r24, Y+1	; 0x01
 5fa:	9a 81       	ldd	r25, Y+2	; 0x02
 5fc:	fc 01       	movw	r30, r24
 5fe:	82 81       	ldd	r24, Z+2	; 0x02
 600:	93 81       	ldd	r25, Z+3	; 0x03
 602:	41 e0       	ldi	r20, 0x01	; 1
 604:	62 2f       	mov	r22, r18
 606:	0e 94 77 00 	call	0xee	; 0xee <Write_Pin>
 60a:	89 81       	ldd	r24, Y+1	; 0x01
 60c:	9a 81       	ldd	r25, Y+2	; 0x02
 60e:	fc 01       	movw	r30, r24
 610:	20 85       	ldd	r18, Z+8	; 0x08
 612:	89 81       	ldd	r24, Y+1	; 0x01
 614:	9a 81       	ldd	r25, Y+2	; 0x02
 616:	fc 01       	movw	r30, r24
 618:	84 81       	ldd	r24, Z+4	; 0x04
 61a:	95 81       	ldd	r25, Z+5	; 0x05
 61c:	40 e0       	ldi	r20, 0x00	; 0
 61e:	62 2f       	mov	r22, r18
 620:	0e 94 77 00 	call	0xee	; 0xee <Write_Pin>
 624:	89 81       	ldd	r24, Y+1	; 0x01
 626:	9a 81       	ldd	r25, Y+2	; 0x02
 628:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <Kick_Enable_pin>
 62c:	00 00       	nop
 62e:	0f 90       	pop	r0
 630:	0f 90       	pop	r0
 632:	0f 90       	pop	r0
 634:	df 91       	pop	r29
 636:	cf 91       	pop	r28
 638:	08 95       	ret

0000063a <Write_Command>:
 63a:	cf 93       	push	r28
 63c:	df 93       	push	r29
 63e:	00 d0       	rcall	.+0      	; 0x640 <Write_Command+0x6>
 640:	1f 92       	push	r1
 642:	cd b7       	in	r28, 0x3d	; 61
 644:	de b7       	in	r29, 0x3e	; 62
 646:	9a 83       	std	Y+2, r25	; 0x02
 648:	89 83       	std	Y+1, r24	; 0x01
 64a:	6b 83       	std	Y+3, r22	; 0x03
 64c:	89 81       	ldd	r24, Y+1	; 0x01
 64e:	9a 81       	ldd	r25, Y+2	; 0x02
 650:	0e 94 8e 02 	call	0x51c	; 0x51c <Check_BF>
 654:	89 81       	ldd	r24, Y+1	; 0x01
 656:	9a 81       	ldd	r25, Y+2	; 0x02
 658:	fc 01       	movw	r30, r24
 65a:	80 81       	ld	r24, Z
 65c:	91 81       	ldd	r25, Z+1	; 0x01
 65e:	6b 81       	ldd	r22, Y+3	; 0x03
 660:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <Write_Port_Register>
 664:	89 81       	ldd	r24, Y+1	; 0x01
 666:	9a 81       	ldd	r25, Y+2	; 0x02
 668:	fc 01       	movw	r30, r24
 66a:	22 85       	ldd	r18, Z+10	; 0x0a
 66c:	89 81       	ldd	r24, Y+1	; 0x01
 66e:	9a 81       	ldd	r25, Y+2	; 0x02
 670:	fc 01       	movw	r30, r24
 672:	82 81       	ldd	r24, Z+2	; 0x02
 674:	93 81       	ldd	r25, Z+3	; 0x03
 676:	40 e0       	ldi	r20, 0x00	; 0
 678:	62 2f       	mov	r22, r18
 67a:	0e 94 77 00 	call	0xee	; 0xee <Write_Pin>
 67e:	89 81       	ldd	r24, Y+1	; 0x01
 680:	9a 81       	ldd	r25, Y+2	; 0x02
 682:	fc 01       	movw	r30, r24
 684:	20 85       	ldd	r18, Z+8	; 0x08
 686:	89 81       	ldd	r24, Y+1	; 0x01
 688:	9a 81       	ldd	r25, Y+2	; 0x02
 68a:	fc 01       	movw	r30, r24
 68c:	84 81       	ldd	r24, Z+4	; 0x04
 68e:	95 81       	ldd	r25, Z+5	; 0x05
 690:	40 e0       	ldi	r20, 0x00	; 0
 692:	62 2f       	mov	r22, r18
 694:	0e 94 77 00 	call	0xee	; 0xee <Write_Pin>
 698:	89 81       	ldd	r24, Y+1	; 0x01
 69a:	9a 81       	ldd	r25, Y+2	; 0x02
 69c:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <Kick_Enable_pin>
 6a0:	00 00       	nop
 6a2:	0f 90       	pop	r0
 6a4:	0f 90       	pop	r0
 6a6:	0f 90       	pop	r0
 6a8:	df 91       	pop	r29
 6aa:	cf 91       	pop	r28
 6ac:	08 95       	ret

000006ae <clean_Lcd>:

void clean_Lcd(LCD_16_2 *lcd_instance)
{
 6ae:	cf 93       	push	r28
 6b0:	df 93       	push	r29
 6b2:	00 d0       	rcall	.+0      	; 0x6b4 <clean_Lcd+0x6>
 6b4:	cd b7       	in	r28, 0x3d	; 61
 6b6:	de b7       	in	r29, 0x3e	; 62
 6b8:	9a 83       	std	Y+2, r25	; 0x02
 6ba:	89 83       	std	Y+1, r24	; 0x01
    Write_Command(lcd_instance,CMD_LCD_Clear);
 6bc:	89 81       	ldd	r24, Y+1	; 0x01
 6be:	9a 81       	ldd	r25, Y+2	; 0x02
 6c0:	61 e0       	ldi	r22, 0x01	; 1
 6c2:	0e 94 1d 03 	call	0x63a	; 0x63a <Write_Command>
 6c6:	00 00       	nop
 6c8:	0f 90       	pop	r0
 6ca:	0f 90       	pop	r0
 6cc:	df 91       	pop	r29
 6ce:	cf 91       	pop	r28
 6d0:	08 95       	ret

000006d2 <Init_Uart>:
#include "UART_driver.h"

St_UART_driver UART_Config = {0};

uint8_t Init_Uart(St_UART_driver *_init_uart)
{
 6d2:	cf 93       	push	r28
 6d4:	df 93       	push	r29
 6d6:	00 d0       	rcall	.+0      	; 0x6d8 <Init_Uart+0x6>
 6d8:	cd b7       	in	r28, 0x3d	; 61
 6da:	de b7       	in	r29, 0x3e	; 62
 6dc:	9a 83       	std	Y+2, r25	; 0x02
 6de:	89 83       	std	Y+1, r24	; 0x01
    if((_init_uart->BuadRate >= 0) && (_init_uart <= BuadRate_Max))
 6e0:	89 81       	ldd	r24, Y+1	; 0x01
 6e2:	9a 81       	ldd	r25, Y+2	; 0x02
 6e4:	81 15       	cp	r24, r1
 6e6:	90 41       	sbci	r25, 0x10	; 16
 6e8:	c8 f5       	brcc	.+114    	; 0x75c <Init_Uart+0x8a>
    {
        UBRRH = (unsigned char)(_init_uart->BuadRate >> 8) ;
 6ea:	80 e4       	ldi	r24, 0x40	; 64
 6ec:	90 e0       	ldi	r25, 0x00	; 0
 6ee:	29 81       	ldd	r18, Y+1	; 0x01
 6f0:	3a 81       	ldd	r19, Y+2	; 0x02
 6f2:	f9 01       	movw	r30, r18
 6f4:	26 81       	ldd	r18, Z+6	; 0x06
 6f6:	37 81       	ldd	r19, Z+7	; 0x07
 6f8:	23 2f       	mov	r18, r19
 6fa:	33 27       	eor	r19, r19
 6fc:	fc 01       	movw	r30, r24
 6fe:	20 83       	st	Z, r18
        UBRRL = (unsigned char)_init_uart->BuadRate;
 700:	89 e2       	ldi	r24, 0x29	; 41
 702:	90 e0       	ldi	r25, 0x00	; 0
 704:	29 81       	ldd	r18, Y+1	; 0x01
 706:	3a 81       	ldd	r19, Y+2	; 0x02
 708:	f9 01       	movw	r30, r18
 70a:	26 81       	ldd	r18, Z+6	; 0x06
 70c:	37 81       	ldd	r19, Z+7	; 0x07
 70e:	fc 01       	movw	r30, r24
 710:	20 83       	st	Z, r18
    }else
    {
        return 0;
    }
    UCSRB_R->UCSRB_field = ((_init_uart->Communcation_Mode) << TXEN | ((_init_uart->Char_Size & 0x04) << UCSZ2));
 712:	8a e2       	ldi	r24, 0x2A	; 42
 714:	90 e0       	ldi	r25, 0x00	; 0
 716:	29 81       	ldd	r18, Y+1	; 0x01
 718:	3a 81       	ldd	r19, Y+2	; 0x02
 71a:	f9 01       	movw	r30, r18
 71c:	25 81       	ldd	r18, Z+5	; 0x05
 71e:	22 2f       	mov	r18, r18
 720:	30 e0       	ldi	r19, 0x00	; 0
 722:	22 0f       	add	r18, r18
 724:	33 1f       	adc	r19, r19
 726:	22 0f       	add	r18, r18
 728:	33 1f       	adc	r19, r19
 72a:	22 0f       	add	r18, r18
 72c:	33 1f       	adc	r19, r19
 72e:	42 2f       	mov	r20, r18
 730:	29 81       	ldd	r18, Y+1	; 0x01
 732:	3a 81       	ldd	r19, Y+2	; 0x02
 734:	f9 01       	movw	r30, r18
 736:	22 81       	ldd	r18, Z+2	; 0x02
 738:	22 2f       	mov	r18, r18
 73a:	30 e0       	ldi	r19, 0x00	; 0
 73c:	24 70       	andi	r18, 0x04	; 4
 73e:	33 27       	eor	r19, r19
 740:	22 0f       	add	r18, r18
 742:	33 1f       	adc	r19, r19
 744:	22 0f       	add	r18, r18
 746:	33 1f       	adc	r19, r19
 748:	24 2b       	or	r18, r20
 74a:	fc 01       	movw	r30, r24
 74c:	20 83       	st	Z, r18
	UCSRC = 0b10000000;
 74e:	80 e4       	ldi	r24, 0x40	; 64
 750:	90 e0       	ldi	r25, 0x00	; 0
 752:	20 e8       	ldi	r18, 0x80	; 128
 754:	fc 01       	movw	r30, r24
 756:	20 83       	st	Z, r18
	//uint8_t x = ((1 << URSEL) | (_init_uart->Mode << UMSEL) | (_init_uart->Parity << UPM0) | (_init_uart->Stop << USBS) | ((_init_uart->Char_Size & 0x03) << UCSZ0) | (_init_uart->Clk_Polarity << UCPOL));
    return 1;
 758:	81 e0       	ldi	r24, 0x01	; 1
 75a:	01 c0       	rjmp	.+2      	; 0x75e <Init_Uart+0x8c>
    {
        UBRRH = (unsigned char)(_init_uart->BuadRate >> 8) ;
        UBRRL = (unsigned char)_init_uart->BuadRate;
    }else
    {
        return 0;
 75c:	80 e0       	ldi	r24, 0x00	; 0
    }
    UCSRB_R->UCSRB_field = ((_init_uart->Communcation_Mode) << TXEN | ((_init_uart->Char_Size & 0x04) << UCSZ2));
	UCSRC = 0b10000000;
	//uint8_t x = ((1 << URSEL) | (_init_uart->Mode << UMSEL) | (_init_uart->Parity << UPM0) | (_init_uart->Stop << USBS) | ((_init_uart->Char_Size & 0x03) << UCSZ0) | (_init_uart->Clk_Polarity << UCPOL));
    return 1;
 75e:	0f 90       	pop	r0
 760:	0f 90       	pop	r0
 762:	df 91       	pop	r29
 764:	cf 91       	pop	r28
 766:	08 95       	ret

00000768 <main>:

extern void program(void);
extern void init(void);

int main(void)
{
 768:	cf 93       	push	r28
 76a:	df 93       	push	r29
 76c:	cd b7       	in	r28, 0x3d	; 61
 76e:	de b7       	in	r29, 0x3e	; 62
 770:	2e 97       	sbiw	r28, 0x0e	; 14
 772:	0f b6       	in	r0, 0x3f	; 63
 774:	f8 94       	cli
 776:	de bf       	out	0x3e, r29	; 62
 778:	0f be       	out	0x3f, r0	; 63
 77a:	cd bf       	out	0x3d, r28	; 61
	
    /* Replace with your application code */
	init();
 77c:	0e 94 49 00 	call	0x92	; 0x92 <init>
	while (1)
	{
		program();
 780:	0e 94 6b 00 	call	0xd6	; 0xd6 <program>
 784:	80 e0       	ldi	r24, 0x00	; 0
 786:	90 e0       	ldi	r25, 0x00	; 0
 788:	a6 e1       	ldi	r26, 0x16	; 22
 78a:	b3 e4       	ldi	r27, 0x43	; 67
 78c:	89 83       	std	Y+1, r24	; 0x01
 78e:	9a 83       	std	Y+2, r25	; 0x02
 790:	ab 83       	std	Y+3, r26	; 0x03
 792:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 794:	20 e0       	ldi	r18, 0x00	; 0
 796:	30 e0       	ldi	r19, 0x00	; 0
 798:	4a e7       	ldi	r20, 0x7A	; 122
 79a:	55 e4       	ldi	r21, 0x45	; 69
 79c:	69 81       	ldd	r22, Y+1	; 0x01
 79e:	7a 81       	ldd	r23, Y+2	; 0x02
 7a0:	8b 81       	ldd	r24, Y+3	; 0x03
 7a2:	9c 81       	ldd	r25, Y+4	; 0x04
 7a4:	0e 94 bb 04 	call	0x976	; 0x976 <__mulsf3>
 7a8:	dc 01       	movw	r26, r24
 7aa:	cb 01       	movw	r24, r22
 7ac:	8d 83       	std	Y+5, r24	; 0x05
 7ae:	9e 83       	std	Y+6, r25	; 0x06
 7b0:	af 83       	std	Y+7, r26	; 0x07
 7b2:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
 7b4:	20 e0       	ldi	r18, 0x00	; 0
 7b6:	30 e0       	ldi	r19, 0x00	; 0
 7b8:	40 e8       	ldi	r20, 0x80	; 128
 7ba:	5f e3       	ldi	r21, 0x3F	; 63
 7bc:	6d 81       	ldd	r22, Y+5	; 0x05
 7be:	7e 81       	ldd	r23, Y+6	; 0x06
 7c0:	8f 81       	ldd	r24, Y+7	; 0x07
 7c2:	98 85       	ldd	r25, Y+8	; 0x08
 7c4:	0e 94 35 04 	call	0x86a	; 0x86a <__cmpsf2>
 7c8:	88 23       	and	r24, r24
 7ca:	2c f4       	brge	.+10     	; 0x7d6 <main+0x6e>
		__ticks = 1;
 7cc:	81 e0       	ldi	r24, 0x01	; 1
 7ce:	90 e0       	ldi	r25, 0x00	; 0
 7d0:	9a 87       	std	Y+10, r25	; 0x0a
 7d2:	89 87       	std	Y+9, r24	; 0x09
 7d4:	3f c0       	rjmp	.+126    	; 0x854 <__DATA_REGION_LENGTH__+0x54>
	else if (__tmp > 65535)
 7d6:	20 e0       	ldi	r18, 0x00	; 0
 7d8:	3f ef       	ldi	r19, 0xFF	; 255
 7da:	4f e7       	ldi	r20, 0x7F	; 127
 7dc:	57 e4       	ldi	r21, 0x47	; 71
 7de:	6d 81       	ldd	r22, Y+5	; 0x05
 7e0:	7e 81       	ldd	r23, Y+6	; 0x06
 7e2:	8f 81       	ldd	r24, Y+7	; 0x07
 7e4:	98 85       	ldd	r25, Y+8	; 0x08
 7e6:	0e 94 b6 04 	call	0x96c	; 0x96c <__gesf2>
 7ea:	18 16       	cp	r1, r24
 7ec:	4c f5       	brge	.+82     	; 0x840 <__DATA_REGION_LENGTH__+0x40>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 7ee:	20 e0       	ldi	r18, 0x00	; 0
 7f0:	30 e0       	ldi	r19, 0x00	; 0
 7f2:	40 e2       	ldi	r20, 0x20	; 32
 7f4:	51 e4       	ldi	r21, 0x41	; 65
 7f6:	69 81       	ldd	r22, Y+1	; 0x01
 7f8:	7a 81       	ldd	r23, Y+2	; 0x02
 7fa:	8b 81       	ldd	r24, Y+3	; 0x03
 7fc:	9c 81       	ldd	r25, Y+4	; 0x04
 7fe:	0e 94 bb 04 	call	0x976	; 0x976 <__mulsf3>
 802:	dc 01       	movw	r26, r24
 804:	cb 01       	movw	r24, r22
 806:	bc 01       	movw	r22, r24
 808:	cd 01       	movw	r24, r26
 80a:	0e 94 3a 04 	call	0x874	; 0x874 <__fixunssfsi>
 80e:	dc 01       	movw	r26, r24
 810:	cb 01       	movw	r24, r22
 812:	9a 87       	std	Y+10, r25	; 0x0a
 814:	89 87       	std	Y+9, r24	; 0x09
 816:	0f c0       	rjmp	.+30     	; 0x836 <__DATA_REGION_LENGTH__+0x36>
 818:	80 e9       	ldi	r24, 0x90	; 144
 81a:	91 e0       	ldi	r25, 0x01	; 1
 81c:	9c 87       	std	Y+12, r25	; 0x0c
 81e:	8b 87       	std	Y+11, r24	; 0x0b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 820:	8b 85       	ldd	r24, Y+11	; 0x0b
 822:	9c 85       	ldd	r25, Y+12	; 0x0c
 824:	01 97       	sbiw	r24, 0x01	; 1
 826:	f1 f7       	brne	.-4      	; 0x824 <__DATA_REGION_LENGTH__+0x24>
 828:	9c 87       	std	Y+12, r25	; 0x0c
 82a:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 82c:	89 85       	ldd	r24, Y+9	; 0x09
 82e:	9a 85       	ldd	r25, Y+10	; 0x0a
 830:	01 97       	sbiw	r24, 0x01	; 1
 832:	9a 87       	std	Y+10, r25	; 0x0a
 834:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 836:	89 85       	ldd	r24, Y+9	; 0x09
 838:	9a 85       	ldd	r25, Y+10	; 0x0a
 83a:	89 2b       	or	r24, r25
 83c:	69 f7       	brne	.-38     	; 0x818 <__DATA_REGION_LENGTH__+0x18>
 83e:	14 c0       	rjmp	.+40     	; 0x868 <__stack+0x9>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 840:	6d 81       	ldd	r22, Y+5	; 0x05
 842:	7e 81       	ldd	r23, Y+6	; 0x06
 844:	8f 81       	ldd	r24, Y+7	; 0x07
 846:	98 85       	ldd	r25, Y+8	; 0x08
 848:	0e 94 3a 04 	call	0x874	; 0x874 <__fixunssfsi>
 84c:	dc 01       	movw	r26, r24
 84e:	cb 01       	movw	r24, r22
 850:	9a 87       	std	Y+10, r25	; 0x0a
 852:	89 87       	std	Y+9, r24	; 0x09
 854:	89 85       	ldd	r24, Y+9	; 0x09
 856:	9a 85       	ldd	r25, Y+10	; 0x0a
 858:	9e 87       	std	Y+14, r25	; 0x0e
 85a:	8d 87       	std	Y+13, r24	; 0x0d
 85c:	8d 85       	ldd	r24, Y+13	; 0x0d
 85e:	9e 85       	ldd	r25, Y+14	; 0x0e
 860:	01 97       	sbiw	r24, 0x01	; 1
 862:	f1 f7       	brne	.-4      	; 0x860 <__stack+0x1>
 864:	9e 87       	std	Y+14, r25	; 0x0e
 866:	8d 87       	std	Y+13, r24	; 0x0d
		_delay_ms(150);
	}
 868:	8b cf       	rjmp	.-234    	; 0x780 <main+0x18>

0000086a <__cmpsf2>:
 86a:	0e 94 69 04 	call	0x8d2	; 0x8d2 <__fp_cmp>
 86e:	08 f4       	brcc	.+2      	; 0x872 <__cmpsf2+0x8>
 870:	81 e0       	ldi	r24, 0x01	; 1
 872:	08 95       	ret

00000874 <__fixunssfsi>:
 874:	0e 94 95 04 	call	0x92a	; 0x92a <__fp_splitA>
 878:	88 f0       	brcs	.+34     	; 0x89c <__fixunssfsi+0x28>
 87a:	9f 57       	subi	r25, 0x7F	; 127
 87c:	98 f0       	brcs	.+38     	; 0x8a4 <__fixunssfsi+0x30>
 87e:	b9 2f       	mov	r27, r25
 880:	99 27       	eor	r25, r25
 882:	b7 51       	subi	r27, 0x17	; 23
 884:	b0 f0       	brcs	.+44     	; 0x8b2 <__fixunssfsi+0x3e>
 886:	e1 f0       	breq	.+56     	; 0x8c0 <__fixunssfsi+0x4c>
 888:	66 0f       	add	r22, r22
 88a:	77 1f       	adc	r23, r23
 88c:	88 1f       	adc	r24, r24
 88e:	99 1f       	adc	r25, r25
 890:	1a f0       	brmi	.+6      	; 0x898 <__fixunssfsi+0x24>
 892:	ba 95       	dec	r27
 894:	c9 f7       	brne	.-14     	; 0x888 <__fixunssfsi+0x14>
 896:	14 c0       	rjmp	.+40     	; 0x8c0 <__fixunssfsi+0x4c>
 898:	b1 30       	cpi	r27, 0x01	; 1
 89a:	91 f0       	breq	.+36     	; 0x8c0 <__fixunssfsi+0x4c>
 89c:	0e 94 af 04 	call	0x95e	; 0x95e <__fp_zero>
 8a0:	b1 e0       	ldi	r27, 0x01	; 1
 8a2:	08 95       	ret
 8a4:	0c 94 af 04 	jmp	0x95e	; 0x95e <__fp_zero>
 8a8:	67 2f       	mov	r22, r23
 8aa:	78 2f       	mov	r23, r24
 8ac:	88 27       	eor	r24, r24
 8ae:	b8 5f       	subi	r27, 0xF8	; 248
 8b0:	39 f0       	breq	.+14     	; 0x8c0 <__fixunssfsi+0x4c>
 8b2:	b9 3f       	cpi	r27, 0xF9	; 249
 8b4:	cc f3       	brlt	.-14     	; 0x8a8 <__fixunssfsi+0x34>
 8b6:	86 95       	lsr	r24
 8b8:	77 95       	ror	r23
 8ba:	67 95       	ror	r22
 8bc:	b3 95       	inc	r27
 8be:	d9 f7       	brne	.-10     	; 0x8b6 <__fixunssfsi+0x42>
 8c0:	3e f4       	brtc	.+14     	; 0x8d0 <__fixunssfsi+0x5c>
 8c2:	90 95       	com	r25
 8c4:	80 95       	com	r24
 8c6:	70 95       	com	r23
 8c8:	61 95       	neg	r22
 8ca:	7f 4f       	sbci	r23, 0xFF	; 255
 8cc:	8f 4f       	sbci	r24, 0xFF	; 255
 8ce:	9f 4f       	sbci	r25, 0xFF	; 255
 8d0:	08 95       	ret

000008d2 <__fp_cmp>:
 8d2:	99 0f       	add	r25, r25
 8d4:	00 08       	sbc	r0, r0
 8d6:	55 0f       	add	r21, r21
 8d8:	aa 0b       	sbc	r26, r26
 8da:	e0 e8       	ldi	r30, 0x80	; 128
 8dc:	fe ef       	ldi	r31, 0xFE	; 254
 8de:	16 16       	cp	r1, r22
 8e0:	17 06       	cpc	r1, r23
 8e2:	e8 07       	cpc	r30, r24
 8e4:	f9 07       	cpc	r31, r25
 8e6:	c0 f0       	brcs	.+48     	; 0x918 <__fp_cmp+0x46>
 8e8:	12 16       	cp	r1, r18
 8ea:	13 06       	cpc	r1, r19
 8ec:	e4 07       	cpc	r30, r20
 8ee:	f5 07       	cpc	r31, r21
 8f0:	98 f0       	brcs	.+38     	; 0x918 <__fp_cmp+0x46>
 8f2:	62 1b       	sub	r22, r18
 8f4:	73 0b       	sbc	r23, r19
 8f6:	84 0b       	sbc	r24, r20
 8f8:	95 0b       	sbc	r25, r21
 8fa:	39 f4       	brne	.+14     	; 0x90a <__fp_cmp+0x38>
 8fc:	0a 26       	eor	r0, r26
 8fe:	61 f0       	breq	.+24     	; 0x918 <__fp_cmp+0x46>
 900:	23 2b       	or	r18, r19
 902:	24 2b       	or	r18, r20
 904:	25 2b       	or	r18, r21
 906:	21 f4       	brne	.+8      	; 0x910 <__fp_cmp+0x3e>
 908:	08 95       	ret
 90a:	0a 26       	eor	r0, r26
 90c:	09 f4       	brne	.+2      	; 0x910 <__fp_cmp+0x3e>
 90e:	a1 40       	sbci	r26, 0x01	; 1
 910:	a6 95       	lsr	r26
 912:	8f ef       	ldi	r24, 0xFF	; 255
 914:	81 1d       	adc	r24, r1
 916:	81 1d       	adc	r24, r1
 918:	08 95       	ret

0000091a <__fp_split3>:
 91a:	57 fd       	sbrc	r21, 7
 91c:	90 58       	subi	r25, 0x80	; 128
 91e:	44 0f       	add	r20, r20
 920:	55 1f       	adc	r21, r21
 922:	59 f0       	breq	.+22     	; 0x93a <__fp_splitA+0x10>
 924:	5f 3f       	cpi	r21, 0xFF	; 255
 926:	71 f0       	breq	.+28     	; 0x944 <__fp_splitA+0x1a>
 928:	47 95       	ror	r20

0000092a <__fp_splitA>:
 92a:	88 0f       	add	r24, r24
 92c:	97 fb       	bst	r25, 7
 92e:	99 1f       	adc	r25, r25
 930:	61 f0       	breq	.+24     	; 0x94a <__fp_splitA+0x20>
 932:	9f 3f       	cpi	r25, 0xFF	; 255
 934:	79 f0       	breq	.+30     	; 0x954 <__fp_splitA+0x2a>
 936:	87 95       	ror	r24
 938:	08 95       	ret
 93a:	12 16       	cp	r1, r18
 93c:	13 06       	cpc	r1, r19
 93e:	14 06       	cpc	r1, r20
 940:	55 1f       	adc	r21, r21
 942:	f2 cf       	rjmp	.-28     	; 0x928 <__fp_split3+0xe>
 944:	46 95       	lsr	r20
 946:	f1 df       	rcall	.-30     	; 0x92a <__fp_splitA>
 948:	08 c0       	rjmp	.+16     	; 0x95a <__fp_splitA+0x30>
 94a:	16 16       	cp	r1, r22
 94c:	17 06       	cpc	r1, r23
 94e:	18 06       	cpc	r1, r24
 950:	99 1f       	adc	r25, r25
 952:	f1 cf       	rjmp	.-30     	; 0x936 <__fp_splitA+0xc>
 954:	86 95       	lsr	r24
 956:	71 05       	cpc	r23, r1
 958:	61 05       	cpc	r22, r1
 95a:	08 94       	sec
 95c:	08 95       	ret

0000095e <__fp_zero>:
 95e:	e8 94       	clt

00000960 <__fp_szero>:
 960:	bb 27       	eor	r27, r27
 962:	66 27       	eor	r22, r22
 964:	77 27       	eor	r23, r23
 966:	cb 01       	movw	r24, r22
 968:	97 f9       	bld	r25, 7
 96a:	08 95       	ret

0000096c <__gesf2>:
 96c:	0e 94 69 04 	call	0x8d2	; 0x8d2 <__fp_cmp>
 970:	08 f4       	brcc	.+2      	; 0x974 <__gesf2+0x8>
 972:	8f ef       	ldi	r24, 0xFF	; 255
 974:	08 95       	ret

00000976 <__mulsf3>:
 976:	0e 94 ce 04 	call	0x99c	; 0x99c <__mulsf3x>
 97a:	0c 94 3f 05 	jmp	0xa7e	; 0xa7e <__fp_round>
 97e:	0e 94 31 05 	call	0xa62	; 0xa62 <__fp_pscA>
 982:	38 f0       	brcs	.+14     	; 0x992 <__mulsf3+0x1c>
 984:	0e 94 38 05 	call	0xa70	; 0xa70 <__fp_pscB>
 988:	20 f0       	brcs	.+8      	; 0x992 <__mulsf3+0x1c>
 98a:	95 23       	and	r25, r21
 98c:	11 f0       	breq	.+4      	; 0x992 <__mulsf3+0x1c>
 98e:	0c 94 28 05 	jmp	0xa50	; 0xa50 <__fp_inf>
 992:	0c 94 2e 05 	jmp	0xa5c	; 0xa5c <__fp_nan>
 996:	11 24       	eor	r1, r1
 998:	0c 94 b0 04 	jmp	0x960	; 0x960 <__fp_szero>

0000099c <__mulsf3x>:
 99c:	0e 94 8d 04 	call	0x91a	; 0x91a <__fp_split3>
 9a0:	70 f3       	brcs	.-36     	; 0x97e <__mulsf3+0x8>

000009a2 <__mulsf3_pse>:
 9a2:	95 9f       	mul	r25, r21
 9a4:	c1 f3       	breq	.-16     	; 0x996 <__mulsf3+0x20>
 9a6:	95 0f       	add	r25, r21
 9a8:	50 e0       	ldi	r21, 0x00	; 0
 9aa:	55 1f       	adc	r21, r21
 9ac:	62 9f       	mul	r22, r18
 9ae:	f0 01       	movw	r30, r0
 9b0:	72 9f       	mul	r23, r18
 9b2:	bb 27       	eor	r27, r27
 9b4:	f0 0d       	add	r31, r0
 9b6:	b1 1d       	adc	r27, r1
 9b8:	63 9f       	mul	r22, r19
 9ba:	aa 27       	eor	r26, r26
 9bc:	f0 0d       	add	r31, r0
 9be:	b1 1d       	adc	r27, r1
 9c0:	aa 1f       	adc	r26, r26
 9c2:	64 9f       	mul	r22, r20
 9c4:	66 27       	eor	r22, r22
 9c6:	b0 0d       	add	r27, r0
 9c8:	a1 1d       	adc	r26, r1
 9ca:	66 1f       	adc	r22, r22
 9cc:	82 9f       	mul	r24, r18
 9ce:	22 27       	eor	r18, r18
 9d0:	b0 0d       	add	r27, r0
 9d2:	a1 1d       	adc	r26, r1
 9d4:	62 1f       	adc	r22, r18
 9d6:	73 9f       	mul	r23, r19
 9d8:	b0 0d       	add	r27, r0
 9da:	a1 1d       	adc	r26, r1
 9dc:	62 1f       	adc	r22, r18
 9de:	83 9f       	mul	r24, r19
 9e0:	a0 0d       	add	r26, r0
 9e2:	61 1d       	adc	r22, r1
 9e4:	22 1f       	adc	r18, r18
 9e6:	74 9f       	mul	r23, r20
 9e8:	33 27       	eor	r19, r19
 9ea:	a0 0d       	add	r26, r0
 9ec:	61 1d       	adc	r22, r1
 9ee:	23 1f       	adc	r18, r19
 9f0:	84 9f       	mul	r24, r20
 9f2:	60 0d       	add	r22, r0
 9f4:	21 1d       	adc	r18, r1
 9f6:	82 2f       	mov	r24, r18
 9f8:	76 2f       	mov	r23, r22
 9fa:	6a 2f       	mov	r22, r26
 9fc:	11 24       	eor	r1, r1
 9fe:	9f 57       	subi	r25, 0x7F	; 127
 a00:	50 40       	sbci	r21, 0x00	; 0
 a02:	9a f0       	brmi	.+38     	; 0xa2a <__mulsf3_pse+0x88>
 a04:	f1 f0       	breq	.+60     	; 0xa42 <__mulsf3_pse+0xa0>
 a06:	88 23       	and	r24, r24
 a08:	4a f0       	brmi	.+18     	; 0xa1c <__mulsf3_pse+0x7a>
 a0a:	ee 0f       	add	r30, r30
 a0c:	ff 1f       	adc	r31, r31
 a0e:	bb 1f       	adc	r27, r27
 a10:	66 1f       	adc	r22, r22
 a12:	77 1f       	adc	r23, r23
 a14:	88 1f       	adc	r24, r24
 a16:	91 50       	subi	r25, 0x01	; 1
 a18:	50 40       	sbci	r21, 0x00	; 0
 a1a:	a9 f7       	brne	.-22     	; 0xa06 <__mulsf3_pse+0x64>
 a1c:	9e 3f       	cpi	r25, 0xFE	; 254
 a1e:	51 05       	cpc	r21, r1
 a20:	80 f0       	brcs	.+32     	; 0xa42 <__mulsf3_pse+0xa0>
 a22:	0c 94 28 05 	jmp	0xa50	; 0xa50 <__fp_inf>
 a26:	0c 94 b0 04 	jmp	0x960	; 0x960 <__fp_szero>
 a2a:	5f 3f       	cpi	r21, 0xFF	; 255
 a2c:	e4 f3       	brlt	.-8      	; 0xa26 <__mulsf3_pse+0x84>
 a2e:	98 3e       	cpi	r25, 0xE8	; 232
 a30:	d4 f3       	brlt	.-12     	; 0xa26 <__mulsf3_pse+0x84>
 a32:	86 95       	lsr	r24
 a34:	77 95       	ror	r23
 a36:	67 95       	ror	r22
 a38:	b7 95       	ror	r27
 a3a:	f7 95       	ror	r31
 a3c:	e7 95       	ror	r30
 a3e:	9f 5f       	subi	r25, 0xFF	; 255
 a40:	c1 f7       	brne	.-16     	; 0xa32 <__mulsf3_pse+0x90>
 a42:	fe 2b       	or	r31, r30
 a44:	88 0f       	add	r24, r24
 a46:	91 1d       	adc	r25, r1
 a48:	96 95       	lsr	r25
 a4a:	87 95       	ror	r24
 a4c:	97 f9       	bld	r25, 7
 a4e:	08 95       	ret

00000a50 <__fp_inf>:
 a50:	97 f9       	bld	r25, 7
 a52:	9f 67       	ori	r25, 0x7F	; 127
 a54:	80 e8       	ldi	r24, 0x80	; 128
 a56:	70 e0       	ldi	r23, 0x00	; 0
 a58:	60 e0       	ldi	r22, 0x00	; 0
 a5a:	08 95       	ret

00000a5c <__fp_nan>:
 a5c:	9f ef       	ldi	r25, 0xFF	; 255
 a5e:	80 ec       	ldi	r24, 0xC0	; 192
 a60:	08 95       	ret

00000a62 <__fp_pscA>:
 a62:	00 24       	eor	r0, r0
 a64:	0a 94       	dec	r0
 a66:	16 16       	cp	r1, r22
 a68:	17 06       	cpc	r1, r23
 a6a:	18 06       	cpc	r1, r24
 a6c:	09 06       	cpc	r0, r25
 a6e:	08 95       	ret

00000a70 <__fp_pscB>:
 a70:	00 24       	eor	r0, r0
 a72:	0a 94       	dec	r0
 a74:	12 16       	cp	r1, r18
 a76:	13 06       	cpc	r1, r19
 a78:	14 06       	cpc	r1, r20
 a7a:	05 06       	cpc	r0, r21
 a7c:	08 95       	ret

00000a7e <__fp_round>:
 a7e:	09 2e       	mov	r0, r25
 a80:	03 94       	inc	r0
 a82:	00 0c       	add	r0, r0
 a84:	11 f4       	brne	.+4      	; 0xa8a <__fp_round+0xc>
 a86:	88 23       	and	r24, r24
 a88:	52 f0       	brmi	.+20     	; 0xa9e <__fp_round+0x20>
 a8a:	bb 0f       	add	r27, r27
 a8c:	40 f4       	brcc	.+16     	; 0xa9e <__fp_round+0x20>
 a8e:	bf 2b       	or	r27, r31
 a90:	11 f4       	brne	.+4      	; 0xa96 <__fp_round+0x18>
 a92:	60 ff       	sbrs	r22, 0
 a94:	04 c0       	rjmp	.+8      	; 0xa9e <__fp_round+0x20>
 a96:	6f 5f       	subi	r22, 0xFF	; 255
 a98:	7f 4f       	sbci	r23, 0xFF	; 255
 a9a:	8f 4f       	sbci	r24, 0xFF	; 255
 a9c:	9f 4f       	sbci	r25, 0xFF	; 255
 a9e:	08 95       	ret

00000aa0 <_exit>:
 aa0:	f8 94       	cli

00000aa2 <__stop_program>:
 aa2:	ff cf       	rjmp	.-2      	; 0xaa2 <__stop_program>
