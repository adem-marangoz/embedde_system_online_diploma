
Atmega32_test1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000708  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000012  00800060  00000708  0000079c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000009  00800072  00800072  000007ae  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000007ae  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000007e0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000078  00000000  00000000  0000081c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000101f  00000000  00000000  00000894  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007de  00000000  00000000  000018b3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000575  00000000  00000000  00002091  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000fc  00000000  00000000  00002608  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000752  00000000  00000000  00002704  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000194  00000000  00000000  00002e56  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  00002fea  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e0       	ldi	r30, 0x08	; 8
  68:	f7 e0       	ldi	r31, 0x07	; 7
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 37       	cpi	r26, 0x72	; 114
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a2 e7       	ldi	r26, 0x72	; 114
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ab 37       	cpi	r26, 0x7B	; 123
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <main>
  8a:	0c 94 82 03 	jmp	0x704	; 0x704 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <init>:

LCD_16_2 Lcd_config = {0};
St_Key_pad key_pad = {0};

void init(void)
{
  92:	cf 93       	push	r28
  94:	df 93       	push	r29
  96:	cd b7       	in	r28, 0x3d	; 61
  98:	de b7       	in	r29, 0x3e	; 62
	// key_pad.input.Pins = PIN_1|PIN_2|PIN_3|PIN_4;
	// key_pad.output.Port = PORT_C;
	// key_pad.output.Pins =PIN_1|PIN_2|PIN_3|PIN_4;
	// Key_pad_init(&key_pad);

	UART_Config.BuadRate = 9600;
  9a:	80 e8       	ldi	r24, 0x80	; 128
  9c:	95 e2       	ldi	r25, 0x25	; 37
  9e:	90 93 7a 00 	sts	0x007A, r25	; 0x80007a <__data_end+0x8>
  a2:	80 93 79 00 	sts	0x0079, r24	; 0x800079 <__data_end+0x7>
	UART_Config.Char_Size = Eight_bit;
  a6:	83 e0       	ldi	r24, 0x03	; 3
  a8:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__data_end+0x2>
	UART_Config.Clk_Polarity = Rising_Edge;
  ac:	10 92 75 00 	sts	0x0075, r1	; 0x800075 <__data_end+0x3>
	UART_Config.Communcation_Mode = Full_Duplex;
  b0:	83 e0       	ldi	r24, 0x03	; 3
  b2:	80 93 77 00 	sts	0x0077, r24	; 0x800077 <__data_end+0x5>
	UART_Config.Parity = Disable;
  b6:	10 92 76 00 	sts	0x0076, r1	; 0x800076 <__data_end+0x4>
	UART_Config.Mode = Asynchronous;
  ba:	10 92 72 00 	sts	0x0072, r1	; 0x800072 <__data_end>
	UART_Config.Stop = One_bit;
  be:	10 92 73 00 	sts	0x0073, r1	; 0x800073 <__data_end+0x1>
	UART_Config.Speed = Normal_Speed;
  c2:	80 e1       	ldi	r24, 0x10	; 16
  c4:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <__data_end+0x6>
	Init_Uart(&UART_Config);
  c8:	82 e7       	ldi	r24, 0x72	; 114
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	0e 94 19 01 	call	0x232	; 0x232 <Init_Uart>
}
  d0:	00 00       	nop
  d2:	df 91       	pop	r29
  d4:	cf 91       	pop	r28
  d6:	08 95       	ret

000000d8 <program>:

void program(void)
{ 
  d8:	cf 93       	push	r28
  da:	df 93       	push	r29
  dc:	cd b7       	in	r28, 0x3d	; 61
  de:	de b7       	in	r29, 0x3e	; 62
  e0:	a0 97       	sbiw	r28, 0x20	; 32
  e2:	0f b6       	in	r0, 0x3f	; 63
  e4:	f8 94       	cli
  e6:	de bf       	out	0x3e, r29	; 62
  e8:	0f be       	out	0x3f, r0	; 63
  ea:	cd bf       	out	0x3d, r28	; 61
	//Check_Prass_Button(&key_pad);
	char str[] = "You can do it \n\r";
  ec:	81 e1       	ldi	r24, 0x11	; 17
  ee:	e0 e6       	ldi	r30, 0x60	; 96
  f0:	f0 e0       	ldi	r31, 0x00	; 0
  f2:	de 01       	movw	r26, r28
  f4:	50 96       	adiw	r26, 0x10	; 16
  f6:	01 90       	ld	r0, Z+
  f8:	0d 92       	st	X+, r0
  fa:	8a 95       	dec	r24
  fc:	e1 f7       	brne	.-8      	; 0xf6 <program+0x1e>
	for(unsigned char i = 0; str[i] != '\0';i++)
  fe:	19 82       	std	Y+1, r1	; 0x01
 100:	81 c0       	rjmp	.+258    	; 0x204 <program+0x12c>
	{
		
		Uart_send(str[i]);
 102:	89 81       	ldd	r24, Y+1	; 0x01
 104:	88 2f       	mov	r24, r24
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	9e 01       	movw	r18, r28
 10a:	20 5f       	subi	r18, 0xF0	; 240
 10c:	3f 4f       	sbci	r19, 0xFF	; 255
 10e:	82 0f       	add	r24, r18
 110:	93 1f       	adc	r25, r19
 112:	fc 01       	movw	r30, r24
 114:	80 81       	ld	r24, Z
 116:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <Uart_send>
 11a:	80 e0       	ldi	r24, 0x00	; 0
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	aa e7       	ldi	r26, 0x7A	; 122
 120:	b4 e4       	ldi	r27, 0x44	; 68
 122:	8a 83       	std	Y+2, r24	; 0x02
 124:	9b 83       	std	Y+3, r25	; 0x03
 126:	ac 83       	std	Y+4, r26	; 0x04
 128:	bd 83       	std	Y+5, r27	; 0x05

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 12a:	20 e0       	ldi	r18, 0x00	; 0
 12c:	30 e0       	ldi	r19, 0x00	; 0
 12e:	4a e7       	ldi	r20, 0x7A	; 122
 130:	55 e4       	ldi	r21, 0x45	; 69
 132:	6a 81       	ldd	r22, Y+2	; 0x02
 134:	7b 81       	ldd	r23, Y+3	; 0x03
 136:	8c 81       	ldd	r24, Y+4	; 0x04
 138:	9d 81       	ldd	r25, Y+5	; 0x05
 13a:	0e 94 82 02 	call	0x504	; 0x504 <__mulsf3>
 13e:	dc 01       	movw	r26, r24
 140:	cb 01       	movw	r24, r22
 142:	8e 83       	std	Y+6, r24	; 0x06
 144:	9f 83       	std	Y+7, r25	; 0x07
 146:	a8 87       	std	Y+8, r26	; 0x08
 148:	b9 87       	std	Y+9, r27	; 0x09
	if (__tmp < 1.0)
 14a:	20 e0       	ldi	r18, 0x00	; 0
 14c:	30 e0       	ldi	r19, 0x00	; 0
 14e:	40 e8       	ldi	r20, 0x80	; 128
 150:	5f e3       	ldi	r21, 0x3F	; 63
 152:	6e 81       	ldd	r22, Y+6	; 0x06
 154:	7f 81       	ldd	r23, Y+7	; 0x07
 156:	88 85       	ldd	r24, Y+8	; 0x08
 158:	99 85       	ldd	r25, Y+9	; 0x09
 15a:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <__cmpsf2>
 15e:	88 23       	and	r24, r24
 160:	2c f4       	brge	.+10     	; 0x16c <program+0x94>
		__ticks = 1;
 162:	81 e0       	ldi	r24, 0x01	; 1
 164:	90 e0       	ldi	r25, 0x00	; 0
 166:	9b 87       	std	Y+11, r25	; 0x0b
 168:	8a 87       	std	Y+10, r24	; 0x0a
 16a:	3f c0       	rjmp	.+126    	; 0x1ea <program+0x112>
	else if (__tmp > 65535)
 16c:	20 e0       	ldi	r18, 0x00	; 0
 16e:	3f ef       	ldi	r19, 0xFF	; 255
 170:	4f e7       	ldi	r20, 0x7F	; 127
 172:	57 e4       	ldi	r21, 0x47	; 71
 174:	6e 81       	ldd	r22, Y+6	; 0x06
 176:	7f 81       	ldd	r23, Y+7	; 0x07
 178:	88 85       	ldd	r24, Y+8	; 0x08
 17a:	99 85       	ldd	r25, Y+9	; 0x09
 17c:	0e 94 7d 02 	call	0x4fa	; 0x4fa <__gesf2>
 180:	18 16       	cp	r1, r24
 182:	4c f5       	brge	.+82     	; 0x1d6 <program+0xfe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 184:	20 e0       	ldi	r18, 0x00	; 0
 186:	30 e0       	ldi	r19, 0x00	; 0
 188:	40 e2       	ldi	r20, 0x20	; 32
 18a:	51 e4       	ldi	r21, 0x41	; 65
 18c:	6a 81       	ldd	r22, Y+2	; 0x02
 18e:	7b 81       	ldd	r23, Y+3	; 0x03
 190:	8c 81       	ldd	r24, Y+4	; 0x04
 192:	9d 81       	ldd	r25, Y+5	; 0x05
 194:	0e 94 82 02 	call	0x504	; 0x504 <__mulsf3>
 198:	dc 01       	movw	r26, r24
 19a:	cb 01       	movw	r24, r22
 19c:	bc 01       	movw	r22, r24
 19e:	cd 01       	movw	r24, r26
 1a0:	0e 94 01 02 	call	0x402	; 0x402 <__fixunssfsi>
 1a4:	dc 01       	movw	r26, r24
 1a6:	cb 01       	movw	r24, r22
 1a8:	9b 87       	std	Y+11, r25	; 0x0b
 1aa:	8a 87       	std	Y+10, r24	; 0x0a
 1ac:	0f c0       	rjmp	.+30     	; 0x1cc <program+0xf4>
 1ae:	80 e9       	ldi	r24, 0x90	; 144
 1b0:	91 e0       	ldi	r25, 0x01	; 1
 1b2:	9d 87       	std	Y+13, r25	; 0x0d
 1b4:	8c 87       	std	Y+12, r24	; 0x0c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 1b6:	8c 85       	ldd	r24, Y+12	; 0x0c
 1b8:	9d 85       	ldd	r25, Y+13	; 0x0d
 1ba:	01 97       	sbiw	r24, 0x01	; 1
 1bc:	f1 f7       	brne	.-4      	; 0x1ba <program+0xe2>
 1be:	9d 87       	std	Y+13, r25	; 0x0d
 1c0:	8c 87       	std	Y+12, r24	; 0x0c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 1c2:	8a 85       	ldd	r24, Y+10	; 0x0a
 1c4:	9b 85       	ldd	r25, Y+11	; 0x0b
 1c6:	01 97       	sbiw	r24, 0x01	; 1
 1c8:	9b 87       	std	Y+11, r25	; 0x0b
 1ca:	8a 87       	std	Y+10, r24	; 0x0a
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1cc:	8a 85       	ldd	r24, Y+10	; 0x0a
 1ce:	9b 85       	ldd	r25, Y+11	; 0x0b
 1d0:	89 2b       	or	r24, r25
 1d2:	69 f7       	brne	.-38     	; 0x1ae <program+0xd6>
 1d4:	14 c0       	rjmp	.+40     	; 0x1fe <program+0x126>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 1d6:	6e 81       	ldd	r22, Y+6	; 0x06
 1d8:	7f 81       	ldd	r23, Y+7	; 0x07
 1da:	88 85       	ldd	r24, Y+8	; 0x08
 1dc:	99 85       	ldd	r25, Y+9	; 0x09
 1de:	0e 94 01 02 	call	0x402	; 0x402 <__fixunssfsi>
 1e2:	dc 01       	movw	r26, r24
 1e4:	cb 01       	movw	r24, r22
 1e6:	9b 87       	std	Y+11, r25	; 0x0b
 1e8:	8a 87       	std	Y+10, r24	; 0x0a
 1ea:	8a 85       	ldd	r24, Y+10	; 0x0a
 1ec:	9b 85       	ldd	r25, Y+11	; 0x0b
 1ee:	9f 87       	std	Y+15, r25	; 0x0f
 1f0:	8e 87       	std	Y+14, r24	; 0x0e
 1f2:	8e 85       	ldd	r24, Y+14	; 0x0e
 1f4:	9f 85       	ldd	r25, Y+15	; 0x0f
 1f6:	01 97       	sbiw	r24, 0x01	; 1
 1f8:	f1 f7       	brne	.-4      	; 0x1f6 <program+0x11e>
 1fa:	9f 87       	std	Y+15, r25	; 0x0f
 1fc:	8e 87       	std	Y+14, r24	; 0x0e

void program(void)
{ 
	//Check_Prass_Button(&key_pad);
	char str[] = "You can do it \n\r";
	for(unsigned char i = 0; str[i] != '\0';i++)
 1fe:	89 81       	ldd	r24, Y+1	; 0x01
 200:	8f 5f       	subi	r24, 0xFF	; 255
 202:	89 83       	std	Y+1, r24	; 0x01
 204:	89 81       	ldd	r24, Y+1	; 0x01
 206:	88 2f       	mov	r24, r24
 208:	90 e0       	ldi	r25, 0x00	; 0
 20a:	9e 01       	movw	r18, r28
 20c:	20 5f       	subi	r18, 0xF0	; 240
 20e:	3f 4f       	sbci	r19, 0xFF	; 255
 210:	82 0f       	add	r24, r18
 212:	93 1f       	adc	r25, r19
 214:	fc 01       	movw	r30, r24
 216:	80 81       	ld	r24, Z
 218:	88 23       	and	r24, r24
 21a:	09 f0       	breq	.+2      	; 0x21e <program+0x146>
 21c:	72 cf       	rjmp	.-284    	; 0x102 <program+0x2a>
	{
		
		Uart_send(str[i]);
		_delay_ms(1000);	
	}
}
 21e:	00 00       	nop
 220:	a0 96       	adiw	r28, 0x20	; 32
 222:	0f b6       	in	r0, 0x3f	; 63
 224:	f8 94       	cli
 226:	de bf       	out	0x3e, r29	; 62
 228:	0f be       	out	0x3f, r0	; 63
 22a:	cd bf       	out	0x3d, r28	; 61
 22c:	df 91       	pop	r29
 22e:	cf 91       	pop	r28
 230:	08 95       	ret

00000232 <Init_Uart>:

St_UART_driver UART_Config = {0};


uint8_t Init_Uart(St_UART_driver *_init_uart)
{   
 232:	cf 93       	push	r28
 234:	df 93       	push	r29
 236:	cd b7       	in	r28, 0x3d	; 61
 238:	de b7       	in	r29, 0x3e	; 62
 23a:	29 97       	sbiw	r28, 0x09	; 9
 23c:	0f b6       	in	r0, 0x3f	; 63
 23e:	f8 94       	cli
 240:	de bf       	out	0x3e, r29	; 62
 242:	0f be       	out	0x3f, r0	; 63
 244:	cd bf       	out	0x3d, r28	; 61
 246:	99 87       	std	Y+9, r25	; 0x09
 248:	88 87       	std	Y+8, r24	; 0x08
    if((_init_uart->BuadRate >= 0) && (_init_uart <= BuadRate_Max))
 24a:	88 85       	ldd	r24, Y+8	; 0x08
 24c:	99 85       	ldd	r25, Y+9	; 0x09
 24e:	81 15       	cp	r24, r1
 250:	90 41       	sbci	r25, 0x10	; 16
 252:	08 f0       	brcs	.+2      	; 0x256 <Init_Uart+0x24>
 254:	a3 c0       	rjmp	.+326    	; 0x39c <Init_Uart+0x16a>
    {
		long pay = (long)(_init_uart->BuadRate)*_init_uart->Speed;
 256:	88 85       	ldd	r24, Y+8	; 0x08
 258:	99 85       	ldd	r25, Y+9	; 0x09
 25a:	fc 01       	movw	r30, r24
 25c:	87 81       	ldd	r24, Z+7	; 0x07
 25e:	90 85       	ldd	r25, Z+8	; 0x08
 260:	9c 01       	movw	r18, r24
 262:	40 e0       	ldi	r20, 0x00	; 0
 264:	50 e0       	ldi	r21, 0x00	; 0
 266:	88 85       	ldd	r24, Y+8	; 0x08
 268:	99 85       	ldd	r25, Y+9	; 0x09
 26a:	fc 01       	movw	r30, r24
 26c:	86 81       	ldd	r24, Z+6	; 0x06
 26e:	88 2f       	mov	r24, r24
 270:	90 e0       	ldi	r25, 0x00	; 0
 272:	a0 e0       	ldi	r26, 0x00	; 0
 274:	b0 e0       	ldi	r27, 0x00	; 0
 276:	bc 01       	movw	r22, r24
 278:	cd 01       	movw	r24, r26
 27a:	0e 94 17 03 	call	0x62e	; 0x62e <__mulsi3>
 27e:	dc 01       	movw	r26, r24
 280:	cb 01       	movw	r24, r22
 282:	89 83       	std	Y+1, r24	; 0x01
 284:	9a 83       	std	Y+2, r25	; 0x02
 286:	ab 83       	std	Y+3, r26	; 0x03
 288:	bc 83       	std	Y+4, r27	; 0x04
        unsigned int baud = ((8000000/pay) - 1);
 28a:	80 e0       	ldi	r24, 0x00	; 0
 28c:	92 e1       	ldi	r25, 0x12	; 18
 28e:	aa e7       	ldi	r26, 0x7A	; 122
 290:	b0 e0       	ldi	r27, 0x00	; 0
 292:	29 81       	ldd	r18, Y+1	; 0x01
 294:	3a 81       	ldd	r19, Y+2	; 0x02
 296:	4b 81       	ldd	r20, Y+3	; 0x03
 298:	5c 81       	ldd	r21, Y+4	; 0x04
 29a:	bc 01       	movw	r22, r24
 29c:	cd 01       	movw	r24, r26
 29e:	0e 94 27 03 	call	0x64e	; 0x64e <__divmodsi4>
 2a2:	da 01       	movw	r26, r20
 2a4:	c9 01       	movw	r24, r18
 2a6:	01 97       	sbiw	r24, 0x01	; 1
 2a8:	9e 83       	std	Y+6, r25	; 0x06
 2aa:	8d 83       	std	Y+5, r24	; 0x05
        UBRRH = (unsigned char)(baud >> 8) ;
 2ac:	80 e4       	ldi	r24, 0x40	; 64
 2ae:	90 e0       	ldi	r25, 0x00	; 0
 2b0:	2d 81       	ldd	r18, Y+5	; 0x05
 2b2:	3e 81       	ldd	r19, Y+6	; 0x06
 2b4:	23 2f       	mov	r18, r19
 2b6:	33 27       	eor	r19, r19
 2b8:	fc 01       	movw	r30, r24
 2ba:	20 83       	st	Z, r18
        UBRRL = (unsigned char)baud;
 2bc:	89 e2       	ldi	r24, 0x29	; 41
 2be:	90 e0       	ldi	r25, 0x00	; 0
 2c0:	2d 81       	ldd	r18, Y+5	; 0x05
 2c2:	fc 01       	movw	r30, r24
 2c4:	20 83       	st	Z, r18
    }else
    {
        return 0;
    }
    UCSRA_R->UCSRA_field = ((_init_uart->Speed & 0x08) << U2X);
 2c6:	8b e2       	ldi	r24, 0x2B	; 43
 2c8:	90 e0       	ldi	r25, 0x00	; 0
 2ca:	28 85       	ldd	r18, Y+8	; 0x08
 2cc:	39 85       	ldd	r19, Y+9	; 0x09
 2ce:	f9 01       	movw	r30, r18
 2d0:	26 81       	ldd	r18, Z+6	; 0x06
 2d2:	28 70       	andi	r18, 0x08	; 8
 2d4:	22 0f       	add	r18, r18
 2d6:	fc 01       	movw	r30, r24
 2d8:	20 83       	st	Z, r18
    UCSRB_R->UCSRB_field = ((_init_uart->Communcation_Mode) << TXEN | ((_init_uart->Char_Size & 0x04) << UCSZ2));
 2da:	8a e2       	ldi	r24, 0x2A	; 42
 2dc:	90 e0       	ldi	r25, 0x00	; 0
 2de:	28 85       	ldd	r18, Y+8	; 0x08
 2e0:	39 85       	ldd	r19, Y+9	; 0x09
 2e2:	f9 01       	movw	r30, r18
 2e4:	25 81       	ldd	r18, Z+5	; 0x05
 2e6:	22 2f       	mov	r18, r18
 2e8:	30 e0       	ldi	r19, 0x00	; 0
 2ea:	22 0f       	add	r18, r18
 2ec:	33 1f       	adc	r19, r19
 2ee:	22 0f       	add	r18, r18
 2f0:	33 1f       	adc	r19, r19
 2f2:	22 0f       	add	r18, r18
 2f4:	33 1f       	adc	r19, r19
 2f6:	42 2f       	mov	r20, r18
 2f8:	28 85       	ldd	r18, Y+8	; 0x08
 2fa:	39 85       	ldd	r19, Y+9	; 0x09
 2fc:	f9 01       	movw	r30, r18
 2fe:	22 81       	ldd	r18, Z+2	; 0x02
 300:	22 2f       	mov	r18, r18
 302:	30 e0       	ldi	r19, 0x00	; 0
 304:	24 70       	andi	r18, 0x04	; 4
 306:	33 27       	eor	r19, r19
 308:	22 0f       	add	r18, r18
 30a:	33 1f       	adc	r19, r19
 30c:	22 0f       	add	r18, r18
 30e:	33 1f       	adc	r19, r19
 310:	24 2b       	or	r18, r20
 312:	fc 01       	movw	r30, r24
 314:	20 83       	st	Z, r18
	uint8_t x = ((1 << URSEL) | (_init_uart->Mode << UMSEL) | (_init_uart->Parity << UPM0) | (_init_uart->Stop << USBS) | ((_init_uart->Char_Size & 0x03) << UCSZ0) | (_init_uart->Clk_Polarity << UCPOL));
 316:	88 85       	ldd	r24, Y+8	; 0x08
 318:	99 85       	ldd	r25, Y+9	; 0x09
 31a:	fc 01       	movw	r30, r24
 31c:	80 81       	ld	r24, Z
 31e:	88 2f       	mov	r24, r24
 320:	90 e0       	ldi	r25, 0x00	; 0
 322:	00 24       	eor	r0, r0
 324:	96 95       	lsr	r25
 326:	87 95       	ror	r24
 328:	07 94       	ror	r0
 32a:	96 95       	lsr	r25
 32c:	87 95       	ror	r24
 32e:	07 94       	ror	r0
 330:	98 2f       	mov	r25, r24
 332:	80 2d       	mov	r24, r0
 334:	28 2f       	mov	r18, r24
 336:	20 68       	ori	r18, 0x80	; 128
 338:	88 85       	ldd	r24, Y+8	; 0x08
 33a:	99 85       	ldd	r25, Y+9	; 0x09
 33c:	fc 01       	movw	r30, r24
 33e:	84 81       	ldd	r24, Z+4	; 0x04
 340:	88 2f       	mov	r24, r24
 342:	90 e0       	ldi	r25, 0x00	; 0
 344:	82 95       	swap	r24
 346:	92 95       	swap	r25
 348:	90 7f       	andi	r25, 0xF0	; 240
 34a:	98 27       	eor	r25, r24
 34c:	80 7f       	andi	r24, 0xF0	; 240
 34e:	98 27       	eor	r25, r24
 350:	28 2b       	or	r18, r24
 352:	88 85       	ldd	r24, Y+8	; 0x08
 354:	99 85       	ldd	r25, Y+9	; 0x09
 356:	fc 01       	movw	r30, r24
 358:	81 81       	ldd	r24, Z+1	; 0x01
 35a:	88 2f       	mov	r24, r24
 35c:	90 e0       	ldi	r25, 0x00	; 0
 35e:	88 0f       	add	r24, r24
 360:	99 1f       	adc	r25, r25
 362:	88 0f       	add	r24, r24
 364:	99 1f       	adc	r25, r25
 366:	88 0f       	add	r24, r24
 368:	99 1f       	adc	r25, r25
 36a:	28 2b       	or	r18, r24
 36c:	88 85       	ldd	r24, Y+8	; 0x08
 36e:	99 85       	ldd	r25, Y+9	; 0x09
 370:	fc 01       	movw	r30, r24
 372:	82 81       	ldd	r24, Z+2	; 0x02
 374:	88 2f       	mov	r24, r24
 376:	90 e0       	ldi	r25, 0x00	; 0
 378:	83 70       	andi	r24, 0x03	; 3
 37a:	99 27       	eor	r25, r25
 37c:	88 0f       	add	r24, r24
 37e:	99 1f       	adc	r25, r25
 380:	28 2b       	or	r18, r24
 382:	88 85       	ldd	r24, Y+8	; 0x08
 384:	99 85       	ldd	r25, Y+9	; 0x09
 386:	fc 01       	movw	r30, r24
 388:	83 81       	ldd	r24, Z+3	; 0x03
 38a:	82 2b       	or	r24, r18
 38c:	8f 83       	std	Y+7, r24	; 0x07
    UCSRC_R->UCSRC_field = x;
 38e:	80 e4       	ldi	r24, 0x40	; 64
 390:	90 e0       	ldi	r25, 0x00	; 0
 392:	2f 81       	ldd	r18, Y+7	; 0x07
 394:	fc 01       	movw	r30, r24
 396:	20 83       	st	Z, r18

    

    return 1;
 398:	81 e0       	ldi	r24, 0x01	; 1
 39a:	01 c0       	rjmp	.+2      	; 0x39e <Init_Uart+0x16c>
        unsigned int baud = ((8000000/pay) - 1);
        UBRRH = (unsigned char)(baud >> 8) ;
        UBRRL = (unsigned char)baud;
    }else
    {
        return 0;
 39c:	80 e0       	ldi	r24, 0x00	; 0
    UCSRC_R->UCSRC_field = x;

    

    return 1;
}
 39e:	29 96       	adiw	r28, 0x09	; 9
 3a0:	0f b6       	in	r0, 0x3f	; 63
 3a2:	f8 94       	cli
 3a4:	de bf       	out	0x3e, r29	; 62
 3a6:	0f be       	out	0x3f, r0	; 63
 3a8:	cd bf       	out	0x3d, r28	; 61
 3aa:	df 91       	pop	r29
 3ac:	cf 91       	pop	r28
 3ae:	08 95       	ret

000003b0 <Uart_send>:

void Uart_send(unsigned char msg)
{
 3b0:	cf 93       	push	r28
 3b2:	df 93       	push	r29
 3b4:	1f 92       	push	r1
 3b6:	cd b7       	in	r28, 0x3d	; 61
 3b8:	de b7       	in	r29, 0x3e	; 62
 3ba:	89 83       	std	Y+1, r24	; 0x01
    while(!(UCSRA_R->UCSRA_field & (1<<UDRE)));
 3bc:	00 00       	nop
 3be:	8b e2       	ldi	r24, 0x2B	; 43
 3c0:	90 e0       	ldi	r25, 0x00	; 0
 3c2:	fc 01       	movw	r30, r24
 3c4:	80 81       	ld	r24, Z
 3c6:	88 2f       	mov	r24, r24
 3c8:	90 e0       	ldi	r25, 0x00	; 0
 3ca:	80 72       	andi	r24, 0x20	; 32
 3cc:	99 27       	eor	r25, r25
 3ce:	89 2b       	or	r24, r25
 3d0:	b1 f3       	breq	.-20     	; 0x3be <Uart_send+0xe>

    UDR = msg;
 3d2:	8c e2       	ldi	r24, 0x2C	; 44
 3d4:	90 e0       	ldi	r25, 0x00	; 0
 3d6:	29 81       	ldd	r18, Y+1	; 0x01
 3d8:	fc 01       	movw	r30, r24
 3da:	20 83       	st	Z, r18
 3dc:	00 00       	nop
 3de:	0f 90       	pop	r0
 3e0:	df 91       	pop	r29
 3e2:	cf 91       	pop	r28
 3e4:	08 95       	ret

000003e6 <main>:
	while(!(UCSRA & (1 << UDRE)));
	UDR = ch;
}

int main(void)
{
 3e6:	cf 93       	push	r28
 3e8:	df 93       	push	r29
 3ea:	cd b7       	in	r28, 0x3d	; 61
 3ec:	de b7       	in	r29, 0x3e	; 62
    /* Replace with your application code */
	init();
 3ee:	0e 94 49 00 	call	0x92	; 0x92 <init>
		// {
			
		// 	uuart_send(str[i]);
		// 	_delay_ms(1000);	
		// }
		program();
 3f2:	0e 94 6c 00 	call	0xd8	; 0xd8 <program>
		//_delay_ms(1000);
	}
 3f6:	fd cf       	rjmp	.-6      	; 0x3f2 <main+0xc>

000003f8 <__cmpsf2>:
 3f8:	0e 94 30 02 	call	0x460	; 0x460 <__fp_cmp>
 3fc:	08 f4       	brcc	.+2      	; 0x400 <__EEPROM_REGION_LENGTH__>
 3fe:	81 e0       	ldi	r24, 0x01	; 1
 400:	08 95       	ret

00000402 <__fixunssfsi>:
 402:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <__fp_splitA>
 406:	88 f0       	brcs	.+34     	; 0x42a <__fixunssfsi+0x28>
 408:	9f 57       	subi	r25, 0x7F	; 127
 40a:	98 f0       	brcs	.+38     	; 0x432 <__fixunssfsi+0x30>
 40c:	b9 2f       	mov	r27, r25
 40e:	99 27       	eor	r25, r25
 410:	b7 51       	subi	r27, 0x17	; 23
 412:	b0 f0       	brcs	.+44     	; 0x440 <__fixunssfsi+0x3e>
 414:	e1 f0       	breq	.+56     	; 0x44e <__fixunssfsi+0x4c>
 416:	66 0f       	add	r22, r22
 418:	77 1f       	adc	r23, r23
 41a:	88 1f       	adc	r24, r24
 41c:	99 1f       	adc	r25, r25
 41e:	1a f0       	brmi	.+6      	; 0x426 <__fixunssfsi+0x24>
 420:	ba 95       	dec	r27
 422:	c9 f7       	brne	.-14     	; 0x416 <__fixunssfsi+0x14>
 424:	14 c0       	rjmp	.+40     	; 0x44e <__fixunssfsi+0x4c>
 426:	b1 30       	cpi	r27, 0x01	; 1
 428:	91 f0       	breq	.+36     	; 0x44e <__fixunssfsi+0x4c>
 42a:	0e 94 76 02 	call	0x4ec	; 0x4ec <__fp_zero>
 42e:	b1 e0       	ldi	r27, 0x01	; 1
 430:	08 95       	ret
 432:	0c 94 76 02 	jmp	0x4ec	; 0x4ec <__fp_zero>
 436:	67 2f       	mov	r22, r23
 438:	78 2f       	mov	r23, r24
 43a:	88 27       	eor	r24, r24
 43c:	b8 5f       	subi	r27, 0xF8	; 248
 43e:	39 f0       	breq	.+14     	; 0x44e <__fixunssfsi+0x4c>
 440:	b9 3f       	cpi	r27, 0xF9	; 249
 442:	cc f3       	brlt	.-14     	; 0x436 <__fixunssfsi+0x34>
 444:	86 95       	lsr	r24
 446:	77 95       	ror	r23
 448:	67 95       	ror	r22
 44a:	b3 95       	inc	r27
 44c:	d9 f7       	brne	.-10     	; 0x444 <__fixunssfsi+0x42>
 44e:	3e f4       	brtc	.+14     	; 0x45e <__fixunssfsi+0x5c>
 450:	90 95       	com	r25
 452:	80 95       	com	r24
 454:	70 95       	com	r23
 456:	61 95       	neg	r22
 458:	7f 4f       	sbci	r23, 0xFF	; 255
 45a:	8f 4f       	sbci	r24, 0xFF	; 255
 45c:	9f 4f       	sbci	r25, 0xFF	; 255
 45e:	08 95       	ret

00000460 <__fp_cmp>:
 460:	99 0f       	add	r25, r25
 462:	00 08       	sbc	r0, r0
 464:	55 0f       	add	r21, r21
 466:	aa 0b       	sbc	r26, r26
 468:	e0 e8       	ldi	r30, 0x80	; 128
 46a:	fe ef       	ldi	r31, 0xFE	; 254
 46c:	16 16       	cp	r1, r22
 46e:	17 06       	cpc	r1, r23
 470:	e8 07       	cpc	r30, r24
 472:	f9 07       	cpc	r31, r25
 474:	c0 f0       	brcs	.+48     	; 0x4a6 <__fp_cmp+0x46>
 476:	12 16       	cp	r1, r18
 478:	13 06       	cpc	r1, r19
 47a:	e4 07       	cpc	r30, r20
 47c:	f5 07       	cpc	r31, r21
 47e:	98 f0       	brcs	.+38     	; 0x4a6 <__fp_cmp+0x46>
 480:	62 1b       	sub	r22, r18
 482:	73 0b       	sbc	r23, r19
 484:	84 0b       	sbc	r24, r20
 486:	95 0b       	sbc	r25, r21
 488:	39 f4       	brne	.+14     	; 0x498 <__fp_cmp+0x38>
 48a:	0a 26       	eor	r0, r26
 48c:	61 f0       	breq	.+24     	; 0x4a6 <__fp_cmp+0x46>
 48e:	23 2b       	or	r18, r19
 490:	24 2b       	or	r18, r20
 492:	25 2b       	or	r18, r21
 494:	21 f4       	brne	.+8      	; 0x49e <__fp_cmp+0x3e>
 496:	08 95       	ret
 498:	0a 26       	eor	r0, r26
 49a:	09 f4       	brne	.+2      	; 0x49e <__fp_cmp+0x3e>
 49c:	a1 40       	sbci	r26, 0x01	; 1
 49e:	a6 95       	lsr	r26
 4a0:	8f ef       	ldi	r24, 0xFF	; 255
 4a2:	81 1d       	adc	r24, r1
 4a4:	81 1d       	adc	r24, r1
 4a6:	08 95       	ret

000004a8 <__fp_split3>:
 4a8:	57 fd       	sbrc	r21, 7
 4aa:	90 58       	subi	r25, 0x80	; 128
 4ac:	44 0f       	add	r20, r20
 4ae:	55 1f       	adc	r21, r21
 4b0:	59 f0       	breq	.+22     	; 0x4c8 <__fp_splitA+0x10>
 4b2:	5f 3f       	cpi	r21, 0xFF	; 255
 4b4:	71 f0       	breq	.+28     	; 0x4d2 <__fp_splitA+0x1a>
 4b6:	47 95       	ror	r20

000004b8 <__fp_splitA>:
 4b8:	88 0f       	add	r24, r24
 4ba:	97 fb       	bst	r25, 7
 4bc:	99 1f       	adc	r25, r25
 4be:	61 f0       	breq	.+24     	; 0x4d8 <__fp_splitA+0x20>
 4c0:	9f 3f       	cpi	r25, 0xFF	; 255
 4c2:	79 f0       	breq	.+30     	; 0x4e2 <__fp_splitA+0x2a>
 4c4:	87 95       	ror	r24
 4c6:	08 95       	ret
 4c8:	12 16       	cp	r1, r18
 4ca:	13 06       	cpc	r1, r19
 4cc:	14 06       	cpc	r1, r20
 4ce:	55 1f       	adc	r21, r21
 4d0:	f2 cf       	rjmp	.-28     	; 0x4b6 <__fp_split3+0xe>
 4d2:	46 95       	lsr	r20
 4d4:	f1 df       	rcall	.-30     	; 0x4b8 <__fp_splitA>
 4d6:	08 c0       	rjmp	.+16     	; 0x4e8 <__fp_splitA+0x30>
 4d8:	16 16       	cp	r1, r22
 4da:	17 06       	cpc	r1, r23
 4dc:	18 06       	cpc	r1, r24
 4de:	99 1f       	adc	r25, r25
 4e0:	f1 cf       	rjmp	.-30     	; 0x4c4 <__fp_splitA+0xc>
 4e2:	86 95       	lsr	r24
 4e4:	71 05       	cpc	r23, r1
 4e6:	61 05       	cpc	r22, r1
 4e8:	08 94       	sec
 4ea:	08 95       	ret

000004ec <__fp_zero>:
 4ec:	e8 94       	clt

000004ee <__fp_szero>:
 4ee:	bb 27       	eor	r27, r27
 4f0:	66 27       	eor	r22, r22
 4f2:	77 27       	eor	r23, r23
 4f4:	cb 01       	movw	r24, r22
 4f6:	97 f9       	bld	r25, 7
 4f8:	08 95       	ret

000004fa <__gesf2>:
 4fa:	0e 94 30 02 	call	0x460	; 0x460 <__fp_cmp>
 4fe:	08 f4       	brcc	.+2      	; 0x502 <__gesf2+0x8>
 500:	8f ef       	ldi	r24, 0xFF	; 255
 502:	08 95       	ret

00000504 <__mulsf3>:
 504:	0e 94 95 02 	call	0x52a	; 0x52a <__mulsf3x>
 508:	0c 94 06 03 	jmp	0x60c	; 0x60c <__fp_round>
 50c:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <__fp_pscA>
 510:	38 f0       	brcs	.+14     	; 0x520 <__mulsf3+0x1c>
 512:	0e 94 ff 02 	call	0x5fe	; 0x5fe <__fp_pscB>
 516:	20 f0       	brcs	.+8      	; 0x520 <__mulsf3+0x1c>
 518:	95 23       	and	r25, r21
 51a:	11 f0       	breq	.+4      	; 0x520 <__mulsf3+0x1c>
 51c:	0c 94 ef 02 	jmp	0x5de	; 0x5de <__fp_inf>
 520:	0c 94 f5 02 	jmp	0x5ea	; 0x5ea <__fp_nan>
 524:	11 24       	eor	r1, r1
 526:	0c 94 77 02 	jmp	0x4ee	; 0x4ee <__fp_szero>

0000052a <__mulsf3x>:
 52a:	0e 94 54 02 	call	0x4a8	; 0x4a8 <__fp_split3>
 52e:	70 f3       	brcs	.-36     	; 0x50c <__mulsf3+0x8>

00000530 <__mulsf3_pse>:
 530:	95 9f       	mul	r25, r21
 532:	c1 f3       	breq	.-16     	; 0x524 <__mulsf3+0x20>
 534:	95 0f       	add	r25, r21
 536:	50 e0       	ldi	r21, 0x00	; 0
 538:	55 1f       	adc	r21, r21
 53a:	62 9f       	mul	r22, r18
 53c:	f0 01       	movw	r30, r0
 53e:	72 9f       	mul	r23, r18
 540:	bb 27       	eor	r27, r27
 542:	f0 0d       	add	r31, r0
 544:	b1 1d       	adc	r27, r1
 546:	63 9f       	mul	r22, r19
 548:	aa 27       	eor	r26, r26
 54a:	f0 0d       	add	r31, r0
 54c:	b1 1d       	adc	r27, r1
 54e:	aa 1f       	adc	r26, r26
 550:	64 9f       	mul	r22, r20
 552:	66 27       	eor	r22, r22
 554:	b0 0d       	add	r27, r0
 556:	a1 1d       	adc	r26, r1
 558:	66 1f       	adc	r22, r22
 55a:	82 9f       	mul	r24, r18
 55c:	22 27       	eor	r18, r18
 55e:	b0 0d       	add	r27, r0
 560:	a1 1d       	adc	r26, r1
 562:	62 1f       	adc	r22, r18
 564:	73 9f       	mul	r23, r19
 566:	b0 0d       	add	r27, r0
 568:	a1 1d       	adc	r26, r1
 56a:	62 1f       	adc	r22, r18
 56c:	83 9f       	mul	r24, r19
 56e:	a0 0d       	add	r26, r0
 570:	61 1d       	adc	r22, r1
 572:	22 1f       	adc	r18, r18
 574:	74 9f       	mul	r23, r20
 576:	33 27       	eor	r19, r19
 578:	a0 0d       	add	r26, r0
 57a:	61 1d       	adc	r22, r1
 57c:	23 1f       	adc	r18, r19
 57e:	84 9f       	mul	r24, r20
 580:	60 0d       	add	r22, r0
 582:	21 1d       	adc	r18, r1
 584:	82 2f       	mov	r24, r18
 586:	76 2f       	mov	r23, r22
 588:	6a 2f       	mov	r22, r26
 58a:	11 24       	eor	r1, r1
 58c:	9f 57       	subi	r25, 0x7F	; 127
 58e:	50 40       	sbci	r21, 0x00	; 0
 590:	9a f0       	brmi	.+38     	; 0x5b8 <__mulsf3_pse+0x88>
 592:	f1 f0       	breq	.+60     	; 0x5d0 <__mulsf3_pse+0xa0>
 594:	88 23       	and	r24, r24
 596:	4a f0       	brmi	.+18     	; 0x5aa <__mulsf3_pse+0x7a>
 598:	ee 0f       	add	r30, r30
 59a:	ff 1f       	adc	r31, r31
 59c:	bb 1f       	adc	r27, r27
 59e:	66 1f       	adc	r22, r22
 5a0:	77 1f       	adc	r23, r23
 5a2:	88 1f       	adc	r24, r24
 5a4:	91 50       	subi	r25, 0x01	; 1
 5a6:	50 40       	sbci	r21, 0x00	; 0
 5a8:	a9 f7       	brne	.-22     	; 0x594 <__mulsf3_pse+0x64>
 5aa:	9e 3f       	cpi	r25, 0xFE	; 254
 5ac:	51 05       	cpc	r21, r1
 5ae:	80 f0       	brcs	.+32     	; 0x5d0 <__mulsf3_pse+0xa0>
 5b0:	0c 94 ef 02 	jmp	0x5de	; 0x5de <__fp_inf>
 5b4:	0c 94 77 02 	jmp	0x4ee	; 0x4ee <__fp_szero>
 5b8:	5f 3f       	cpi	r21, 0xFF	; 255
 5ba:	e4 f3       	brlt	.-8      	; 0x5b4 <__mulsf3_pse+0x84>
 5bc:	98 3e       	cpi	r25, 0xE8	; 232
 5be:	d4 f3       	brlt	.-12     	; 0x5b4 <__mulsf3_pse+0x84>
 5c0:	86 95       	lsr	r24
 5c2:	77 95       	ror	r23
 5c4:	67 95       	ror	r22
 5c6:	b7 95       	ror	r27
 5c8:	f7 95       	ror	r31
 5ca:	e7 95       	ror	r30
 5cc:	9f 5f       	subi	r25, 0xFF	; 255
 5ce:	c1 f7       	brne	.-16     	; 0x5c0 <__mulsf3_pse+0x90>
 5d0:	fe 2b       	or	r31, r30
 5d2:	88 0f       	add	r24, r24
 5d4:	91 1d       	adc	r25, r1
 5d6:	96 95       	lsr	r25
 5d8:	87 95       	ror	r24
 5da:	97 f9       	bld	r25, 7
 5dc:	08 95       	ret

000005de <__fp_inf>:
 5de:	97 f9       	bld	r25, 7
 5e0:	9f 67       	ori	r25, 0x7F	; 127
 5e2:	80 e8       	ldi	r24, 0x80	; 128
 5e4:	70 e0       	ldi	r23, 0x00	; 0
 5e6:	60 e0       	ldi	r22, 0x00	; 0
 5e8:	08 95       	ret

000005ea <__fp_nan>:
 5ea:	9f ef       	ldi	r25, 0xFF	; 255
 5ec:	80 ec       	ldi	r24, 0xC0	; 192
 5ee:	08 95       	ret

000005f0 <__fp_pscA>:
 5f0:	00 24       	eor	r0, r0
 5f2:	0a 94       	dec	r0
 5f4:	16 16       	cp	r1, r22
 5f6:	17 06       	cpc	r1, r23
 5f8:	18 06       	cpc	r1, r24
 5fa:	09 06       	cpc	r0, r25
 5fc:	08 95       	ret

000005fe <__fp_pscB>:
 5fe:	00 24       	eor	r0, r0
 600:	0a 94       	dec	r0
 602:	12 16       	cp	r1, r18
 604:	13 06       	cpc	r1, r19
 606:	14 06       	cpc	r1, r20
 608:	05 06       	cpc	r0, r21
 60a:	08 95       	ret

0000060c <__fp_round>:
 60c:	09 2e       	mov	r0, r25
 60e:	03 94       	inc	r0
 610:	00 0c       	add	r0, r0
 612:	11 f4       	brne	.+4      	; 0x618 <__fp_round+0xc>
 614:	88 23       	and	r24, r24
 616:	52 f0       	brmi	.+20     	; 0x62c <__fp_round+0x20>
 618:	bb 0f       	add	r27, r27
 61a:	40 f4       	brcc	.+16     	; 0x62c <__fp_round+0x20>
 61c:	bf 2b       	or	r27, r31
 61e:	11 f4       	brne	.+4      	; 0x624 <__fp_round+0x18>
 620:	60 ff       	sbrs	r22, 0
 622:	04 c0       	rjmp	.+8      	; 0x62c <__fp_round+0x20>
 624:	6f 5f       	subi	r22, 0xFF	; 255
 626:	7f 4f       	sbci	r23, 0xFF	; 255
 628:	8f 4f       	sbci	r24, 0xFF	; 255
 62a:	9f 4f       	sbci	r25, 0xFF	; 255
 62c:	08 95       	ret

0000062e <__mulsi3>:
 62e:	db 01       	movw	r26, r22
 630:	8f 93       	push	r24
 632:	9f 93       	push	r25
 634:	0e 94 46 03 	call	0x68c	; 0x68c <__muluhisi3>
 638:	bf 91       	pop	r27
 63a:	af 91       	pop	r26
 63c:	a2 9f       	mul	r26, r18
 63e:	80 0d       	add	r24, r0
 640:	91 1d       	adc	r25, r1
 642:	a3 9f       	mul	r26, r19
 644:	90 0d       	add	r25, r0
 646:	b2 9f       	mul	r27, r18
 648:	90 0d       	add	r25, r0
 64a:	11 24       	eor	r1, r1
 64c:	08 95       	ret

0000064e <__divmodsi4>:
 64e:	05 2e       	mov	r0, r21
 650:	97 fb       	bst	r25, 7
 652:	1e f4       	brtc	.+6      	; 0x65a <__divmodsi4+0xc>
 654:	00 94       	com	r0
 656:	0e 94 3e 03 	call	0x67c	; 0x67c <__negsi2>
 65a:	57 fd       	sbrc	r21, 7
 65c:	07 d0       	rcall	.+14     	; 0x66c <__divmodsi4_neg2>
 65e:	0e 94 51 03 	call	0x6a2	; 0x6a2 <__udivmodsi4>
 662:	07 fc       	sbrc	r0, 7
 664:	03 d0       	rcall	.+6      	; 0x66c <__divmodsi4_neg2>
 666:	4e f4       	brtc	.+18     	; 0x67a <__divmodsi4_exit>
 668:	0c 94 3e 03 	jmp	0x67c	; 0x67c <__negsi2>

0000066c <__divmodsi4_neg2>:
 66c:	50 95       	com	r21
 66e:	40 95       	com	r20
 670:	30 95       	com	r19
 672:	21 95       	neg	r18
 674:	3f 4f       	sbci	r19, 0xFF	; 255
 676:	4f 4f       	sbci	r20, 0xFF	; 255
 678:	5f 4f       	sbci	r21, 0xFF	; 255

0000067a <__divmodsi4_exit>:
 67a:	08 95       	ret

0000067c <__negsi2>:
 67c:	90 95       	com	r25
 67e:	80 95       	com	r24
 680:	70 95       	com	r23
 682:	61 95       	neg	r22
 684:	7f 4f       	sbci	r23, 0xFF	; 255
 686:	8f 4f       	sbci	r24, 0xFF	; 255
 688:	9f 4f       	sbci	r25, 0xFF	; 255
 68a:	08 95       	ret

0000068c <__muluhisi3>:
 68c:	0e 94 73 03 	call	0x6e6	; 0x6e6 <__umulhisi3>
 690:	a5 9f       	mul	r26, r21
 692:	90 0d       	add	r25, r0
 694:	b4 9f       	mul	r27, r20
 696:	90 0d       	add	r25, r0
 698:	a4 9f       	mul	r26, r20
 69a:	80 0d       	add	r24, r0
 69c:	91 1d       	adc	r25, r1
 69e:	11 24       	eor	r1, r1
 6a0:	08 95       	ret

000006a2 <__udivmodsi4>:
 6a2:	a1 e2       	ldi	r26, 0x21	; 33
 6a4:	1a 2e       	mov	r1, r26
 6a6:	aa 1b       	sub	r26, r26
 6a8:	bb 1b       	sub	r27, r27
 6aa:	fd 01       	movw	r30, r26
 6ac:	0d c0       	rjmp	.+26     	; 0x6c8 <__udivmodsi4_ep>

000006ae <__udivmodsi4_loop>:
 6ae:	aa 1f       	adc	r26, r26
 6b0:	bb 1f       	adc	r27, r27
 6b2:	ee 1f       	adc	r30, r30
 6b4:	ff 1f       	adc	r31, r31
 6b6:	a2 17       	cp	r26, r18
 6b8:	b3 07       	cpc	r27, r19
 6ba:	e4 07       	cpc	r30, r20
 6bc:	f5 07       	cpc	r31, r21
 6be:	20 f0       	brcs	.+8      	; 0x6c8 <__udivmodsi4_ep>
 6c0:	a2 1b       	sub	r26, r18
 6c2:	b3 0b       	sbc	r27, r19
 6c4:	e4 0b       	sbc	r30, r20
 6c6:	f5 0b       	sbc	r31, r21

000006c8 <__udivmodsi4_ep>:
 6c8:	66 1f       	adc	r22, r22
 6ca:	77 1f       	adc	r23, r23
 6cc:	88 1f       	adc	r24, r24
 6ce:	99 1f       	adc	r25, r25
 6d0:	1a 94       	dec	r1
 6d2:	69 f7       	brne	.-38     	; 0x6ae <__udivmodsi4_loop>
 6d4:	60 95       	com	r22
 6d6:	70 95       	com	r23
 6d8:	80 95       	com	r24
 6da:	90 95       	com	r25
 6dc:	9b 01       	movw	r18, r22
 6de:	ac 01       	movw	r20, r24
 6e0:	bd 01       	movw	r22, r26
 6e2:	cf 01       	movw	r24, r30
 6e4:	08 95       	ret

000006e6 <__umulhisi3>:
 6e6:	a2 9f       	mul	r26, r18
 6e8:	b0 01       	movw	r22, r0
 6ea:	b3 9f       	mul	r27, r19
 6ec:	c0 01       	movw	r24, r0
 6ee:	a3 9f       	mul	r26, r19
 6f0:	70 0d       	add	r23, r0
 6f2:	81 1d       	adc	r24, r1
 6f4:	11 24       	eor	r1, r1
 6f6:	91 1d       	adc	r25, r1
 6f8:	b2 9f       	mul	r27, r18
 6fa:	70 0d       	add	r23, r0
 6fc:	81 1d       	adc	r24, r1
 6fe:	11 24       	eor	r1, r1
 700:	91 1d       	adc	r25, r1
 702:	08 95       	ret

00000704 <_exit>:
 704:	f8 94       	cli

00000706 <__stop_program>:
 706:	ff cf       	rjmp	.-2      	; 0x706 <__stop_program>
