
Atmega32_test1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000648  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000c  00800060  00000648  000006dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000013  0080006c  0080006c  000006e8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000006e8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000718  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000138  00000000  00000000  00000754  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001893  00000000  00000000  0000088c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a94  00000000  00000000  0000211f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c66  00000000  00000000  00002bb3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003d0  00000000  00000000  0000381c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a83  00000000  00000000  00003bec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000079b  00000000  00000000  0000466f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e8  00000000  00000000  00004e0a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 b3 02 	jmp	0x566	; 0x566 <__vector_13>
  38:	0c 94 f5 02 	jmp	0x5ea	; 0x5ea <__vector_14>
  3c:	0c 94 e2 02 	jmp	0x5c4	; 0x5c4 <__vector_15>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e4       	ldi	r30, 0x48	; 72
  68:	f6 e0       	ldi	r31, 0x06	; 6
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ac 36       	cpi	r26, 0x6C	; 108
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	ac e6       	ldi	r26, 0x6C	; 108
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	af 37       	cpi	r26, 0x7F	; 127
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 19 03 	call	0x632	; 0x632 <main>
  8a:	0c 94 22 03 	jmp	0x644	; 0x644 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <init>:


uint8_t R_msg[16] = {0};

void init(void)
{
  92:	cf 93       	push	r28
  94:	df 93       	push	r29
  96:	cd b7       	in	r28, 0x3d	; 61
  98:	de b7       	in	r29, 0x3e	; 62
	// key_pad.output.Port = PORT_C;
	// key_pad.output.Pins =PIN_1|PIN_2|PIN_3|PIN_4;
	// Key_pad_init(&key_pad);

// Confige The SPI
	spi_confige.Data_Modes = Sample_Ris_Setup_Fall;
  9a:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__data_end+0x3>
	spi_confige.Data_Order = Data_Order_MSB;
  9e:	10 92 6d 00 	sts	0x006D, r1	; 0x80006d <__data_end+0x1>
	spi_confige.En_interrupt = EN_SPI_Interrupt;
  a2:	80 e8       	ldi	r24, 0x80	; 128
  a4:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <__data_end>
	spi_confige.Slave_Master = SPI_Slave;
  a8:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <__data_end+0x2>
	spi_confige.SPI_Freq = F_OSC_16;
  ac:	81 e0       	ldi	r24, 0x01	; 1
  ae:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__data_end+0x4>
	SPI_Init(&spi_confige);
  b2:	8c e6       	ldi	r24, 0x6C	; 108
  b4:	90 e0       	ldi	r25, 0x00	; 0
  b6:	0e 94 a8 01 	call	0x350	; 0x350 <SPI_Init>
	
	//unsigned char str[] = "You can do it \n\r";
	//Uart_Send_String(str);
	// Write_String(&Lcd_config,str);
	// Jump_to_coordinator(&Lcd_config,0,Seconde_R);
}
  ba:	00 00       	nop
  bc:	df 91       	pop	r29
  be:	cf 91       	pop	r28
  c0:	08 95       	ret

000000c2 <program>:

uint8_t *buffer_index = 0;
uint8_t SPI_Rx;
void program(void)
{ 	
  c2:	cf 93       	push	r28
  c4:	df 93       	push	r29
  c6:	cd b7       	in	r28, 0x3d	; 61
  c8:	de b7       	in	r29, 0x3e	; 62
		// 	Write_String(&Lcd_config,UART_Config.msg);
		// }	

	// Display charackter to 7 segment
		volatile static uint8_t counter = 2;
		if(counter < 10)
  ca:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <counter.2008>
  ce:	8a 30       	cpi	r24, 0x0A	; 10
  d0:	08 f5       	brcc	.+66     	; 0x114 <program+0x52>
		{
			SPI_Rx = SPI_SlaveReceive_Char(&spi_confige, numbers[counter]);
  d2:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <counter.2008>
  d6:	88 2f       	mov	r24, r24
  d8:	90 e0       	ldi	r25, 0x00	; 0
  da:	80 5a       	subi	r24, 0xA0	; 160
  dc:	9f 4f       	sbci	r25, 0xFF	; 255
  de:	fc 01       	movw	r30, r24
  e0:	80 81       	ld	r24, Z
  e2:	68 2f       	mov	r22, r24
  e4:	8c e6       	ldi	r24, 0x6C	; 108
  e6:	90 e0       	ldi	r25, 0x00	; 0
  e8:	0e 94 0b 02 	call	0x416	; 0x416 <SPI_SlaveReceive_Char>
  ec:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <SPI_Rx>
			Write_Port_Register(PORT_D,SPI_Rx);
  f0:	80 91 7e 00 	lds	r24, 0x007E	; 0x80007e <SPI_Rx>
  f4:	68 2f       	mov	r22, r24
  f6:	80 e3       	ldi	r24, 0x30	; 48
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	0e 94 82 01 	call	0x304	; 0x304 <Write_Port_Register>
			counter ++;
  fe:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <counter.2008>
 102:	8f 5f       	subi	r24, 0xFF	; 255
 104:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <counter.2008>
			if(counter == 10){counter = 0;}
 108:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <counter.2008>
 10c:	8a 30       	cpi	r24, 0x0A	; 10
 10e:	11 f4       	brne	.+4      	; 0x114 <program+0x52>
 110:	10 92 6a 00 	sts	0x006A, r1	; 0x80006a <counter.2008>
		}
		//_delay_ms(1000);
}
 114:	00 00       	nop
 116:	df 91       	pop	r29
 118:	cf 91       	pop	r28
 11a:	08 95       	ret

0000011c <Init_GPIO>:
 11c:	cf 93       	push	r28
 11e:	df 93       	push	r29
 120:	cd b7       	in	r28, 0x3d	; 61
 122:	de b7       	in	r29, 0x3e	; 62
 124:	28 97       	sbiw	r28, 0x08	; 8
 126:	0f b6       	in	r0, 0x3f	; 63
 128:	f8 94       	cli
 12a:	de bf       	out	0x3e, r29	; 62
 12c:	0f be       	out	0x3f, r0	; 63
 12e:	cd bf       	out	0x3d, r28	; 61
 130:	9e 83       	std	Y+6, r25	; 0x06
 132:	8d 83       	std	Y+5, r24	; 0x05
 134:	78 87       	std	Y+8, r23	; 0x08
 136:	6f 83       	std	Y+7, r22	; 0x07
 138:	8d 81       	ldd	r24, Y+5	; 0x05
 13a:	9e 81       	ldd	r25, Y+6	; 0x06
 13c:	c9 97       	sbiw	r24, 0x39	; 57
 13e:	71 f0       	breq	.+28     	; 0x15c <Init_GPIO+0x40>
 140:	8d 81       	ldd	r24, Y+5	; 0x05
 142:	9e 81       	ldd	r25, Y+6	; 0x06
 144:	c6 97       	sbiw	r24, 0x36	; 54
 146:	51 f0       	breq	.+20     	; 0x15c <Init_GPIO+0x40>
 148:	8d 81       	ldd	r24, Y+5	; 0x05
 14a:	9e 81       	ldd	r25, Y+6	; 0x06
 14c:	c3 97       	sbiw	r24, 0x33	; 51
 14e:	31 f0       	breq	.+12     	; 0x15c <Init_GPIO+0x40>
 150:	8d 81       	ldd	r24, Y+5	; 0x05
 152:	9e 81       	ldd	r25, Y+6	; 0x06
 154:	c0 97       	sbiw	r24, 0x30	; 48
 156:	11 f0       	breq	.+4      	; 0x15c <Init_GPIO+0x40>
 158:	80 e0       	ldi	r24, 0x00	; 0
 15a:	cb c0       	rjmp	.+406    	; 0x2f2 <Init_GPIO+0x1d6>
 15c:	1a 82       	std	Y+2, r1	; 0x02
 15e:	1b 82       	std	Y+3, r1	; 0x03
 160:	1c 82       	std	Y+4, r1	; 0x04
 162:	19 82       	std	Y+1, r1	; 0x01
 164:	c1 c0       	rjmp	.+386    	; 0x2e8 <Init_GPIO+0x1cc>
 166:	89 81       	ldd	r24, Y+1	; 0x01
 168:	28 2f       	mov	r18, r24
 16a:	30 e0       	ldi	r19, 0x00	; 0
 16c:	81 e0       	ldi	r24, 0x01	; 1
 16e:	90 e0       	ldi	r25, 0x00	; 0
 170:	02 c0       	rjmp	.+4      	; 0x176 <Init_GPIO+0x5a>
 172:	88 0f       	add	r24, r24
 174:	99 1f       	adc	r25, r25
 176:	2a 95       	dec	r18
 178:	e2 f7       	brpl	.-8      	; 0x172 <Init_GPIO+0x56>
 17a:	8a 83       	std	Y+2, r24	; 0x02
 17c:	8f 81       	ldd	r24, Y+7	; 0x07
 17e:	98 85       	ldd	r25, Y+8	; 0x08
 180:	fc 01       	movw	r30, r24
 182:	90 81       	ld	r25, Z
 184:	8a 81       	ldd	r24, Y+2	; 0x02
 186:	89 23       	and	r24, r25
 188:	8b 83       	std	Y+3, r24	; 0x03
 18a:	9a 81       	ldd	r25, Y+2	; 0x02
 18c:	8b 81       	ldd	r24, Y+3	; 0x03
 18e:	98 17       	cp	r25, r24
 190:	09 f0       	breq	.+2      	; 0x194 <Init_GPIO+0x78>
 192:	a7 c0       	rjmp	.+334    	; 0x2e2 <Init_GPIO+0x1c6>
 194:	8f 81       	ldd	r24, Y+7	; 0x07
 196:	98 85       	ldd	r25, Y+8	; 0x08
 198:	fc 01       	movw	r30, r24
 19a:	81 81       	ldd	r24, Z+1	; 0x01
 19c:	81 30       	cpi	r24, 0x01	; 1
 19e:	79 f5       	brne	.+94     	; 0x1fe <Init_GPIO+0xe2>
 1a0:	8d 81       	ldd	r24, Y+5	; 0x05
 1a2:	9e 81       	ldd	r25, Y+6	; 0x06
 1a4:	fc 01       	movw	r30, r24
 1a6:	81 81       	ldd	r24, Z+1	; 0x01
 1a8:	8c 83       	std	Y+4, r24	; 0x04
 1aa:	8f 81       	ldd	r24, Y+7	; 0x07
 1ac:	98 85       	ldd	r25, Y+8	; 0x08
 1ae:	fc 01       	movw	r30, r24
 1b0:	81 81       	ldd	r24, Z+1	; 0x01
 1b2:	88 2f       	mov	r24, r24
 1b4:	90 e0       	ldi	r25, 0x00	; 0
 1b6:	29 81       	ldd	r18, Y+1	; 0x01
 1b8:	22 2f       	mov	r18, r18
 1ba:	30 e0       	ldi	r19, 0x00	; 0
 1bc:	02 c0       	rjmp	.+4      	; 0x1c2 <Init_GPIO+0xa6>
 1be:	88 0f       	add	r24, r24
 1c0:	99 1f       	adc	r25, r25
 1c2:	2a 95       	dec	r18
 1c4:	e2 f7       	brpl	.-8      	; 0x1be <Init_GPIO+0xa2>
 1c6:	98 2f       	mov	r25, r24
 1c8:	90 95       	com	r25
 1ca:	8c 81       	ldd	r24, Y+4	; 0x04
 1cc:	89 23       	and	r24, r25
 1ce:	8c 83       	std	Y+4, r24	; 0x04
 1d0:	8f 81       	ldd	r24, Y+7	; 0x07
 1d2:	98 85       	ldd	r25, Y+8	; 0x08
 1d4:	fc 01       	movw	r30, r24
 1d6:	81 81       	ldd	r24, Z+1	; 0x01
 1d8:	88 2f       	mov	r24, r24
 1da:	90 e0       	ldi	r25, 0x00	; 0
 1dc:	29 81       	ldd	r18, Y+1	; 0x01
 1de:	22 2f       	mov	r18, r18
 1e0:	30 e0       	ldi	r19, 0x00	; 0
 1e2:	02 c0       	rjmp	.+4      	; 0x1e8 <Init_GPIO+0xcc>
 1e4:	88 0f       	add	r24, r24
 1e6:	99 1f       	adc	r25, r25
 1e8:	2a 95       	dec	r18
 1ea:	e2 f7       	brpl	.-8      	; 0x1e4 <Init_GPIO+0xc8>
 1ec:	98 2f       	mov	r25, r24
 1ee:	8c 81       	ldd	r24, Y+4	; 0x04
 1f0:	89 2b       	or	r24, r25
 1f2:	8c 83       	std	Y+4, r24	; 0x04
 1f4:	8d 81       	ldd	r24, Y+5	; 0x05
 1f6:	9e 81       	ldd	r25, Y+6	; 0x06
 1f8:	2c 81       	ldd	r18, Y+4	; 0x04
 1fa:	fc 01       	movw	r30, r24
 1fc:	21 83       	std	Z+1, r18	; 0x01
 1fe:	8f 81       	ldd	r24, Y+7	; 0x07
 200:	98 85       	ldd	r25, Y+8	; 0x08
 202:	fc 01       	movw	r30, r24
 204:	81 81       	ldd	r24, Z+1	; 0x01
 206:	88 23       	and	r24, r24
 208:	0c f0       	brlt	.+2      	; 0x20c <Init_GPIO+0xf0>
 20a:	6b c0       	rjmp	.+214    	; 0x2e2 <Init_GPIO+0x1c6>
 20c:	8b 81       	ldd	r24, Y+3	; 0x03
 20e:	81 30       	cpi	r24, 0x01	; 1
 210:	19 f0       	breq	.+6      	; 0x218 <Init_GPIO+0xfc>
 212:	8b 81       	ldd	r24, Y+3	; 0x03
 214:	82 30       	cpi	r24, 0x02	; 2
 216:	b9 f5       	brne	.+110    	; 0x286 <Init_GPIO+0x16a>
 218:	85 e5       	ldi	r24, 0x55	; 85
 21a:	90 e0       	ldi	r25, 0x00	; 0
 21c:	fc 01       	movw	r30, r24
 21e:	80 81       	ld	r24, Z
 220:	8c 83       	std	Y+4, r24	; 0x04
 222:	8f 81       	ldd	r24, Y+7	; 0x07
 224:	98 85       	ldd	r25, Y+8	; 0x08
 226:	fc 01       	movw	r30, r24
 228:	81 81       	ldd	r24, Z+1	; 0x01
 22a:	88 2f       	mov	r24, r24
 22c:	90 e0       	ldi	r25, 0x00	; 0
 22e:	80 78       	andi	r24, 0x80	; 128
 230:	99 27       	eor	r25, r25
 232:	29 81       	ldd	r18, Y+1	; 0x01
 234:	22 2f       	mov	r18, r18
 236:	30 e0       	ldi	r19, 0x00	; 0
 238:	22 0f       	add	r18, r18
 23a:	33 1f       	adc	r19, r19
 23c:	02 c0       	rjmp	.+4      	; 0x242 <Init_GPIO+0x126>
 23e:	88 0f       	add	r24, r24
 240:	99 1f       	adc	r25, r25
 242:	2a 95       	dec	r18
 244:	e2 f7       	brpl	.-8      	; 0x23e <Init_GPIO+0x122>
 246:	98 2f       	mov	r25, r24
 248:	90 95       	com	r25
 24a:	8c 81       	ldd	r24, Y+4	; 0x04
 24c:	89 23       	and	r24, r25
 24e:	8c 83       	std	Y+4, r24	; 0x04
 250:	8f 81       	ldd	r24, Y+7	; 0x07
 252:	98 85       	ldd	r25, Y+8	; 0x08
 254:	fc 01       	movw	r30, r24
 256:	81 81       	ldd	r24, Z+1	; 0x01
 258:	88 2f       	mov	r24, r24
 25a:	90 e0       	ldi	r25, 0x00	; 0
 25c:	80 78       	andi	r24, 0x80	; 128
 25e:	99 27       	eor	r25, r25
 260:	29 81       	ldd	r18, Y+1	; 0x01
 262:	22 2f       	mov	r18, r18
 264:	30 e0       	ldi	r19, 0x00	; 0
 266:	22 0f       	add	r18, r18
 268:	33 1f       	adc	r19, r19
 26a:	02 c0       	rjmp	.+4      	; 0x270 <Init_GPIO+0x154>
 26c:	88 0f       	add	r24, r24
 26e:	99 1f       	adc	r25, r25
 270:	2a 95       	dec	r18
 272:	e2 f7       	brpl	.-8      	; 0x26c <Init_GPIO+0x150>
 274:	98 2f       	mov	r25, r24
 276:	8c 81       	ldd	r24, Y+4	; 0x04
 278:	89 2b       	or	r24, r25
 27a:	8c 83       	std	Y+4, r24	; 0x04
 27c:	85 e5       	ldi	r24, 0x55	; 85
 27e:	90 e0       	ldi	r25, 0x00	; 0
 280:	2c 81       	ldd	r18, Y+4	; 0x04
 282:	fc 01       	movw	r30, r24
 284:	20 83       	st	Z, r18
 286:	8b 81       	ldd	r24, Y+3	; 0x03
 288:	84 30       	cpi	r24, 0x04	; 4
 28a:	59 f5       	brne	.+86     	; 0x2e2 <Init_GPIO+0x1c6>
 28c:	84 e5       	ldi	r24, 0x54	; 84
 28e:	90 e0       	ldi	r25, 0x00	; 0
 290:	fc 01       	movw	r30, r24
 292:	80 81       	ld	r24, Z
 294:	8c 83       	std	Y+4, r24	; 0x04
 296:	8f 81       	ldd	r24, Y+7	; 0x07
 298:	98 85       	ldd	r25, Y+8	; 0x08
 29a:	fc 01       	movw	r30, r24
 29c:	81 81       	ldd	r24, Z+1	; 0x01
 29e:	82 78       	andi	r24, 0x82	; 130
 2a0:	82 95       	swap	r24
 2a2:	88 0f       	add	r24, r24
 2a4:	80 7e       	andi	r24, 0xE0	; 224
 2a6:	80 95       	com	r24
 2a8:	98 2f       	mov	r25, r24
 2aa:	8c 81       	ldd	r24, Y+4	; 0x04
 2ac:	89 23       	and	r24, r25
 2ae:	8c 83       	std	Y+4, r24	; 0x04
 2b0:	8f 81       	ldd	r24, Y+7	; 0x07
 2b2:	98 85       	ldd	r25, Y+8	; 0x08
 2b4:	fc 01       	movw	r30, r24
 2b6:	81 81       	ldd	r24, Z+1	; 0x01
 2b8:	88 2f       	mov	r24, r24
 2ba:	90 e0       	ldi	r25, 0x00	; 0
 2bc:	82 78       	andi	r24, 0x82	; 130
 2be:	99 27       	eor	r25, r25
 2c0:	88 0f       	add	r24, r24
 2c2:	99 1f       	adc	r25, r25
 2c4:	82 95       	swap	r24
 2c6:	92 95       	swap	r25
 2c8:	90 7f       	andi	r25, 0xF0	; 240
 2ca:	98 27       	eor	r25, r24
 2cc:	80 7f       	andi	r24, 0xF0	; 240
 2ce:	98 27       	eor	r25, r24
 2d0:	98 2f       	mov	r25, r24
 2d2:	8c 81       	ldd	r24, Y+4	; 0x04
 2d4:	89 2b       	or	r24, r25
 2d6:	8c 83       	std	Y+4, r24	; 0x04
 2d8:	84 e5       	ldi	r24, 0x54	; 84
 2da:	90 e0       	ldi	r25, 0x00	; 0
 2dc:	2c 81       	ldd	r18, Y+4	; 0x04
 2de:	fc 01       	movw	r30, r24
 2e0:	20 83       	st	Z, r18
 2e2:	89 81       	ldd	r24, Y+1	; 0x01
 2e4:	8f 5f       	subi	r24, 0xFF	; 255
 2e6:	89 83       	std	Y+1, r24	; 0x01
 2e8:	89 81       	ldd	r24, Y+1	; 0x01
 2ea:	88 30       	cpi	r24, 0x08	; 8
 2ec:	08 f4       	brcc	.+2      	; 0x2f0 <Init_GPIO+0x1d4>
 2ee:	3b cf       	rjmp	.-394    	; 0x166 <Init_GPIO+0x4a>
 2f0:	81 e0       	ldi	r24, 0x01	; 1
 2f2:	28 96       	adiw	r28, 0x08	; 8
 2f4:	0f b6       	in	r0, 0x3f	; 63
 2f6:	f8 94       	cli
 2f8:	de bf       	out	0x3e, r29	; 62
 2fa:	0f be       	out	0x3f, r0	; 63
 2fc:	cd bf       	out	0x3d, r28	; 61
 2fe:	df 91       	pop	r29
 300:	cf 91       	pop	r28
 302:	08 95       	ret

00000304 <Write_Port_Register>:
 304:	cf 93       	push	r28
 306:	df 93       	push	r29
 308:	00 d0       	rcall	.+0      	; 0x30a <Write_Port_Register+0x6>
 30a:	1f 92       	push	r1
 30c:	cd b7       	in	r28, 0x3d	; 61
 30e:	de b7       	in	r29, 0x3e	; 62
 310:	9a 83       	std	Y+2, r25	; 0x02
 312:	89 83       	std	Y+1, r24	; 0x01
 314:	6b 83       	std	Y+3, r22	; 0x03
 316:	89 81       	ldd	r24, Y+1	; 0x01
 318:	9a 81       	ldd	r25, Y+2	; 0x02
 31a:	c9 97       	sbiw	r24, 0x39	; 57
 31c:	61 f0       	breq	.+24     	; 0x336 <Write_Port_Register+0x32>
 31e:	89 81       	ldd	r24, Y+1	; 0x01
 320:	9a 81       	ldd	r25, Y+2	; 0x02
 322:	c6 97       	sbiw	r24, 0x36	; 54
 324:	41 f0       	breq	.+16     	; 0x336 <Write_Port_Register+0x32>
 326:	89 81       	ldd	r24, Y+1	; 0x01
 328:	9a 81       	ldd	r25, Y+2	; 0x02
 32a:	c3 97       	sbiw	r24, 0x33	; 51
 32c:	21 f0       	breq	.+8      	; 0x336 <Write_Port_Register+0x32>
 32e:	89 81       	ldd	r24, Y+1	; 0x01
 330:	9a 81       	ldd	r25, Y+2	; 0x02
 332:	c0 97       	sbiw	r24, 0x30	; 48
 334:	31 f4       	brne	.+12     	; 0x342 <Write_Port_Register+0x3e>
 336:	89 81       	ldd	r24, Y+1	; 0x01
 338:	9a 81       	ldd	r25, Y+2	; 0x02
 33a:	2b 81       	ldd	r18, Y+3	; 0x03
 33c:	fc 01       	movw	r30, r24
 33e:	22 83       	std	Z+2, r18	; 0x02
 340:	01 c0       	rjmp	.+2      	; 0x344 <Write_Port_Register+0x40>
 342:	00 00       	nop
 344:	0f 90       	pop	r0
 346:	0f 90       	pop	r0
 348:	0f 90       	pop	r0
 34a:	df 91       	pop	r29
 34c:	cf 91       	pop	r28
 34e:	08 95       	ret

00000350 <SPI_Init>:
    // Wait for transmission complate
    while(!(SPSR & (1 << SPIF)));
    // Select slave High
    Write_Pin(DDR_SPI,DD_SS,High);
    return SPDR;    
}
 350:	cf 93       	push	r28
 352:	df 93       	push	r29
 354:	00 d0       	rcall	.+0      	; 0x356 <SPI_Init+0x6>
 356:	00 d0       	rcall	.+0      	; 0x358 <SPI_Init+0x8>
 358:	1f 92       	push	r1
 35a:	cd b7       	in	r28, 0x3d	; 61
 35c:	de b7       	in	r29, 0x3e	; 62
 35e:	9d 83       	std	Y+5, r25	; 0x05
 360:	8c 83       	std	Y+4, r24	; 0x04
 362:	19 82       	std	Y+1, r1	; 0x01
 364:	1a 82       	std	Y+2, r1	; 0x02
 366:	1b 82       	std	Y+3, r1	; 0x03
 368:	8c 81       	ldd	r24, Y+4	; 0x04
 36a:	9d 81       	ldd	r25, Y+5	; 0x05
 36c:	fc 01       	movw	r30, r24
 36e:	82 81       	ldd	r24, Z+2	; 0x02
 370:	88 23       	and	r24, r24
 372:	b1 f0       	breq	.+44     	; 0x3a0 <SPI_Init+0x50>
 374:	81 e0       	ldi	r24, 0x01	; 1
 376:	8a 83       	std	Y+2, r24	; 0x02
 378:	80 eb       	ldi	r24, 0xB0	; 176
 37a:	89 83       	std	Y+1, r24	; 0x01
 37c:	ce 01       	movw	r24, r28
 37e:	01 96       	adiw	r24, 0x01	; 1
 380:	bc 01       	movw	r22, r24
 382:	86 e3       	ldi	r24, 0x36	; 54
 384:	90 e0       	ldi	r25, 0x00	; 0
 386:	0e 94 8e 00 	call	0x11c	; 0x11c <Init_GPIO>
 38a:	1a 82       	std	Y+2, r1	; 0x02
 38c:	80 e4       	ldi	r24, 0x40	; 64
 38e:	89 83       	std	Y+1, r24	; 0x01
 390:	ce 01       	movw	r24, r28
 392:	01 96       	adiw	r24, 0x01	; 1
 394:	bc 01       	movw	r22, r24
 396:	86 e3       	ldi	r24, 0x36	; 54
 398:	90 e0       	ldi	r25, 0x00	; 0
 39a:	0e 94 8e 00 	call	0x11c	; 0x11c <Init_GPIO>
 39e:	15 c0       	rjmp	.+42     	; 0x3ca <SPI_Init+0x7a>
 3a0:	1a 82       	std	Y+2, r1	; 0x02
 3a2:	80 eb       	ldi	r24, 0xB0	; 176
 3a4:	89 83       	std	Y+1, r24	; 0x01
 3a6:	ce 01       	movw	r24, r28
 3a8:	01 96       	adiw	r24, 0x01	; 1
 3aa:	bc 01       	movw	r22, r24
 3ac:	86 e3       	ldi	r24, 0x36	; 54
 3ae:	90 e0       	ldi	r25, 0x00	; 0
 3b0:	0e 94 8e 00 	call	0x11c	; 0x11c <Init_GPIO>
 3b4:	81 e0       	ldi	r24, 0x01	; 1
 3b6:	8a 83       	std	Y+2, r24	; 0x02
 3b8:	80 e4       	ldi	r24, 0x40	; 64
 3ba:	89 83       	std	Y+1, r24	; 0x01
 3bc:	ce 01       	movw	r24, r28
 3be:	01 96       	adiw	r24, 0x01	; 1
 3c0:	bc 01       	movw	r22, r24
 3c2:	86 e3       	ldi	r24, 0x36	; 54
 3c4:	90 e0       	ldi	r25, 0x00	; 0
 3c6:	0e 94 8e 00 	call	0x11c	; 0x11c <Init_GPIO>
 3ca:	8d e2       	ldi	r24, 0x2D	; 45
 3cc:	90 e0       	ldi	r25, 0x00	; 0
 3ce:	2c 81       	ldd	r18, Y+4	; 0x04
 3d0:	3d 81       	ldd	r19, Y+5	; 0x05
 3d2:	f9 01       	movw	r30, r18
 3d4:	42 81       	ldd	r20, Z+2	; 0x02
 3d6:	2c 81       	ldd	r18, Y+4	; 0x04
 3d8:	3d 81       	ldd	r19, Y+5	; 0x05
 3da:	f9 01       	movw	r30, r18
 3dc:	24 81       	ldd	r18, Z+4	; 0x04
 3de:	42 2b       	or	r20, r18
 3e0:	2c 81       	ldd	r18, Y+4	; 0x04
 3e2:	3d 81       	ldd	r19, Y+5	; 0x05
 3e4:	f9 01       	movw	r30, r18
 3e6:	21 81       	ldd	r18, Z+1	; 0x01
 3e8:	42 2b       	or	r20, r18
 3ea:	2c 81       	ldd	r18, Y+4	; 0x04
 3ec:	3d 81       	ldd	r19, Y+5	; 0x05
 3ee:	f9 01       	movw	r30, r18
 3f0:	20 81       	ld	r18, Z
 3f2:	42 2b       	or	r20, r18
 3f4:	2c 81       	ldd	r18, Y+4	; 0x04
 3f6:	3d 81       	ldd	r19, Y+5	; 0x05
 3f8:	f9 01       	movw	r30, r18
 3fa:	23 81       	ldd	r18, Z+3	; 0x03
 3fc:	24 2b       	or	r18, r20
 3fe:	20 64       	ori	r18, 0x40	; 64
 400:	fc 01       	movw	r30, r24
 402:	20 83       	st	Z, r18
 404:	81 e0       	ldi	r24, 0x01	; 1
 406:	0f 90       	pop	r0
 408:	0f 90       	pop	r0
 40a:	0f 90       	pop	r0
 40c:	0f 90       	pop	r0
 40e:	0f 90       	pop	r0
 410:	df 91       	pop	r29
 412:	cf 91       	pop	r28
 414:	08 95       	ret

00000416 <SPI_SlaveReceive_Char>:
 * @param data The data to be sent through SPI
 * @return uint8_t  0 : Fail
 *                  1 : Success 
 */
uint8_t SPI_SlaveReceive_Char(St_SPI_API *SPIx, uint8_t data)
{   
 416:	cf 93       	push	r28
 418:	df 93       	push	r29
 41a:	00 d0       	rcall	.+0      	; 0x41c <SPI_SlaveReceive_Char+0x6>
 41c:	1f 92       	push	r1
 41e:	cd b7       	in	r28, 0x3d	; 61
 420:	de b7       	in	r29, 0x3e	; 62
 422:	9a 83       	std	Y+2, r25	; 0x02
 424:	89 83       	std	Y+1, r24	; 0x01
 426:	6b 83       	std	Y+3, r22	; 0x03
    
    SPDR = data;
 428:	8f e2       	ldi	r24, 0x2F	; 47
 42a:	90 e0       	ldi	r25, 0x00	; 0
 42c:	2b 81       	ldd	r18, Y+3	; 0x03
 42e:	fc 01       	movw	r30, r24
 430:	20 83       	st	Z, r18
    // Wait for reception complate 
    while(!(SPSR & (1 << SPIF)));
 432:	00 00       	nop
 434:	8e e2       	ldi	r24, 0x2E	; 46
 436:	90 e0       	ldi	r25, 0x00	; 0
 438:	fc 01       	movw	r30, r24
 43a:	80 81       	ld	r24, Z
 43c:	88 23       	and	r24, r24
 43e:	d4 f7       	brge	.-12     	; 0x434 <SPI_SlaveReceive_Char+0x1e>
    // return Data 
    return SPDR;
 440:	8f e2       	ldi	r24, 0x2F	; 47
 442:	90 e0       	ldi	r25, 0x00	; 0
 444:	fc 01       	movw	r30, r24
 446:	80 81       	ld	r24, Z
}
 448:	0f 90       	pop	r0
 44a:	0f 90       	pop	r0
 44c:	0f 90       	pop	r0
 44e:	df 91       	pop	r29
 450:	cf 91       	pop	r28
 452:	08 95       	ret

00000454 <Uart_Receive>:
/**
 * @brief   Used to Receiv Data form UART by polling
 * @return  unsigned char: return received value 
 */
unsigned char *Uart_Receive(St_UART_driver *_init_uart)
{
 454:	cf 93       	push	r28
 456:	df 93       	push	r29
 458:	00 d0       	rcall	.+0      	; 0x45a <Uart_Receive+0x6>
 45a:	00 d0       	rcall	.+0      	; 0x45c <Uart_Receive+0x8>
 45c:	00 d0       	rcall	.+0      	; 0x45e <Uart_Receive+0xa>
 45e:	cd b7       	in	r28, 0x3d	; 61
 460:	de b7       	in	r29, 0x3e	; 62
 462:	9e 83       	std	Y+6, r25	; 0x06
 464:	8d 83       	std	Y+5, r24	; 0x05
    uint8_t index = 0;
 466:	19 82       	std	Y+1, r1	; 0x01
    unsigned char status, resh, resl;
    
    while(_init_uart->msg[index] != '#')
 468:	66 c0       	rjmp	.+204    	; 0x536 <Uart_Receive+0xe2>
    {
        
        while(!(UCSRA_R->UCSRA_field & (1 << RXC)));
 46a:	00 00       	nop
 46c:	8b e2       	ldi	r24, 0x2B	; 43
 46e:	90 e0       	ldi	r25, 0x00	; 0
 470:	fc 01       	movw	r30, r24
 472:	80 81       	ld	r24, Z
 474:	88 23       	and	r24, r24
 476:	d4 f7       	brge	.-12     	; 0x46c <Uart_Receive+0x18>

        status = UCSRA_R->UCSRA_field;
 478:	8b e2       	ldi	r24, 0x2B	; 43
 47a:	90 e0       	ldi	r25, 0x00	; 0
 47c:	fc 01       	movw	r30, r24
 47e:	80 81       	ld	r24, Z
 480:	8a 83       	std	Y+2, r24	; 0x02
        resh = UCSRB_R->UCSRB_field;
 482:	8a e2       	ldi	r24, 0x2A	; 42
 484:	90 e0       	ldi	r25, 0x00	; 0
 486:	fc 01       	movw	r30, r24
 488:	80 81       	ld	r24, Z
 48a:	8b 83       	std	Y+3, r24	; 0x03
        resl = UDR;
 48c:	8c e2       	ldi	r24, 0x2C	; 44
 48e:	90 e0       	ldi	r25, 0x00	; 0
 490:	fc 01       	movw	r30, r24
 492:	80 81       	ld	r24, Z
 494:	8c 83       	std	Y+4, r24	; 0x04

        if(status & ((1 << FE)|(1 << DOR)|(1 << PE)))
 496:	8a 81       	ldd	r24, Y+2	; 0x02
 498:	88 2f       	mov	r24, r24
 49a:	90 e0       	ldi	r25, 0x00	; 0
 49c:	8c 71       	andi	r24, 0x1C	; 28
 49e:	99 27       	eor	r25, r25
 4a0:	89 2b       	or	r24, r25
 4a2:	19 f0       	breq	.+6      	; 0x4aa <Uart_Receive+0x56>
            return -1;
 4a4:	8f ef       	ldi	r24, 0xFF	; 255
 4a6:	9f ef       	ldi	r25, 0xFF	; 255
 4a8:	55 c0       	rjmp	.+170    	; 0x554 <Uart_Receive+0x100>
        resh = (resh >> 1) & 0x01;
 4aa:	8b 81       	ldd	r24, Y+3	; 0x03
 4ac:	86 95       	lsr	r24
 4ae:	81 70       	andi	r24, 0x01	; 1
 4b0:	8b 83       	std	Y+3, r24	; 0x03
        if((index == 15) || (_init_uart->msg[index] == '#')){index = 0;}
 4b2:	89 81       	ldd	r24, Y+1	; 0x01
 4b4:	8f 30       	cpi	r24, 0x0F	; 15
 4b6:	71 f0       	breq	.+28     	; 0x4d4 <Uart_Receive+0x80>
 4b8:	8d 81       	ldd	r24, Y+5	; 0x05
 4ba:	9e 81       	ldd	r25, Y+6	; 0x06
 4bc:	fc 01       	movw	r30, r24
 4be:	21 85       	ldd	r18, Z+9	; 0x09
 4c0:	32 85       	ldd	r19, Z+10	; 0x0a
 4c2:	89 81       	ldd	r24, Y+1	; 0x01
 4c4:	88 2f       	mov	r24, r24
 4c6:	90 e0       	ldi	r25, 0x00	; 0
 4c8:	82 0f       	add	r24, r18
 4ca:	93 1f       	adc	r25, r19
 4cc:	fc 01       	movw	r30, r24
 4ce:	80 81       	ld	r24, Z
 4d0:	83 32       	cpi	r24, 0x23	; 35
 4d2:	09 f4       	brne	.+2      	; 0x4d6 <Uart_Receive+0x82>
 4d4:	19 82       	std	Y+1, r1	; 0x01
        _init_uart->msg[index] = ((resh << 8) | resl);
 4d6:	8d 81       	ldd	r24, Y+5	; 0x05
 4d8:	9e 81       	ldd	r25, Y+6	; 0x06
 4da:	fc 01       	movw	r30, r24
 4dc:	21 85       	ldd	r18, Z+9	; 0x09
 4de:	32 85       	ldd	r19, Z+10	; 0x0a
 4e0:	89 81       	ldd	r24, Y+1	; 0x01
 4e2:	88 2f       	mov	r24, r24
 4e4:	90 e0       	ldi	r25, 0x00	; 0
 4e6:	82 0f       	add	r24, r18
 4e8:	93 1f       	adc	r25, r19
 4ea:	2b 81       	ldd	r18, Y+3	; 0x03
 4ec:	22 2f       	mov	r18, r18
 4ee:	30 e0       	ldi	r19, 0x00	; 0
 4f0:	32 2f       	mov	r19, r18
 4f2:	22 27       	eor	r18, r18
 4f4:	32 2f       	mov	r19, r18
 4f6:	2c 81       	ldd	r18, Y+4	; 0x04
 4f8:	23 2b       	or	r18, r19
 4fa:	fc 01       	movw	r30, r24
 4fc:	20 83       	st	Z, r18
        if(_init_uart->msg[index] == '#') {return &_init_uart->msg[index];}
 4fe:	8d 81       	ldd	r24, Y+5	; 0x05
 500:	9e 81       	ldd	r25, Y+6	; 0x06
 502:	fc 01       	movw	r30, r24
 504:	21 85       	ldd	r18, Z+9	; 0x09
 506:	32 85       	ldd	r19, Z+10	; 0x0a
 508:	89 81       	ldd	r24, Y+1	; 0x01
 50a:	88 2f       	mov	r24, r24
 50c:	90 e0       	ldi	r25, 0x00	; 0
 50e:	82 0f       	add	r24, r18
 510:	93 1f       	adc	r25, r19
 512:	fc 01       	movw	r30, r24
 514:	80 81       	ld	r24, Z
 516:	83 32       	cpi	r24, 0x23	; 35
 518:	59 f4       	brne	.+22     	; 0x530 <Uart_Receive+0xdc>
 51a:	8d 81       	ldd	r24, Y+5	; 0x05
 51c:	9e 81       	ldd	r25, Y+6	; 0x06
 51e:	fc 01       	movw	r30, r24
 520:	21 85       	ldd	r18, Z+9	; 0x09
 522:	32 85       	ldd	r19, Z+10	; 0x0a
 524:	89 81       	ldd	r24, Y+1	; 0x01
 526:	88 2f       	mov	r24, r24
 528:	90 e0       	ldi	r25, 0x00	; 0
 52a:	82 0f       	add	r24, r18
 52c:	93 1f       	adc	r25, r19
 52e:	12 c0       	rjmp	.+36     	; 0x554 <Uart_Receive+0x100>
        index++;
 530:	89 81       	ldd	r24, Y+1	; 0x01
 532:	8f 5f       	subi	r24, 0xFF	; 255
 534:	89 83       	std	Y+1, r24	; 0x01
unsigned char *Uart_Receive(St_UART_driver *_init_uart)
{
    uint8_t index = 0;
    unsigned char status, resh, resl;
    
    while(_init_uart->msg[index] != '#')
 536:	8d 81       	ldd	r24, Y+5	; 0x05
 538:	9e 81       	ldd	r25, Y+6	; 0x06
 53a:	fc 01       	movw	r30, r24
 53c:	21 85       	ldd	r18, Z+9	; 0x09
 53e:	32 85       	ldd	r19, Z+10	; 0x0a
 540:	89 81       	ldd	r24, Y+1	; 0x01
 542:	88 2f       	mov	r24, r24
 544:	90 e0       	ldi	r25, 0x00	; 0
 546:	82 0f       	add	r24, r18
 548:	93 1f       	adc	r25, r19
 54a:	fc 01       	movw	r30, r24
 54c:	80 81       	ld	r24, Z
 54e:	83 32       	cpi	r24, 0x23	; 35
 550:	09 f0       	breq	.+2      	; 0x554 <Uart_Receive+0x100>
 552:	8b cf       	rjmp	.-234    	; 0x46a <Uart_Receive+0x16>
        index++;
    }
    

    
}
 554:	26 96       	adiw	r28, 0x06	; 6
 556:	0f b6       	in	r0, 0x3f	; 63
 558:	f8 94       	cli
 55a:	de bf       	out	0x3e, r29	; 62
 55c:	0f be       	out	0x3f, r0	; 63
 55e:	cd bf       	out	0x3d, r28	; 61
 560:	df 91       	pop	r29
 562:	cf 91       	pop	r28
 564:	08 95       	ret

00000566 <__vector_13>:

ISR(USART_RXC_vect)
{
 566:	1f 92       	push	r1
 568:	0f 92       	push	r0
 56a:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
 56e:	0f 92       	push	r0
 570:	11 24       	eor	r1, r1
 572:	2f 93       	push	r18
 574:	3f 93       	push	r19
 576:	4f 93       	push	r20
 578:	5f 93       	push	r21
 57a:	6f 93       	push	r22
 57c:	7f 93       	push	r23
 57e:	8f 93       	push	r24
 580:	9f 93       	push	r25
 582:	af 93       	push	r26
 584:	bf 93       	push	r27
 586:	ef 93       	push	r30
 588:	ff 93       	push	r31
 58a:	cf 93       	push	r28
 58c:	df 93       	push	r29
 58e:	cd b7       	in	r28, 0x3d	; 61
 590:	de b7       	in	r29, 0x3e	; 62
    Uart_Receive(&UART_Config);
 592:	81 e7       	ldi	r24, 0x71	; 113
 594:	90 e0       	ldi	r25, 0x00	; 0
 596:	0e 94 2a 02 	call	0x454	; 0x454 <Uart_Receive>
}
 59a:	00 00       	nop
 59c:	df 91       	pop	r29
 59e:	cf 91       	pop	r28
 5a0:	ff 91       	pop	r31
 5a2:	ef 91       	pop	r30
 5a4:	bf 91       	pop	r27
 5a6:	af 91       	pop	r26
 5a8:	9f 91       	pop	r25
 5aa:	8f 91       	pop	r24
 5ac:	7f 91       	pop	r23
 5ae:	6f 91       	pop	r22
 5b0:	5f 91       	pop	r21
 5b2:	4f 91       	pop	r20
 5b4:	3f 91       	pop	r19
 5b6:	2f 91       	pop	r18
 5b8:	0f 90       	pop	r0
 5ba:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
 5be:	0f 90       	pop	r0
 5c0:	1f 90       	pop	r1
 5c2:	18 95       	reti

000005c4 <__vector_15>:


ISR(USART_TXC_vect)
{
 5c4:	1f 92       	push	r1
 5c6:	0f 92       	push	r0
 5c8:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
 5cc:	0f 92       	push	r0
 5ce:	11 24       	eor	r1, r1
 5d0:	cf 93       	push	r28
 5d2:	df 93       	push	r29
 5d4:	cd b7       	in	r28, 0x3d	; 61
 5d6:	de b7       	in	r29, 0x3e	; 62

}
 5d8:	00 00       	nop
 5da:	df 91       	pop	r29
 5dc:	cf 91       	pop	r28
 5de:	0f 90       	pop	r0
 5e0:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
 5e4:	0f 90       	pop	r0
 5e6:	1f 90       	pop	r1
 5e8:	18 95       	reti

000005ea <__vector_14>:


ISR(USART_UDRE_vect)
{
 5ea:	1f 92       	push	r1
 5ec:	0f 92       	push	r0
 5ee:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
 5f2:	0f 92       	push	r0
 5f4:	11 24       	eor	r1, r1
 5f6:	2f 93       	push	r18
 5f8:	8f 93       	push	r24
 5fa:	9f 93       	push	r25
 5fc:	ef 93       	push	r30
 5fe:	ff 93       	push	r31
 600:	cf 93       	push	r28
 602:	df 93       	push	r29
 604:	cd b7       	in	r28, 0x3d	; 61
 606:	de b7       	in	r29, 0x3e	; 62
    UCSRB_R->UCSRB_bits.UDRIE_b = 0;
 608:	8a e2       	ldi	r24, 0x2A	; 42
 60a:	90 e0       	ldi	r25, 0x00	; 0
 60c:	fc 01       	movw	r30, r24
 60e:	20 81       	ld	r18, Z
 610:	2f 7d       	andi	r18, 0xDF	; 223
 612:	fc 01       	movw	r30, r24
 614:	20 83       	st	Z, r18
 616:	00 00       	nop
 618:	df 91       	pop	r29
 61a:	cf 91       	pop	r28
 61c:	ff 91       	pop	r31
 61e:	ef 91       	pop	r30
 620:	9f 91       	pop	r25
 622:	8f 91       	pop	r24
 624:	2f 91       	pop	r18
 626:	0f 90       	pop	r0
 628:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
 62c:	0f 90       	pop	r0
 62e:	1f 90       	pop	r1
 630:	18 95       	reti

00000632 <main>:
 632:	cf 93       	push	r28
 634:	df 93       	push	r29
 636:	cd b7       	in	r28, 0x3d	; 61
 638:	de b7       	in	r29, 0x3e	; 62
 63a:	0e 94 49 00 	call	0x92	; 0x92 <init>
 63e:	0e 94 61 00 	call	0xc2	; 0xc2 <program>
 642:	fd cf       	rjmp	.-6      	; 0x63e <main+0xc>

00000644 <_exit>:
 644:	f8 94       	cli

00000646 <__stop_program>:
 646:	ff cf       	rjmp	.-2      	; 0x646 <__stop_program>
