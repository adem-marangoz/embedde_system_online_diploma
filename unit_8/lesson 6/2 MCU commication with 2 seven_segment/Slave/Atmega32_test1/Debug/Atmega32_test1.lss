
Atmega32_test1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000066c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000c  00800060  0000066c  00000700  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000013  0080006c  0080006c  0000070c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000070c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000073c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000130  00000000  00000000  00000778  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001918  00000000  00000000  000008a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a71  00000000  00000000  000021c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c67  00000000  00000000  00002c31  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003b0  00000000  00000000  00003898  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a95  00000000  00000000  00003c48  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000760  00000000  00000000  000046dd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e0  00000000  00000000  00004e3d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 c5 02 	jmp	0x58a	; 0x58a <__vector_13>
  38:	0c 94 07 03 	jmp	0x60e	; 0x60e <__vector_14>
  3c:	0c 94 f4 02 	jmp	0x5e8	; 0x5e8 <__vector_15>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec e6       	ldi	r30, 0x6C	; 108
  68:	f6 e0       	ldi	r31, 0x06	; 6
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ac 36       	cpi	r26, 0x6C	; 108
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	ac e6       	ldi	r26, 0x6C	; 108
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	af 37       	cpi	r26, 0x7F	; 127
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 2b 03 	call	0x656	; 0x656 <main>
  8a:	0c 94 34 03 	jmp	0x668	; 0x668 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <init>:


uint8_t R_msg[16] = {0};

void init(void)
{
  92:	cf 93       	push	r28
  94:	df 93       	push	r29
  96:	00 d0       	rcall	.+0      	; 0x98 <init+0x6>
  98:	1f 92       	push	r1
  9a:	cd b7       	in	r28, 0x3d	; 61
  9c:	de b7       	in	r29, 0x3e	; 62
	// key_pad.output.Port = PORT_C;
	// key_pad.output.Pins =PIN_1|PIN_2|PIN_3|PIN_4;
	// Key_pad_init(&key_pad);

// Confige The SPI
	spi_confige.Data_Modes = Sample_Ris_Setup_Fall;
  9e:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__data_end+0x3>
	spi_confige.Data_Order = Data_Order_MSB;
  a2:	10 92 6d 00 	sts	0x006D, r1	; 0x80006d <__data_end+0x1>
	spi_confige.En_interrupt = Dis_SPI_Interrupt;
  a6:	10 92 6c 00 	sts	0x006C, r1	; 0x80006c <__data_end>
	spi_confige.Slave_Master = SPI_Slave;
  aa:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <__data_end+0x2>
	spi_confige.SPI_Freq = F_OSC_16;
  ae:	81 e0       	ldi	r24, 0x01	; 1
  b0:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__data_end+0x4>
	SPI_Init(&spi_confige);
  b4:	8c e6       	ldi	r24, 0x6C	; 108
  b6:	90 e0       	ldi	r25, 0x00	; 0
  b8:	0e 94 ba 01 	call	0x374	; 0x374 <SPI_Init>

// Confige The 7 Segment
	GPIO_config seven_seg_confige = {0};
  bc:	19 82       	std	Y+1, r1	; 0x01
  be:	1a 82       	std	Y+2, r1	; 0x02
  c0:	1b 82       	std	Y+3, r1	; 0x03
	seven_seg_confige.mode = OUTPUT;
  c2:	81 e0       	ldi	r24, 0x01	; 1
  c4:	8a 83       	std	Y+2, r24	; 0x02
	seven_seg_confige.pin = PIN_0 | PIN_1 | PIN_2 | PIN_3 | PIN_4 | PIN_5 | PIN_6 ;
  c6:	8f e7       	ldi	r24, 0x7F	; 127
  c8:	89 83       	std	Y+1, r24	; 0x01
	Init_GPIO(PORT_D, &seven_seg_confige);
  ca:	ce 01       	movw	r24, r28
  cc:	01 96       	adiw	r24, 0x01	; 1
  ce:	bc 01       	movw	r22, r24
  d0:	80 e3       	ldi	r24, 0x30	; 48
  d2:	90 e0       	ldi	r25, 0x00	; 0
  d4:	0e 94 a0 00 	call	0x140	; 0x140 <Init_GPIO>
	
	//unsigned char str[] = "You can do it \n\r";
	//Uart_Send_String(str);
	// Write_String(&Lcd_config,str);
	// Jump_to_coordinator(&Lcd_config,0,Seconde_R);
}
  d8:	00 00       	nop
  da:	0f 90       	pop	r0
  dc:	0f 90       	pop	r0
  de:	0f 90       	pop	r0
  e0:	df 91       	pop	r29
  e2:	cf 91       	pop	r28
  e4:	08 95       	ret

000000e6 <program>:

uint8_t *buffer_index = 0;
uint8_t SPI_Rx;
void program(void)
{ 	
  e6:	cf 93       	push	r28
  e8:	df 93       	push	r29
  ea:	cd b7       	in	r28, 0x3d	; 61
  ec:	de b7       	in	r29, 0x3e	; 62
		// 	Write_String(&Lcd_config,UART_Config.msg);
		// }	

	// Display charackter to 7 segment
		volatile static uint8_t counter = 2;
		if(counter < 10)
  ee:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <counter.2009>
  f2:	8a 30       	cpi	r24, 0x0A	; 10
  f4:	08 f5       	brcc	.+66     	; 0x138 <program+0x52>
		{
			SPI_Rx = SPI_SlaveReceive_Char(&spi_confige, numbers[counter]);
  f6:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <counter.2009>
  fa:	88 2f       	mov	r24, r24
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	80 5a       	subi	r24, 0xA0	; 160
 100:	9f 4f       	sbci	r25, 0xFF	; 255
 102:	fc 01       	movw	r30, r24
 104:	80 81       	ld	r24, Z
 106:	68 2f       	mov	r22, r24
 108:	8c e6       	ldi	r24, 0x6C	; 108
 10a:	90 e0       	ldi	r25, 0x00	; 0
 10c:	0e 94 1d 02 	call	0x43a	; 0x43a <SPI_SlaveReceive_Char>
 110:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <SPI_Rx>
			Write_Port_Register(PORT_D,SPI_Rx);
 114:	80 91 7e 00 	lds	r24, 0x007E	; 0x80007e <SPI_Rx>
 118:	68 2f       	mov	r22, r24
 11a:	80 e3       	ldi	r24, 0x30	; 48
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	0e 94 94 01 	call	0x328	; 0x328 <Write_Port_Register>
			counter ++;
 122:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <counter.2009>
 126:	8f 5f       	subi	r24, 0xFF	; 255
 128:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <counter.2009>
			if(counter == 10){counter = 0;}
 12c:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <counter.2009>
 130:	8a 30       	cpi	r24, 0x0A	; 10
 132:	11 f4       	brne	.+4      	; 0x138 <program+0x52>
 134:	10 92 6a 00 	sts	0x006A, r1	; 0x80006a <counter.2009>
		}
		//_delay_ms(1000);
}
 138:	00 00       	nop
 13a:	df 91       	pop	r29
 13c:	cf 91       	pop	r28
 13e:	08 95       	ret

00000140 <Init_GPIO>:
 140:	cf 93       	push	r28
 142:	df 93       	push	r29
 144:	cd b7       	in	r28, 0x3d	; 61
 146:	de b7       	in	r29, 0x3e	; 62
 148:	28 97       	sbiw	r28, 0x08	; 8
 14a:	0f b6       	in	r0, 0x3f	; 63
 14c:	f8 94       	cli
 14e:	de bf       	out	0x3e, r29	; 62
 150:	0f be       	out	0x3f, r0	; 63
 152:	cd bf       	out	0x3d, r28	; 61
 154:	9e 83       	std	Y+6, r25	; 0x06
 156:	8d 83       	std	Y+5, r24	; 0x05
 158:	78 87       	std	Y+8, r23	; 0x08
 15a:	6f 83       	std	Y+7, r22	; 0x07
 15c:	8d 81       	ldd	r24, Y+5	; 0x05
 15e:	9e 81       	ldd	r25, Y+6	; 0x06
 160:	c9 97       	sbiw	r24, 0x39	; 57
 162:	71 f0       	breq	.+28     	; 0x180 <Init_GPIO+0x40>
 164:	8d 81       	ldd	r24, Y+5	; 0x05
 166:	9e 81       	ldd	r25, Y+6	; 0x06
 168:	c6 97       	sbiw	r24, 0x36	; 54
 16a:	51 f0       	breq	.+20     	; 0x180 <Init_GPIO+0x40>
 16c:	8d 81       	ldd	r24, Y+5	; 0x05
 16e:	9e 81       	ldd	r25, Y+6	; 0x06
 170:	c3 97       	sbiw	r24, 0x33	; 51
 172:	31 f0       	breq	.+12     	; 0x180 <Init_GPIO+0x40>
 174:	8d 81       	ldd	r24, Y+5	; 0x05
 176:	9e 81       	ldd	r25, Y+6	; 0x06
 178:	c0 97       	sbiw	r24, 0x30	; 48
 17a:	11 f0       	breq	.+4      	; 0x180 <Init_GPIO+0x40>
 17c:	80 e0       	ldi	r24, 0x00	; 0
 17e:	cb c0       	rjmp	.+406    	; 0x316 <Init_GPIO+0x1d6>
 180:	1a 82       	std	Y+2, r1	; 0x02
 182:	1b 82       	std	Y+3, r1	; 0x03
 184:	1c 82       	std	Y+4, r1	; 0x04
 186:	19 82       	std	Y+1, r1	; 0x01
 188:	c1 c0       	rjmp	.+386    	; 0x30c <Init_GPIO+0x1cc>
 18a:	89 81       	ldd	r24, Y+1	; 0x01
 18c:	28 2f       	mov	r18, r24
 18e:	30 e0       	ldi	r19, 0x00	; 0
 190:	81 e0       	ldi	r24, 0x01	; 1
 192:	90 e0       	ldi	r25, 0x00	; 0
 194:	02 c0       	rjmp	.+4      	; 0x19a <Init_GPIO+0x5a>
 196:	88 0f       	add	r24, r24
 198:	99 1f       	adc	r25, r25
 19a:	2a 95       	dec	r18
 19c:	e2 f7       	brpl	.-8      	; 0x196 <Init_GPIO+0x56>
 19e:	8a 83       	std	Y+2, r24	; 0x02
 1a0:	8f 81       	ldd	r24, Y+7	; 0x07
 1a2:	98 85       	ldd	r25, Y+8	; 0x08
 1a4:	fc 01       	movw	r30, r24
 1a6:	90 81       	ld	r25, Z
 1a8:	8a 81       	ldd	r24, Y+2	; 0x02
 1aa:	89 23       	and	r24, r25
 1ac:	8b 83       	std	Y+3, r24	; 0x03
 1ae:	9a 81       	ldd	r25, Y+2	; 0x02
 1b0:	8b 81       	ldd	r24, Y+3	; 0x03
 1b2:	98 17       	cp	r25, r24
 1b4:	09 f0       	breq	.+2      	; 0x1b8 <Init_GPIO+0x78>
 1b6:	a7 c0       	rjmp	.+334    	; 0x306 <Init_GPIO+0x1c6>
 1b8:	8f 81       	ldd	r24, Y+7	; 0x07
 1ba:	98 85       	ldd	r25, Y+8	; 0x08
 1bc:	fc 01       	movw	r30, r24
 1be:	81 81       	ldd	r24, Z+1	; 0x01
 1c0:	81 30       	cpi	r24, 0x01	; 1
 1c2:	79 f5       	brne	.+94     	; 0x222 <Init_GPIO+0xe2>
 1c4:	8d 81       	ldd	r24, Y+5	; 0x05
 1c6:	9e 81       	ldd	r25, Y+6	; 0x06
 1c8:	fc 01       	movw	r30, r24
 1ca:	81 81       	ldd	r24, Z+1	; 0x01
 1cc:	8c 83       	std	Y+4, r24	; 0x04
 1ce:	8f 81       	ldd	r24, Y+7	; 0x07
 1d0:	98 85       	ldd	r25, Y+8	; 0x08
 1d2:	fc 01       	movw	r30, r24
 1d4:	81 81       	ldd	r24, Z+1	; 0x01
 1d6:	88 2f       	mov	r24, r24
 1d8:	90 e0       	ldi	r25, 0x00	; 0
 1da:	29 81       	ldd	r18, Y+1	; 0x01
 1dc:	22 2f       	mov	r18, r18
 1de:	30 e0       	ldi	r19, 0x00	; 0
 1e0:	02 c0       	rjmp	.+4      	; 0x1e6 <Init_GPIO+0xa6>
 1e2:	88 0f       	add	r24, r24
 1e4:	99 1f       	adc	r25, r25
 1e6:	2a 95       	dec	r18
 1e8:	e2 f7       	brpl	.-8      	; 0x1e2 <Init_GPIO+0xa2>
 1ea:	98 2f       	mov	r25, r24
 1ec:	90 95       	com	r25
 1ee:	8c 81       	ldd	r24, Y+4	; 0x04
 1f0:	89 23       	and	r24, r25
 1f2:	8c 83       	std	Y+4, r24	; 0x04
 1f4:	8f 81       	ldd	r24, Y+7	; 0x07
 1f6:	98 85       	ldd	r25, Y+8	; 0x08
 1f8:	fc 01       	movw	r30, r24
 1fa:	81 81       	ldd	r24, Z+1	; 0x01
 1fc:	88 2f       	mov	r24, r24
 1fe:	90 e0       	ldi	r25, 0x00	; 0
 200:	29 81       	ldd	r18, Y+1	; 0x01
 202:	22 2f       	mov	r18, r18
 204:	30 e0       	ldi	r19, 0x00	; 0
 206:	02 c0       	rjmp	.+4      	; 0x20c <Init_GPIO+0xcc>
 208:	88 0f       	add	r24, r24
 20a:	99 1f       	adc	r25, r25
 20c:	2a 95       	dec	r18
 20e:	e2 f7       	brpl	.-8      	; 0x208 <Init_GPIO+0xc8>
 210:	98 2f       	mov	r25, r24
 212:	8c 81       	ldd	r24, Y+4	; 0x04
 214:	89 2b       	or	r24, r25
 216:	8c 83       	std	Y+4, r24	; 0x04
 218:	8d 81       	ldd	r24, Y+5	; 0x05
 21a:	9e 81       	ldd	r25, Y+6	; 0x06
 21c:	2c 81       	ldd	r18, Y+4	; 0x04
 21e:	fc 01       	movw	r30, r24
 220:	21 83       	std	Z+1, r18	; 0x01
 222:	8f 81       	ldd	r24, Y+7	; 0x07
 224:	98 85       	ldd	r25, Y+8	; 0x08
 226:	fc 01       	movw	r30, r24
 228:	81 81       	ldd	r24, Z+1	; 0x01
 22a:	88 23       	and	r24, r24
 22c:	0c f0       	brlt	.+2      	; 0x230 <Init_GPIO+0xf0>
 22e:	6b c0       	rjmp	.+214    	; 0x306 <Init_GPIO+0x1c6>
 230:	8b 81       	ldd	r24, Y+3	; 0x03
 232:	81 30       	cpi	r24, 0x01	; 1
 234:	19 f0       	breq	.+6      	; 0x23c <Init_GPIO+0xfc>
 236:	8b 81       	ldd	r24, Y+3	; 0x03
 238:	82 30       	cpi	r24, 0x02	; 2
 23a:	b9 f5       	brne	.+110    	; 0x2aa <Init_GPIO+0x16a>
 23c:	85 e5       	ldi	r24, 0x55	; 85
 23e:	90 e0       	ldi	r25, 0x00	; 0
 240:	fc 01       	movw	r30, r24
 242:	80 81       	ld	r24, Z
 244:	8c 83       	std	Y+4, r24	; 0x04
 246:	8f 81       	ldd	r24, Y+7	; 0x07
 248:	98 85       	ldd	r25, Y+8	; 0x08
 24a:	fc 01       	movw	r30, r24
 24c:	81 81       	ldd	r24, Z+1	; 0x01
 24e:	88 2f       	mov	r24, r24
 250:	90 e0       	ldi	r25, 0x00	; 0
 252:	80 78       	andi	r24, 0x80	; 128
 254:	99 27       	eor	r25, r25
 256:	29 81       	ldd	r18, Y+1	; 0x01
 258:	22 2f       	mov	r18, r18
 25a:	30 e0       	ldi	r19, 0x00	; 0
 25c:	22 0f       	add	r18, r18
 25e:	33 1f       	adc	r19, r19
 260:	02 c0       	rjmp	.+4      	; 0x266 <Init_GPIO+0x126>
 262:	88 0f       	add	r24, r24
 264:	99 1f       	adc	r25, r25
 266:	2a 95       	dec	r18
 268:	e2 f7       	brpl	.-8      	; 0x262 <Init_GPIO+0x122>
 26a:	98 2f       	mov	r25, r24
 26c:	90 95       	com	r25
 26e:	8c 81       	ldd	r24, Y+4	; 0x04
 270:	89 23       	and	r24, r25
 272:	8c 83       	std	Y+4, r24	; 0x04
 274:	8f 81       	ldd	r24, Y+7	; 0x07
 276:	98 85       	ldd	r25, Y+8	; 0x08
 278:	fc 01       	movw	r30, r24
 27a:	81 81       	ldd	r24, Z+1	; 0x01
 27c:	88 2f       	mov	r24, r24
 27e:	90 e0       	ldi	r25, 0x00	; 0
 280:	80 78       	andi	r24, 0x80	; 128
 282:	99 27       	eor	r25, r25
 284:	29 81       	ldd	r18, Y+1	; 0x01
 286:	22 2f       	mov	r18, r18
 288:	30 e0       	ldi	r19, 0x00	; 0
 28a:	22 0f       	add	r18, r18
 28c:	33 1f       	adc	r19, r19
 28e:	02 c0       	rjmp	.+4      	; 0x294 <Init_GPIO+0x154>
 290:	88 0f       	add	r24, r24
 292:	99 1f       	adc	r25, r25
 294:	2a 95       	dec	r18
 296:	e2 f7       	brpl	.-8      	; 0x290 <Init_GPIO+0x150>
 298:	98 2f       	mov	r25, r24
 29a:	8c 81       	ldd	r24, Y+4	; 0x04
 29c:	89 2b       	or	r24, r25
 29e:	8c 83       	std	Y+4, r24	; 0x04
 2a0:	85 e5       	ldi	r24, 0x55	; 85
 2a2:	90 e0       	ldi	r25, 0x00	; 0
 2a4:	2c 81       	ldd	r18, Y+4	; 0x04
 2a6:	fc 01       	movw	r30, r24
 2a8:	20 83       	st	Z, r18
 2aa:	8b 81       	ldd	r24, Y+3	; 0x03
 2ac:	84 30       	cpi	r24, 0x04	; 4
 2ae:	59 f5       	brne	.+86     	; 0x306 <Init_GPIO+0x1c6>
 2b0:	84 e5       	ldi	r24, 0x54	; 84
 2b2:	90 e0       	ldi	r25, 0x00	; 0
 2b4:	fc 01       	movw	r30, r24
 2b6:	80 81       	ld	r24, Z
 2b8:	8c 83       	std	Y+4, r24	; 0x04
 2ba:	8f 81       	ldd	r24, Y+7	; 0x07
 2bc:	98 85       	ldd	r25, Y+8	; 0x08
 2be:	fc 01       	movw	r30, r24
 2c0:	81 81       	ldd	r24, Z+1	; 0x01
 2c2:	82 78       	andi	r24, 0x82	; 130
 2c4:	82 95       	swap	r24
 2c6:	88 0f       	add	r24, r24
 2c8:	80 7e       	andi	r24, 0xE0	; 224
 2ca:	80 95       	com	r24
 2cc:	98 2f       	mov	r25, r24
 2ce:	8c 81       	ldd	r24, Y+4	; 0x04
 2d0:	89 23       	and	r24, r25
 2d2:	8c 83       	std	Y+4, r24	; 0x04
 2d4:	8f 81       	ldd	r24, Y+7	; 0x07
 2d6:	98 85       	ldd	r25, Y+8	; 0x08
 2d8:	fc 01       	movw	r30, r24
 2da:	81 81       	ldd	r24, Z+1	; 0x01
 2dc:	88 2f       	mov	r24, r24
 2de:	90 e0       	ldi	r25, 0x00	; 0
 2e0:	82 78       	andi	r24, 0x82	; 130
 2e2:	99 27       	eor	r25, r25
 2e4:	88 0f       	add	r24, r24
 2e6:	99 1f       	adc	r25, r25
 2e8:	82 95       	swap	r24
 2ea:	92 95       	swap	r25
 2ec:	90 7f       	andi	r25, 0xF0	; 240
 2ee:	98 27       	eor	r25, r24
 2f0:	80 7f       	andi	r24, 0xF0	; 240
 2f2:	98 27       	eor	r25, r24
 2f4:	98 2f       	mov	r25, r24
 2f6:	8c 81       	ldd	r24, Y+4	; 0x04
 2f8:	89 2b       	or	r24, r25
 2fa:	8c 83       	std	Y+4, r24	; 0x04
 2fc:	84 e5       	ldi	r24, 0x54	; 84
 2fe:	90 e0       	ldi	r25, 0x00	; 0
 300:	2c 81       	ldd	r18, Y+4	; 0x04
 302:	fc 01       	movw	r30, r24
 304:	20 83       	st	Z, r18
 306:	89 81       	ldd	r24, Y+1	; 0x01
 308:	8f 5f       	subi	r24, 0xFF	; 255
 30a:	89 83       	std	Y+1, r24	; 0x01
 30c:	89 81       	ldd	r24, Y+1	; 0x01
 30e:	88 30       	cpi	r24, 0x08	; 8
 310:	08 f4       	brcc	.+2      	; 0x314 <Init_GPIO+0x1d4>
 312:	3b cf       	rjmp	.-394    	; 0x18a <Init_GPIO+0x4a>
 314:	81 e0       	ldi	r24, 0x01	; 1
 316:	28 96       	adiw	r28, 0x08	; 8
 318:	0f b6       	in	r0, 0x3f	; 63
 31a:	f8 94       	cli
 31c:	de bf       	out	0x3e, r29	; 62
 31e:	0f be       	out	0x3f, r0	; 63
 320:	cd bf       	out	0x3d, r28	; 61
 322:	df 91       	pop	r29
 324:	cf 91       	pop	r28
 326:	08 95       	ret

00000328 <Write_Port_Register>:
 328:	cf 93       	push	r28
 32a:	df 93       	push	r29
 32c:	00 d0       	rcall	.+0      	; 0x32e <Write_Port_Register+0x6>
 32e:	1f 92       	push	r1
 330:	cd b7       	in	r28, 0x3d	; 61
 332:	de b7       	in	r29, 0x3e	; 62
 334:	9a 83       	std	Y+2, r25	; 0x02
 336:	89 83       	std	Y+1, r24	; 0x01
 338:	6b 83       	std	Y+3, r22	; 0x03
 33a:	89 81       	ldd	r24, Y+1	; 0x01
 33c:	9a 81       	ldd	r25, Y+2	; 0x02
 33e:	c9 97       	sbiw	r24, 0x39	; 57
 340:	61 f0       	breq	.+24     	; 0x35a <Write_Port_Register+0x32>
 342:	89 81       	ldd	r24, Y+1	; 0x01
 344:	9a 81       	ldd	r25, Y+2	; 0x02
 346:	c6 97       	sbiw	r24, 0x36	; 54
 348:	41 f0       	breq	.+16     	; 0x35a <Write_Port_Register+0x32>
 34a:	89 81       	ldd	r24, Y+1	; 0x01
 34c:	9a 81       	ldd	r25, Y+2	; 0x02
 34e:	c3 97       	sbiw	r24, 0x33	; 51
 350:	21 f0       	breq	.+8      	; 0x35a <Write_Port_Register+0x32>
 352:	89 81       	ldd	r24, Y+1	; 0x01
 354:	9a 81       	ldd	r25, Y+2	; 0x02
 356:	c0 97       	sbiw	r24, 0x30	; 48
 358:	31 f4       	brne	.+12     	; 0x366 <Write_Port_Register+0x3e>
 35a:	89 81       	ldd	r24, Y+1	; 0x01
 35c:	9a 81       	ldd	r25, Y+2	; 0x02
 35e:	2b 81       	ldd	r18, Y+3	; 0x03
 360:	fc 01       	movw	r30, r24
 362:	22 83       	std	Z+2, r18	; 0x02
 364:	01 c0       	rjmp	.+2      	; 0x368 <Write_Port_Register+0x40>
 366:	00 00       	nop
 368:	0f 90       	pop	r0
 36a:	0f 90       	pop	r0
 36c:	0f 90       	pop	r0
 36e:	df 91       	pop	r29
 370:	cf 91       	pop	r28
 372:	08 95       	ret

00000374 <SPI_Init>:
    // Wait for transmission complate
    while(!(SPSR & (1 << SPIF)));
    // Select slave High
    Write_Pin(DDR_SPI,DD_SS,High);
    return SPDR;    
}
 374:	cf 93       	push	r28
 376:	df 93       	push	r29
 378:	00 d0       	rcall	.+0      	; 0x37a <SPI_Init+0x6>
 37a:	00 d0       	rcall	.+0      	; 0x37c <SPI_Init+0x8>
 37c:	1f 92       	push	r1
 37e:	cd b7       	in	r28, 0x3d	; 61
 380:	de b7       	in	r29, 0x3e	; 62
 382:	9d 83       	std	Y+5, r25	; 0x05
 384:	8c 83       	std	Y+4, r24	; 0x04
 386:	19 82       	std	Y+1, r1	; 0x01
 388:	1a 82       	std	Y+2, r1	; 0x02
 38a:	1b 82       	std	Y+3, r1	; 0x03
 38c:	8c 81       	ldd	r24, Y+4	; 0x04
 38e:	9d 81       	ldd	r25, Y+5	; 0x05
 390:	fc 01       	movw	r30, r24
 392:	82 81       	ldd	r24, Z+2	; 0x02
 394:	88 23       	and	r24, r24
 396:	b1 f0       	breq	.+44     	; 0x3c4 <SPI_Init+0x50>
 398:	81 e0       	ldi	r24, 0x01	; 1
 39a:	8a 83       	std	Y+2, r24	; 0x02
 39c:	80 eb       	ldi	r24, 0xB0	; 176
 39e:	89 83       	std	Y+1, r24	; 0x01
 3a0:	ce 01       	movw	r24, r28
 3a2:	01 96       	adiw	r24, 0x01	; 1
 3a4:	bc 01       	movw	r22, r24
 3a6:	86 e3       	ldi	r24, 0x36	; 54
 3a8:	90 e0       	ldi	r25, 0x00	; 0
 3aa:	0e 94 a0 00 	call	0x140	; 0x140 <Init_GPIO>
 3ae:	1a 82       	std	Y+2, r1	; 0x02
 3b0:	80 e4       	ldi	r24, 0x40	; 64
 3b2:	89 83       	std	Y+1, r24	; 0x01
 3b4:	ce 01       	movw	r24, r28
 3b6:	01 96       	adiw	r24, 0x01	; 1
 3b8:	bc 01       	movw	r22, r24
 3ba:	86 e3       	ldi	r24, 0x36	; 54
 3bc:	90 e0       	ldi	r25, 0x00	; 0
 3be:	0e 94 a0 00 	call	0x140	; 0x140 <Init_GPIO>
 3c2:	15 c0       	rjmp	.+42     	; 0x3ee <SPI_Init+0x7a>
 3c4:	1a 82       	std	Y+2, r1	; 0x02
 3c6:	80 eb       	ldi	r24, 0xB0	; 176
 3c8:	89 83       	std	Y+1, r24	; 0x01
 3ca:	ce 01       	movw	r24, r28
 3cc:	01 96       	adiw	r24, 0x01	; 1
 3ce:	bc 01       	movw	r22, r24
 3d0:	86 e3       	ldi	r24, 0x36	; 54
 3d2:	90 e0       	ldi	r25, 0x00	; 0
 3d4:	0e 94 a0 00 	call	0x140	; 0x140 <Init_GPIO>
 3d8:	81 e0       	ldi	r24, 0x01	; 1
 3da:	8a 83       	std	Y+2, r24	; 0x02
 3dc:	80 e4       	ldi	r24, 0x40	; 64
 3de:	89 83       	std	Y+1, r24	; 0x01
 3e0:	ce 01       	movw	r24, r28
 3e2:	01 96       	adiw	r24, 0x01	; 1
 3e4:	bc 01       	movw	r22, r24
 3e6:	86 e3       	ldi	r24, 0x36	; 54
 3e8:	90 e0       	ldi	r25, 0x00	; 0
 3ea:	0e 94 a0 00 	call	0x140	; 0x140 <Init_GPIO>
 3ee:	8d e2       	ldi	r24, 0x2D	; 45
 3f0:	90 e0       	ldi	r25, 0x00	; 0
 3f2:	2c 81       	ldd	r18, Y+4	; 0x04
 3f4:	3d 81       	ldd	r19, Y+5	; 0x05
 3f6:	f9 01       	movw	r30, r18
 3f8:	42 81       	ldd	r20, Z+2	; 0x02
 3fa:	2c 81       	ldd	r18, Y+4	; 0x04
 3fc:	3d 81       	ldd	r19, Y+5	; 0x05
 3fe:	f9 01       	movw	r30, r18
 400:	24 81       	ldd	r18, Z+4	; 0x04
 402:	42 2b       	or	r20, r18
 404:	2c 81       	ldd	r18, Y+4	; 0x04
 406:	3d 81       	ldd	r19, Y+5	; 0x05
 408:	f9 01       	movw	r30, r18
 40a:	21 81       	ldd	r18, Z+1	; 0x01
 40c:	42 2b       	or	r20, r18
 40e:	2c 81       	ldd	r18, Y+4	; 0x04
 410:	3d 81       	ldd	r19, Y+5	; 0x05
 412:	f9 01       	movw	r30, r18
 414:	20 81       	ld	r18, Z
 416:	42 2b       	or	r20, r18
 418:	2c 81       	ldd	r18, Y+4	; 0x04
 41a:	3d 81       	ldd	r19, Y+5	; 0x05
 41c:	f9 01       	movw	r30, r18
 41e:	23 81       	ldd	r18, Z+3	; 0x03
 420:	24 2b       	or	r18, r20
 422:	20 64       	ori	r18, 0x40	; 64
 424:	fc 01       	movw	r30, r24
 426:	20 83       	st	Z, r18
 428:	81 e0       	ldi	r24, 0x01	; 1
 42a:	0f 90       	pop	r0
 42c:	0f 90       	pop	r0
 42e:	0f 90       	pop	r0
 430:	0f 90       	pop	r0
 432:	0f 90       	pop	r0
 434:	df 91       	pop	r29
 436:	cf 91       	pop	r28
 438:	08 95       	ret

0000043a <SPI_SlaveReceive_Char>:
 * @param data The data to be sent through SPI
 * @return uint8_t  0 : Fail
 *                  1 : Success 
 */
uint8_t SPI_SlaveReceive_Char(St_SPI_API *SPIx, uint8_t data)
{   
 43a:	cf 93       	push	r28
 43c:	df 93       	push	r29
 43e:	00 d0       	rcall	.+0      	; 0x440 <SPI_SlaveReceive_Char+0x6>
 440:	1f 92       	push	r1
 442:	cd b7       	in	r28, 0x3d	; 61
 444:	de b7       	in	r29, 0x3e	; 62
 446:	9a 83       	std	Y+2, r25	; 0x02
 448:	89 83       	std	Y+1, r24	; 0x01
 44a:	6b 83       	std	Y+3, r22	; 0x03
    
    SPDR = data;
 44c:	8f e2       	ldi	r24, 0x2F	; 47
 44e:	90 e0       	ldi	r25, 0x00	; 0
 450:	2b 81       	ldd	r18, Y+3	; 0x03
 452:	fc 01       	movw	r30, r24
 454:	20 83       	st	Z, r18
    // Wait for reception complate 
    while(!(SPSR & (1 << SPIF)));
 456:	00 00       	nop
 458:	8e e2       	ldi	r24, 0x2E	; 46
 45a:	90 e0       	ldi	r25, 0x00	; 0
 45c:	fc 01       	movw	r30, r24
 45e:	80 81       	ld	r24, Z
 460:	88 23       	and	r24, r24
 462:	d4 f7       	brge	.-12     	; 0x458 <SPI_SlaveReceive_Char+0x1e>
    // return Data 
    return SPDR;
 464:	8f e2       	ldi	r24, 0x2F	; 47
 466:	90 e0       	ldi	r25, 0x00	; 0
 468:	fc 01       	movw	r30, r24
 46a:	80 81       	ld	r24, Z
}
 46c:	0f 90       	pop	r0
 46e:	0f 90       	pop	r0
 470:	0f 90       	pop	r0
 472:	df 91       	pop	r29
 474:	cf 91       	pop	r28
 476:	08 95       	ret

00000478 <Uart_Receive>:
/**
 * @brief   Used to Receiv Data form UART by polling
 * @return  unsigned char: return received value 
 */
unsigned char *Uart_Receive(St_UART_driver *_init_uart)
{
 478:	cf 93       	push	r28
 47a:	df 93       	push	r29
 47c:	00 d0       	rcall	.+0      	; 0x47e <Uart_Receive+0x6>
 47e:	00 d0       	rcall	.+0      	; 0x480 <Uart_Receive+0x8>
 480:	00 d0       	rcall	.+0      	; 0x482 <Uart_Receive+0xa>
 482:	cd b7       	in	r28, 0x3d	; 61
 484:	de b7       	in	r29, 0x3e	; 62
 486:	9e 83       	std	Y+6, r25	; 0x06
 488:	8d 83       	std	Y+5, r24	; 0x05
    uint8_t index = 0;
 48a:	19 82       	std	Y+1, r1	; 0x01
    unsigned char status, resh, resl;
    
    while(_init_uart->msg[index] != '#')
 48c:	66 c0       	rjmp	.+204    	; 0x55a <Uart_Receive+0xe2>
    {
        
        while(!(UCSRA_R->UCSRA_field & (1 << RXC)));
 48e:	00 00       	nop
 490:	8b e2       	ldi	r24, 0x2B	; 43
 492:	90 e0       	ldi	r25, 0x00	; 0
 494:	fc 01       	movw	r30, r24
 496:	80 81       	ld	r24, Z
 498:	88 23       	and	r24, r24
 49a:	d4 f7       	brge	.-12     	; 0x490 <Uart_Receive+0x18>

        status = UCSRA_R->UCSRA_field;
 49c:	8b e2       	ldi	r24, 0x2B	; 43
 49e:	90 e0       	ldi	r25, 0x00	; 0
 4a0:	fc 01       	movw	r30, r24
 4a2:	80 81       	ld	r24, Z
 4a4:	8a 83       	std	Y+2, r24	; 0x02
        resh = UCSRB_R->UCSRB_field;
 4a6:	8a e2       	ldi	r24, 0x2A	; 42
 4a8:	90 e0       	ldi	r25, 0x00	; 0
 4aa:	fc 01       	movw	r30, r24
 4ac:	80 81       	ld	r24, Z
 4ae:	8b 83       	std	Y+3, r24	; 0x03
        resl = UDR;
 4b0:	8c e2       	ldi	r24, 0x2C	; 44
 4b2:	90 e0       	ldi	r25, 0x00	; 0
 4b4:	fc 01       	movw	r30, r24
 4b6:	80 81       	ld	r24, Z
 4b8:	8c 83       	std	Y+4, r24	; 0x04

        if(status & ((1 << FE)|(1 << DOR)|(1 << PE)))
 4ba:	8a 81       	ldd	r24, Y+2	; 0x02
 4bc:	88 2f       	mov	r24, r24
 4be:	90 e0       	ldi	r25, 0x00	; 0
 4c0:	8c 71       	andi	r24, 0x1C	; 28
 4c2:	99 27       	eor	r25, r25
 4c4:	89 2b       	or	r24, r25
 4c6:	19 f0       	breq	.+6      	; 0x4ce <Uart_Receive+0x56>
            return -1;
 4c8:	8f ef       	ldi	r24, 0xFF	; 255
 4ca:	9f ef       	ldi	r25, 0xFF	; 255
 4cc:	55 c0       	rjmp	.+170    	; 0x578 <Uart_Receive+0x100>
        resh = (resh >> 1) & 0x01;
 4ce:	8b 81       	ldd	r24, Y+3	; 0x03
 4d0:	86 95       	lsr	r24
 4d2:	81 70       	andi	r24, 0x01	; 1
 4d4:	8b 83       	std	Y+3, r24	; 0x03
        if((index == 15) || (_init_uart->msg[index] == '#')){index = 0;}
 4d6:	89 81       	ldd	r24, Y+1	; 0x01
 4d8:	8f 30       	cpi	r24, 0x0F	; 15
 4da:	71 f0       	breq	.+28     	; 0x4f8 <Uart_Receive+0x80>
 4dc:	8d 81       	ldd	r24, Y+5	; 0x05
 4de:	9e 81       	ldd	r25, Y+6	; 0x06
 4e0:	fc 01       	movw	r30, r24
 4e2:	21 85       	ldd	r18, Z+9	; 0x09
 4e4:	32 85       	ldd	r19, Z+10	; 0x0a
 4e6:	89 81       	ldd	r24, Y+1	; 0x01
 4e8:	88 2f       	mov	r24, r24
 4ea:	90 e0       	ldi	r25, 0x00	; 0
 4ec:	82 0f       	add	r24, r18
 4ee:	93 1f       	adc	r25, r19
 4f0:	fc 01       	movw	r30, r24
 4f2:	80 81       	ld	r24, Z
 4f4:	83 32       	cpi	r24, 0x23	; 35
 4f6:	09 f4       	brne	.+2      	; 0x4fa <Uart_Receive+0x82>
 4f8:	19 82       	std	Y+1, r1	; 0x01
        _init_uart->msg[index] = ((resh << 8) | resl);
 4fa:	8d 81       	ldd	r24, Y+5	; 0x05
 4fc:	9e 81       	ldd	r25, Y+6	; 0x06
 4fe:	fc 01       	movw	r30, r24
 500:	21 85       	ldd	r18, Z+9	; 0x09
 502:	32 85       	ldd	r19, Z+10	; 0x0a
 504:	89 81       	ldd	r24, Y+1	; 0x01
 506:	88 2f       	mov	r24, r24
 508:	90 e0       	ldi	r25, 0x00	; 0
 50a:	82 0f       	add	r24, r18
 50c:	93 1f       	adc	r25, r19
 50e:	2b 81       	ldd	r18, Y+3	; 0x03
 510:	22 2f       	mov	r18, r18
 512:	30 e0       	ldi	r19, 0x00	; 0
 514:	32 2f       	mov	r19, r18
 516:	22 27       	eor	r18, r18
 518:	32 2f       	mov	r19, r18
 51a:	2c 81       	ldd	r18, Y+4	; 0x04
 51c:	23 2b       	or	r18, r19
 51e:	fc 01       	movw	r30, r24
 520:	20 83       	st	Z, r18
        if(_init_uart->msg[index] == '#') {return &_init_uart->msg[index];}
 522:	8d 81       	ldd	r24, Y+5	; 0x05
 524:	9e 81       	ldd	r25, Y+6	; 0x06
 526:	fc 01       	movw	r30, r24
 528:	21 85       	ldd	r18, Z+9	; 0x09
 52a:	32 85       	ldd	r19, Z+10	; 0x0a
 52c:	89 81       	ldd	r24, Y+1	; 0x01
 52e:	88 2f       	mov	r24, r24
 530:	90 e0       	ldi	r25, 0x00	; 0
 532:	82 0f       	add	r24, r18
 534:	93 1f       	adc	r25, r19
 536:	fc 01       	movw	r30, r24
 538:	80 81       	ld	r24, Z
 53a:	83 32       	cpi	r24, 0x23	; 35
 53c:	59 f4       	brne	.+22     	; 0x554 <Uart_Receive+0xdc>
 53e:	8d 81       	ldd	r24, Y+5	; 0x05
 540:	9e 81       	ldd	r25, Y+6	; 0x06
 542:	fc 01       	movw	r30, r24
 544:	21 85       	ldd	r18, Z+9	; 0x09
 546:	32 85       	ldd	r19, Z+10	; 0x0a
 548:	89 81       	ldd	r24, Y+1	; 0x01
 54a:	88 2f       	mov	r24, r24
 54c:	90 e0       	ldi	r25, 0x00	; 0
 54e:	82 0f       	add	r24, r18
 550:	93 1f       	adc	r25, r19
 552:	12 c0       	rjmp	.+36     	; 0x578 <Uart_Receive+0x100>
        index++;
 554:	89 81       	ldd	r24, Y+1	; 0x01
 556:	8f 5f       	subi	r24, 0xFF	; 255
 558:	89 83       	std	Y+1, r24	; 0x01
unsigned char *Uart_Receive(St_UART_driver *_init_uart)
{
    uint8_t index = 0;
    unsigned char status, resh, resl;
    
    while(_init_uart->msg[index] != '#')
 55a:	8d 81       	ldd	r24, Y+5	; 0x05
 55c:	9e 81       	ldd	r25, Y+6	; 0x06
 55e:	fc 01       	movw	r30, r24
 560:	21 85       	ldd	r18, Z+9	; 0x09
 562:	32 85       	ldd	r19, Z+10	; 0x0a
 564:	89 81       	ldd	r24, Y+1	; 0x01
 566:	88 2f       	mov	r24, r24
 568:	90 e0       	ldi	r25, 0x00	; 0
 56a:	82 0f       	add	r24, r18
 56c:	93 1f       	adc	r25, r19
 56e:	fc 01       	movw	r30, r24
 570:	80 81       	ld	r24, Z
 572:	83 32       	cpi	r24, 0x23	; 35
 574:	09 f0       	breq	.+2      	; 0x578 <Uart_Receive+0x100>
 576:	8b cf       	rjmp	.-234    	; 0x48e <Uart_Receive+0x16>
        index++;
    }
    

    
}
 578:	26 96       	adiw	r28, 0x06	; 6
 57a:	0f b6       	in	r0, 0x3f	; 63
 57c:	f8 94       	cli
 57e:	de bf       	out	0x3e, r29	; 62
 580:	0f be       	out	0x3f, r0	; 63
 582:	cd bf       	out	0x3d, r28	; 61
 584:	df 91       	pop	r29
 586:	cf 91       	pop	r28
 588:	08 95       	ret

0000058a <__vector_13>:

ISR(USART_RXC_vect)
{
 58a:	1f 92       	push	r1
 58c:	0f 92       	push	r0
 58e:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
 592:	0f 92       	push	r0
 594:	11 24       	eor	r1, r1
 596:	2f 93       	push	r18
 598:	3f 93       	push	r19
 59a:	4f 93       	push	r20
 59c:	5f 93       	push	r21
 59e:	6f 93       	push	r22
 5a0:	7f 93       	push	r23
 5a2:	8f 93       	push	r24
 5a4:	9f 93       	push	r25
 5a6:	af 93       	push	r26
 5a8:	bf 93       	push	r27
 5aa:	ef 93       	push	r30
 5ac:	ff 93       	push	r31
 5ae:	cf 93       	push	r28
 5b0:	df 93       	push	r29
 5b2:	cd b7       	in	r28, 0x3d	; 61
 5b4:	de b7       	in	r29, 0x3e	; 62
    Uart_Receive(&UART_Config);
 5b6:	81 e7       	ldi	r24, 0x71	; 113
 5b8:	90 e0       	ldi	r25, 0x00	; 0
 5ba:	0e 94 3c 02 	call	0x478	; 0x478 <Uart_Receive>
}
 5be:	00 00       	nop
 5c0:	df 91       	pop	r29
 5c2:	cf 91       	pop	r28
 5c4:	ff 91       	pop	r31
 5c6:	ef 91       	pop	r30
 5c8:	bf 91       	pop	r27
 5ca:	af 91       	pop	r26
 5cc:	9f 91       	pop	r25
 5ce:	8f 91       	pop	r24
 5d0:	7f 91       	pop	r23
 5d2:	6f 91       	pop	r22
 5d4:	5f 91       	pop	r21
 5d6:	4f 91       	pop	r20
 5d8:	3f 91       	pop	r19
 5da:	2f 91       	pop	r18
 5dc:	0f 90       	pop	r0
 5de:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
 5e2:	0f 90       	pop	r0
 5e4:	1f 90       	pop	r1
 5e6:	18 95       	reti

000005e8 <__vector_15>:


ISR(USART_TXC_vect)
{
 5e8:	1f 92       	push	r1
 5ea:	0f 92       	push	r0
 5ec:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
 5f0:	0f 92       	push	r0
 5f2:	11 24       	eor	r1, r1
 5f4:	cf 93       	push	r28
 5f6:	df 93       	push	r29
 5f8:	cd b7       	in	r28, 0x3d	; 61
 5fa:	de b7       	in	r29, 0x3e	; 62

}
 5fc:	00 00       	nop
 5fe:	df 91       	pop	r29
 600:	cf 91       	pop	r28
 602:	0f 90       	pop	r0
 604:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
 608:	0f 90       	pop	r0
 60a:	1f 90       	pop	r1
 60c:	18 95       	reti

0000060e <__vector_14>:


ISR(USART_UDRE_vect)
{
 60e:	1f 92       	push	r1
 610:	0f 92       	push	r0
 612:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
 616:	0f 92       	push	r0
 618:	11 24       	eor	r1, r1
 61a:	2f 93       	push	r18
 61c:	8f 93       	push	r24
 61e:	9f 93       	push	r25
 620:	ef 93       	push	r30
 622:	ff 93       	push	r31
 624:	cf 93       	push	r28
 626:	df 93       	push	r29
 628:	cd b7       	in	r28, 0x3d	; 61
 62a:	de b7       	in	r29, 0x3e	; 62
    UCSRB_R->UCSRB_bits.UDRIE_b = 0;
 62c:	8a e2       	ldi	r24, 0x2A	; 42
 62e:	90 e0       	ldi	r25, 0x00	; 0
 630:	fc 01       	movw	r30, r24
 632:	20 81       	ld	r18, Z
 634:	2f 7d       	andi	r18, 0xDF	; 223
 636:	fc 01       	movw	r30, r24
 638:	20 83       	st	Z, r18
 63a:	00 00       	nop
 63c:	df 91       	pop	r29
 63e:	cf 91       	pop	r28
 640:	ff 91       	pop	r31
 642:	ef 91       	pop	r30
 644:	9f 91       	pop	r25
 646:	8f 91       	pop	r24
 648:	2f 91       	pop	r18
 64a:	0f 90       	pop	r0
 64c:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
 650:	0f 90       	pop	r0
 652:	1f 90       	pop	r1
 654:	18 95       	reti

00000656 <main>:
 656:	cf 93       	push	r28
 658:	df 93       	push	r29
 65a:	cd b7       	in	r28, 0x3d	; 61
 65c:	de b7       	in	r29, 0x3e	; 62
 65e:	0e 94 49 00 	call	0x92	; 0x92 <init>
 662:	0e 94 73 00 	call	0xe6	; 0xe6 <program>
 666:	fd cf       	rjmp	.-6      	; 0x662 <main+0xc>

00000668 <_exit>:
 668:	f8 94       	cli

0000066a <__stop_program>:
 66a:	ff cf       	rjmp	.-2      	; 0x66a <__stop_program>
