
Atmega32_test1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000081a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000088e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000010  00800060  00800060  0000088e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000088e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000008c0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000198  00000000  00000000  000008fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001eb9  00000000  00000000  00000a94  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b83  00000000  00000000  0000294d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dcd  00000000  00000000  000034d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000061c  00000000  00000000  000042a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000e0b  00000000  00000000  000048bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000ce1  00000000  00000000  000056c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000138  00000000  00000000  000063a8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__vector_1>
   8:	0c 94 ac 00 	jmp	0x158	; 0x158 <__vector_2>
   c:	0c 94 dc 00 	jmp	0x1b8	; 0x1b8 <__vector_3>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 c9 02 	jmp	0x592	; 0x592 <__vector_10>
  2c:	0c 94 00 03 	jmp	0x600	; 0x600 <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 9c 03 	jmp	0x738	; 0x738 <__vector_13>
  38:	0c 94 de 03 	jmp	0x7bc	; 0x7bc <__vector_14>
  3c:	0c 94 cb 03 	jmp	0x796	; 0x796 <__vector_15>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea e1       	ldi	r30, 0x1A	; 26
  68:	f8 e0       	ldi	r31, 0x08	; 8
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 37       	cpi	r26, 0x70	; 112
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 02 04 	call	0x804	; 0x804 <main>
  8a:	0c 94 0b 04 	jmp	0x816	; 0x816 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <init>:
//_____________________________ MACRO Definition _______________________________
#define Master			1
//==============================================================================

void init(void)
{
  92:	cf 93       	push	r28
  94:	df 93       	push	r29
  96:	00 d0       	rcall	.+0      	; 0x98 <init+0x6>
  98:	1f 92       	push	r1
  9a:	cd b7       	in	r28, 0x3d	; 61
  9c:	de b7       	in	r29, 0x3e	; 62
	// ADC_Init(&adc1_config);
//==============================================================================


// ---------------------------- Normal Output ----------------------------------
	GPIO_config config_i_o = {0};
  9e:	19 82       	std	Y+1, r1	; 0x01
  a0:	1a 82       	std	Y+2, r1	; 0x02
  a2:	1b 82       	std	Y+3, r1	; 0x03
	config_i_o.pin = PIN_0;
  a4:	81 e0       	ldi	r24, 0x01	; 1
  a6:	89 83       	std	Y+1, r24	; 0x01
	config_i_o.mode = OUTPUT;
  a8:	81 e0       	ldi	r24, 0x01	; 1
  aa:	8a 83       	std	Y+2, r24	; 0x02
	Init_GPIO(PORT_A,&config_i_o);
  ac:	ce 01       	movw	r24, r28
  ae:	01 96       	adiw	r24, 0x01	; 1
  b0:	bc 01       	movw	r22, r24
  b2:	89 e3       	ldi	r24, 0x39	; 57
  b4:	90 e0       	ldi	r25, 0x00	; 0
  b6:	0e 94 0c 01 	call	0x218	; 0x218 <Init_GPIO>
// =============================================================================

// ---------------------------- PIR Sensor -------------------------------------
	Pir_config.Input_Port = PORT_D;
  ba:	80 e3       	ldi	r24, 0x30	; 48
  bc:	90 e0       	ldi	r25, 0x00	; 0
  be:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__data_end+0x1>
  c2:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_end>
	Pir_config.Input_Pin = PIN_2;
  c6:	84 e0       	ldi	r24, 0x04	; 4
  c8:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__data_end+0x2>
	Pir_config.method = interrupt;
  cc:	81 e0       	ldi	r24, 0x01	; 1
  ce:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <__data_end+0x3>
	Init_PIR(&Pir_config);
  d2:	80 e6       	ldi	r24, 0x60	; 96
  d4:	90 e0       	ldi	r25, 0x00	; 0
  d6:	0e 94 4c 02 	call	0x498	; 0x498 <Init_PIR>

//==============================================================================

}
  da:	00 00       	nop
  dc:	0f 90       	pop	r0
  de:	0f 90       	pop	r0
  e0:	0f 90       	pop	r0
  e2:	df 91       	pop	r29
  e4:	cf 91       	pop	r28
  e6:	08 95       	ret

000000e8 <program>:

void program(void)
{ 	
  e8:	cf 93       	push	r28
  ea:	df 93       	push	r29
  ec:	cd b7       	in	r28, 0x3d	; 61
  ee:	de b7       	in	r29, 0x3e	; 62

}
  f0:	00 00       	nop
  f2:	df 91       	pop	r29
  f4:	cf 91       	pop	r28
  f6:	08 95       	ret

000000f8 <__vector_1>:



ISR(INT0_vect)
{
  f8:	1f 92       	push	r1
  fa:	0f 92       	push	r0
  fc:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
 100:	0f 92       	push	r0
 102:	11 24       	eor	r1, r1
 104:	2f 93       	push	r18
 106:	3f 93       	push	r19
 108:	4f 93       	push	r20
 10a:	5f 93       	push	r21
 10c:	6f 93       	push	r22
 10e:	7f 93       	push	r23
 110:	8f 93       	push	r24
 112:	9f 93       	push	r25
 114:	af 93       	push	r26
 116:	bf 93       	push	r27
 118:	ef 93       	push	r30
 11a:	ff 93       	push	r31
 11c:	cf 93       	push	r28
 11e:	df 93       	push	r29
 120:	cd b7       	in	r28, 0x3d	; 61
 122:	de b7       	in	r29, 0x3e	; 62
    Toggle_pin(PORT_A,PIN_0);
 124:	61 e0       	ldi	r22, 0x01	; 1
 126:	89 e3       	ldi	r24, 0x39	; 57
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <Toggle_pin>
}
 12e:	00 00       	nop
 130:	df 91       	pop	r29
 132:	cf 91       	pop	r28
 134:	ff 91       	pop	r31
 136:	ef 91       	pop	r30
 138:	bf 91       	pop	r27
 13a:	af 91       	pop	r26
 13c:	9f 91       	pop	r25
 13e:	8f 91       	pop	r24
 140:	7f 91       	pop	r23
 142:	6f 91       	pop	r22
 144:	5f 91       	pop	r21
 146:	4f 91       	pop	r20
 148:	3f 91       	pop	r19
 14a:	2f 91       	pop	r18
 14c:	0f 90       	pop	r0
 14e:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
 152:	0f 90       	pop	r0
 154:	1f 90       	pop	r1
 156:	18 95       	reti

00000158 <__vector_2>:


ISR(INT1_vect)
{
 158:	1f 92       	push	r1
 15a:	0f 92       	push	r0
 15c:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
 160:	0f 92       	push	r0
 162:	11 24       	eor	r1, r1
 164:	2f 93       	push	r18
 166:	3f 93       	push	r19
 168:	4f 93       	push	r20
 16a:	5f 93       	push	r21
 16c:	6f 93       	push	r22
 16e:	7f 93       	push	r23
 170:	8f 93       	push	r24
 172:	9f 93       	push	r25
 174:	af 93       	push	r26
 176:	bf 93       	push	r27
 178:	ef 93       	push	r30
 17a:	ff 93       	push	r31
 17c:	cf 93       	push	r28
 17e:	df 93       	push	r29
 180:	cd b7       	in	r28, 0x3d	; 61
 182:	de b7       	in	r29, 0x3e	; 62
    Toggle_pin(PORT_A,PIN_0);
 184:	61 e0       	ldi	r22, 0x01	; 1
 186:	89 e3       	ldi	r24, 0x39	; 57
 188:	90 e0       	ldi	r25, 0x00	; 0
 18a:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <Toggle_pin>
}
 18e:	00 00       	nop
 190:	df 91       	pop	r29
 192:	cf 91       	pop	r28
 194:	ff 91       	pop	r31
 196:	ef 91       	pop	r30
 198:	bf 91       	pop	r27
 19a:	af 91       	pop	r26
 19c:	9f 91       	pop	r25
 19e:	8f 91       	pop	r24
 1a0:	7f 91       	pop	r23
 1a2:	6f 91       	pop	r22
 1a4:	5f 91       	pop	r21
 1a6:	4f 91       	pop	r20
 1a8:	3f 91       	pop	r19
 1aa:	2f 91       	pop	r18
 1ac:	0f 90       	pop	r0
 1ae:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
 1b2:	0f 90       	pop	r0
 1b4:	1f 90       	pop	r1
 1b6:	18 95       	reti

000001b8 <__vector_3>:


ISR(INT2_vect)
{
 1b8:	1f 92       	push	r1
 1ba:	0f 92       	push	r0
 1bc:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
 1c0:	0f 92       	push	r0
 1c2:	11 24       	eor	r1, r1
 1c4:	2f 93       	push	r18
 1c6:	3f 93       	push	r19
 1c8:	4f 93       	push	r20
 1ca:	5f 93       	push	r21
 1cc:	6f 93       	push	r22
 1ce:	7f 93       	push	r23
 1d0:	8f 93       	push	r24
 1d2:	9f 93       	push	r25
 1d4:	af 93       	push	r26
 1d6:	bf 93       	push	r27
 1d8:	ef 93       	push	r30
 1da:	ff 93       	push	r31
 1dc:	cf 93       	push	r28
 1de:	df 93       	push	r29
 1e0:	cd b7       	in	r28, 0x3d	; 61
 1e2:	de b7       	in	r29, 0x3e	; 62
    Toggle_pin(PORT_A,PIN_0);
 1e4:	61 e0       	ldi	r22, 0x01	; 1
 1e6:	89 e3       	ldi	r24, 0x39	; 57
 1e8:	90 e0       	ldi	r25, 0x00	; 0
 1ea:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <Toggle_pin>
 1ee:	00 00       	nop
 1f0:	df 91       	pop	r29
 1f2:	cf 91       	pop	r28
 1f4:	ff 91       	pop	r31
 1f6:	ef 91       	pop	r30
 1f8:	bf 91       	pop	r27
 1fa:	af 91       	pop	r26
 1fc:	9f 91       	pop	r25
 1fe:	8f 91       	pop	r24
 200:	7f 91       	pop	r23
 202:	6f 91       	pop	r22
 204:	5f 91       	pop	r21
 206:	4f 91       	pop	r20
 208:	3f 91       	pop	r19
 20a:	2f 91       	pop	r18
 20c:	0f 90       	pop	r0
 20e:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
 212:	0f 90       	pop	r0
 214:	1f 90       	pop	r1
 216:	18 95       	reti

00000218 <Init_GPIO>:
unsigned char Read_Pins(St_GPIO *GPIO)
{
	if(!(Check_PORT(GPIO))){return 0;}
	return (GPIO->Un_PINx.PINx);

}
 218:	cf 93       	push	r28
 21a:	df 93       	push	r29
 21c:	cd b7       	in	r28, 0x3d	; 61
 21e:	de b7       	in	r29, 0x3e	; 62
 220:	28 97       	sbiw	r28, 0x08	; 8
 222:	0f b6       	in	r0, 0x3f	; 63
 224:	f8 94       	cli
 226:	de bf       	out	0x3e, r29	; 62
 228:	0f be       	out	0x3f, r0	; 63
 22a:	cd bf       	out	0x3d, r28	; 61
 22c:	9e 83       	std	Y+6, r25	; 0x06
 22e:	8d 83       	std	Y+5, r24	; 0x05
 230:	78 87       	std	Y+8, r23	; 0x08
 232:	6f 83       	std	Y+7, r22	; 0x07
 234:	8d 81       	ldd	r24, Y+5	; 0x05
 236:	9e 81       	ldd	r25, Y+6	; 0x06
 238:	c9 97       	sbiw	r24, 0x39	; 57
 23a:	71 f0       	breq	.+28     	; 0x258 <Init_GPIO+0x40>
 23c:	8d 81       	ldd	r24, Y+5	; 0x05
 23e:	9e 81       	ldd	r25, Y+6	; 0x06
 240:	c6 97       	sbiw	r24, 0x36	; 54
 242:	51 f0       	breq	.+20     	; 0x258 <Init_GPIO+0x40>
 244:	8d 81       	ldd	r24, Y+5	; 0x05
 246:	9e 81       	ldd	r25, Y+6	; 0x06
 248:	c3 97       	sbiw	r24, 0x33	; 51
 24a:	31 f0       	breq	.+12     	; 0x258 <Init_GPIO+0x40>
 24c:	8d 81       	ldd	r24, Y+5	; 0x05
 24e:	9e 81       	ldd	r25, Y+6	; 0x06
 250:	c0 97       	sbiw	r24, 0x30	; 48
 252:	11 f0       	breq	.+4      	; 0x258 <Init_GPIO+0x40>
 254:	80 e0       	ldi	r24, 0x00	; 0
 256:	c5 c0       	rjmp	.+394    	; 0x3e2 <Init_GPIO+0x1ca>
 258:	1b 82       	std	Y+3, r1	; 0x03
 25a:	1c 82       	std	Y+4, r1	; 0x04
 25c:	19 82       	std	Y+1, r1	; 0x01
 25e:	1a 82       	std	Y+2, r1	; 0x02
 260:	bb c0       	rjmp	.+374    	; 0x3d8 <Init_GPIO+0x1c0>
 262:	8a 81       	ldd	r24, Y+2	; 0x02
 264:	28 2f       	mov	r18, r24
 266:	30 e0       	ldi	r19, 0x00	; 0
 268:	81 e0       	ldi	r24, 0x01	; 1
 26a:	90 e0       	ldi	r25, 0x00	; 0
 26c:	02 c0       	rjmp	.+4      	; 0x272 <Init_GPIO+0x5a>
 26e:	88 0f       	add	r24, r24
 270:	99 1f       	adc	r25, r25
 272:	2a 95       	dec	r18
 274:	e2 f7       	brpl	.-8      	; 0x26e <Init_GPIO+0x56>
 276:	8b 83       	std	Y+3, r24	; 0x03
 278:	8f 81       	ldd	r24, Y+7	; 0x07
 27a:	98 85       	ldd	r25, Y+8	; 0x08
 27c:	fc 01       	movw	r30, r24
 27e:	90 81       	ld	r25, Z
 280:	8b 81       	ldd	r24, Y+3	; 0x03
 282:	89 23       	and	r24, r25
 284:	8c 83       	std	Y+4, r24	; 0x04
 286:	9b 81       	ldd	r25, Y+3	; 0x03
 288:	8c 81       	ldd	r24, Y+4	; 0x04
 28a:	98 17       	cp	r25, r24
 28c:	09 f0       	breq	.+2      	; 0x290 <Init_GPIO+0x78>
 28e:	a1 c0       	rjmp	.+322    	; 0x3d2 <Init_GPIO+0x1ba>
 290:	8f 81       	ldd	r24, Y+7	; 0x07
 292:	98 85       	ldd	r25, Y+8	; 0x08
 294:	fc 01       	movw	r30, r24
 296:	81 81       	ldd	r24, Z+1	; 0x01
 298:	81 30       	cpi	r24, 0x01	; 1
 29a:	79 f5       	brne	.+94     	; 0x2fa <Init_GPIO+0xe2>
 29c:	8d 81       	ldd	r24, Y+5	; 0x05
 29e:	9e 81       	ldd	r25, Y+6	; 0x06
 2a0:	fc 01       	movw	r30, r24
 2a2:	81 81       	ldd	r24, Z+1	; 0x01
 2a4:	89 83       	std	Y+1, r24	; 0x01
 2a6:	8f 81       	ldd	r24, Y+7	; 0x07
 2a8:	98 85       	ldd	r25, Y+8	; 0x08
 2aa:	fc 01       	movw	r30, r24
 2ac:	81 81       	ldd	r24, Z+1	; 0x01
 2ae:	88 2f       	mov	r24, r24
 2b0:	90 e0       	ldi	r25, 0x00	; 0
 2b2:	2a 81       	ldd	r18, Y+2	; 0x02
 2b4:	22 2f       	mov	r18, r18
 2b6:	30 e0       	ldi	r19, 0x00	; 0
 2b8:	02 c0       	rjmp	.+4      	; 0x2be <Init_GPIO+0xa6>
 2ba:	88 0f       	add	r24, r24
 2bc:	99 1f       	adc	r25, r25
 2be:	2a 95       	dec	r18
 2c0:	e2 f7       	brpl	.-8      	; 0x2ba <Init_GPIO+0xa2>
 2c2:	98 2f       	mov	r25, r24
 2c4:	90 95       	com	r25
 2c6:	89 81       	ldd	r24, Y+1	; 0x01
 2c8:	89 23       	and	r24, r25
 2ca:	89 83       	std	Y+1, r24	; 0x01
 2cc:	8f 81       	ldd	r24, Y+7	; 0x07
 2ce:	98 85       	ldd	r25, Y+8	; 0x08
 2d0:	fc 01       	movw	r30, r24
 2d2:	81 81       	ldd	r24, Z+1	; 0x01
 2d4:	88 2f       	mov	r24, r24
 2d6:	90 e0       	ldi	r25, 0x00	; 0
 2d8:	2a 81       	ldd	r18, Y+2	; 0x02
 2da:	22 2f       	mov	r18, r18
 2dc:	30 e0       	ldi	r19, 0x00	; 0
 2de:	02 c0       	rjmp	.+4      	; 0x2e4 <Init_GPIO+0xcc>
 2e0:	88 0f       	add	r24, r24
 2e2:	99 1f       	adc	r25, r25
 2e4:	2a 95       	dec	r18
 2e6:	e2 f7       	brpl	.-8      	; 0x2e0 <Init_GPIO+0xc8>
 2e8:	98 2f       	mov	r25, r24
 2ea:	89 81       	ldd	r24, Y+1	; 0x01
 2ec:	89 2b       	or	r24, r25
 2ee:	89 83       	std	Y+1, r24	; 0x01
 2f0:	8d 81       	ldd	r24, Y+5	; 0x05
 2f2:	9e 81       	ldd	r25, Y+6	; 0x06
 2f4:	29 81       	ldd	r18, Y+1	; 0x01
 2f6:	fc 01       	movw	r30, r24
 2f8:	21 83       	std	Z+1, r18	; 0x01
 2fa:	8f 81       	ldd	r24, Y+7	; 0x07
 2fc:	98 85       	ldd	r25, Y+8	; 0x08
 2fe:	fc 01       	movw	r30, r24
 300:	81 81       	ldd	r24, Z+1	; 0x01
 302:	88 23       	and	r24, r24
 304:	0c f0       	brlt	.+2      	; 0x308 <Init_GPIO+0xf0>
 306:	65 c0       	rjmp	.+202    	; 0x3d2 <Init_GPIO+0x1ba>
 308:	8d 81       	ldd	r24, Y+5	; 0x05
 30a:	9e 81       	ldd	r25, Y+6	; 0x06
 30c:	c0 97       	sbiw	r24, 0x30	; 48
 30e:	79 f5       	brne	.+94     	; 0x36e <Init_GPIO+0x156>
 310:	85 e5       	ldi	r24, 0x55	; 85
 312:	90 e0       	ldi	r25, 0x00	; 0
 314:	fc 01       	movw	r30, r24
 316:	80 81       	ld	r24, Z
 318:	89 83       	std	Y+1, r24	; 0x01
 31a:	8c 81       	ldd	r24, Y+4	; 0x04
 31c:	84 30       	cpi	r24, 0x04	; 4
 31e:	69 f4       	brne	.+26     	; 0x33a <Init_GPIO+0x122>
 320:	89 81       	ldd	r24, Y+1	; 0x01
 322:	8c 7f       	andi	r24, 0xFC	; 252
 324:	89 83       	std	Y+1, r24	; 0x01
 326:	8f 81       	ldd	r24, Y+7	; 0x07
 328:	98 85       	ldd	r25, Y+8	; 0x08
 32a:	fc 01       	movw	r30, r24
 32c:	81 81       	ldd	r24, Z+1	; 0x01
 32e:	98 2f       	mov	r25, r24
 330:	93 70       	andi	r25, 0x03	; 3
 332:	89 81       	ldd	r24, Y+1	; 0x01
 334:	89 2b       	or	r24, r25
 336:	89 83       	std	Y+1, r24	; 0x01
 338:	15 c0       	rjmp	.+42     	; 0x364 <Init_GPIO+0x14c>
 33a:	8c 81       	ldd	r24, Y+4	; 0x04
 33c:	88 30       	cpi	r24, 0x08	; 8
 33e:	91 f4       	brne	.+36     	; 0x364 <Init_GPIO+0x14c>
 340:	89 81       	ldd	r24, Y+1	; 0x01
 342:	83 7f       	andi	r24, 0xF3	; 243
 344:	89 83       	std	Y+1, r24	; 0x01
 346:	8f 81       	ldd	r24, Y+7	; 0x07
 348:	98 85       	ldd	r25, Y+8	; 0x08
 34a:	fc 01       	movw	r30, r24
 34c:	81 81       	ldd	r24, Z+1	; 0x01
 34e:	88 2f       	mov	r24, r24
 350:	90 e0       	ldi	r25, 0x00	; 0
 352:	88 0f       	add	r24, r24
 354:	99 1f       	adc	r25, r25
 356:	88 0f       	add	r24, r24
 358:	99 1f       	adc	r25, r25
 35a:	98 2f       	mov	r25, r24
 35c:	9c 70       	andi	r25, 0x0C	; 12
 35e:	89 81       	ldd	r24, Y+1	; 0x01
 360:	89 2b       	or	r24, r25
 362:	89 83       	std	Y+1, r24	; 0x01
 364:	85 e5       	ldi	r24, 0x55	; 85
 366:	90 e0       	ldi	r25, 0x00	; 0
 368:	29 81       	ldd	r18, Y+1	; 0x01
 36a:	fc 01       	movw	r30, r24
 36c:	20 83       	st	Z, r18
 36e:	8c 81       	ldd	r24, Y+4	; 0x04
 370:	84 30       	cpi	r24, 0x04	; 4
 372:	79 f5       	brne	.+94     	; 0x3d2 <Init_GPIO+0x1ba>
 374:	8d 81       	ldd	r24, Y+5	; 0x05
 376:	9e 81       	ldd	r25, Y+6	; 0x06
 378:	c6 97       	sbiw	r24, 0x36	; 54
 37a:	59 f5       	brne	.+86     	; 0x3d2 <Init_GPIO+0x1ba>
 37c:	84 e5       	ldi	r24, 0x54	; 84
 37e:	90 e0       	ldi	r25, 0x00	; 0
 380:	fc 01       	movw	r30, r24
 382:	80 81       	ld	r24, Z
 384:	89 83       	std	Y+1, r24	; 0x01
 386:	8f 81       	ldd	r24, Y+7	; 0x07
 388:	98 85       	ldd	r25, Y+8	; 0x08
 38a:	fc 01       	movw	r30, r24
 38c:	81 81       	ldd	r24, Z+1	; 0x01
 38e:	82 78       	andi	r24, 0x82	; 130
 390:	82 95       	swap	r24
 392:	88 0f       	add	r24, r24
 394:	80 7e       	andi	r24, 0xE0	; 224
 396:	80 95       	com	r24
 398:	98 2f       	mov	r25, r24
 39a:	89 81       	ldd	r24, Y+1	; 0x01
 39c:	89 23       	and	r24, r25
 39e:	89 83       	std	Y+1, r24	; 0x01
 3a0:	8f 81       	ldd	r24, Y+7	; 0x07
 3a2:	98 85       	ldd	r25, Y+8	; 0x08
 3a4:	fc 01       	movw	r30, r24
 3a6:	81 81       	ldd	r24, Z+1	; 0x01
 3a8:	88 2f       	mov	r24, r24
 3aa:	90 e0       	ldi	r25, 0x00	; 0
 3ac:	82 78       	andi	r24, 0x82	; 130
 3ae:	99 27       	eor	r25, r25
 3b0:	88 0f       	add	r24, r24
 3b2:	99 1f       	adc	r25, r25
 3b4:	82 95       	swap	r24
 3b6:	92 95       	swap	r25
 3b8:	90 7f       	andi	r25, 0xF0	; 240
 3ba:	98 27       	eor	r25, r24
 3bc:	80 7f       	andi	r24, 0xF0	; 240
 3be:	98 27       	eor	r25, r24
 3c0:	98 2f       	mov	r25, r24
 3c2:	89 81       	ldd	r24, Y+1	; 0x01
 3c4:	89 2b       	or	r24, r25
 3c6:	89 83       	std	Y+1, r24	; 0x01
 3c8:	84 e5       	ldi	r24, 0x54	; 84
 3ca:	90 e0       	ldi	r25, 0x00	; 0
 3cc:	29 81       	ldd	r18, Y+1	; 0x01
 3ce:	fc 01       	movw	r30, r24
 3d0:	20 83       	st	Z, r18
 3d2:	8a 81       	ldd	r24, Y+2	; 0x02
 3d4:	8f 5f       	subi	r24, 0xFF	; 255
 3d6:	8a 83       	std	Y+2, r24	; 0x02
 3d8:	8a 81       	ldd	r24, Y+2	; 0x02
 3da:	88 30       	cpi	r24, 0x08	; 8
 3dc:	08 f4       	brcc	.+2      	; 0x3e0 <Init_GPIO+0x1c8>
 3de:	41 cf       	rjmp	.-382    	; 0x262 <Init_GPIO+0x4a>
 3e0:	81 e0       	ldi	r24, 0x01	; 1
 3e2:	28 96       	adiw	r28, 0x08	; 8
 3e4:	0f b6       	in	r0, 0x3f	; 63
 3e6:	f8 94       	cli
 3e8:	de bf       	out	0x3e, r29	; 62
 3ea:	0f be       	out	0x3f, r0	; 63
 3ec:	cd bf       	out	0x3d, r28	; 61
 3ee:	df 91       	pop	r29
 3f0:	cf 91       	pop	r28
 3f2:	08 95       	ret

000003f4 <Toggle_pin>:

void Toggle_pin(St_GPIO *GPIO,unsigned char Pin)
{
 3f4:	cf 93       	push	r28
 3f6:	df 93       	push	r29
 3f8:	00 d0       	rcall	.+0      	; 0x3fa <Toggle_pin+0x6>
 3fa:	1f 92       	push	r1
 3fc:	cd b7       	in	r28, 0x3d	; 61
 3fe:	de b7       	in	r29, 0x3e	; 62
 400:	9a 83       	std	Y+2, r25	; 0x02
 402:	89 83       	std	Y+1, r24	; 0x01
 404:	6b 83       	std	Y+3, r22	; 0x03
	if(!(Check_PORT(GPIO))){return;}
 406:	89 81       	ldd	r24, Y+1	; 0x01
 408:	9a 81       	ldd	r25, Y+2	; 0x02
 40a:	c9 97       	sbiw	r24, 0x39	; 57
 40c:	61 f0       	breq	.+24     	; 0x426 <__EEPROM_REGION_LENGTH__+0x26>
 40e:	89 81       	ldd	r24, Y+1	; 0x01
 410:	9a 81       	ldd	r25, Y+2	; 0x02
 412:	c6 97       	sbiw	r24, 0x36	; 54
 414:	41 f0       	breq	.+16     	; 0x426 <__EEPROM_REGION_LENGTH__+0x26>
 416:	89 81       	ldd	r24, Y+1	; 0x01
 418:	9a 81       	ldd	r25, Y+2	; 0x02
 41a:	c3 97       	sbiw	r24, 0x33	; 51
 41c:	21 f0       	breq	.+8      	; 0x426 <__EEPROM_REGION_LENGTH__+0x26>
 41e:	89 81       	ldd	r24, Y+1	; 0x01
 420:	9a 81       	ldd	r25, Y+2	; 0x02
 422:	c0 97       	sbiw	r24, 0x30	; 48
 424:	61 f4       	brne	.+24     	; 0x43e <__EEPROM_REGION_LENGTH__+0x3e>

	GPIO->Un_PORTx.PORTx ^= Pin;
 426:	89 81       	ldd	r24, Y+1	; 0x01
 428:	9a 81       	ldd	r25, Y+2	; 0x02
 42a:	fc 01       	movw	r30, r24
 42c:	92 81       	ldd	r25, Z+2	; 0x02
 42e:	8b 81       	ldd	r24, Y+3	; 0x03
 430:	29 2f       	mov	r18, r25
 432:	28 27       	eor	r18, r24
 434:	89 81       	ldd	r24, Y+1	; 0x01
 436:	9a 81       	ldd	r25, Y+2	; 0x02
 438:	fc 01       	movw	r30, r24
 43a:	22 83       	std	Z+2, r18	; 0x02
 43c:	01 c0       	rjmp	.+2      	; 0x440 <__EEPROM_REGION_LENGTH__+0x40>

}

void Toggle_pin(St_GPIO *GPIO,unsigned char Pin)
{
	if(!(Check_PORT(GPIO))){return;}
 43e:	00 00       	nop

	GPIO->Un_PORTx.PORTx ^= Pin;
}
 440:	0f 90       	pop	r0
 442:	0f 90       	pop	r0
 444:	0f 90       	pop	r0
 446:	df 91       	pop	r29
 448:	cf 91       	pop	r28
 44a:	08 95       	ret

0000044c <Write_Port_Register>:

void Write_Port_Register(St_GPIO *GPIO,unsigned char Pin)
{
 44c:	cf 93       	push	r28
 44e:	df 93       	push	r29
 450:	00 d0       	rcall	.+0      	; 0x452 <Write_Port_Register+0x6>
 452:	1f 92       	push	r1
 454:	cd b7       	in	r28, 0x3d	; 61
 456:	de b7       	in	r29, 0x3e	; 62
 458:	9a 83       	std	Y+2, r25	; 0x02
 45a:	89 83       	std	Y+1, r24	; 0x01
 45c:	6b 83       	std	Y+3, r22	; 0x03
	if(!(Check_PORT(GPIO))){return;}
 45e:	89 81       	ldd	r24, Y+1	; 0x01
 460:	9a 81       	ldd	r25, Y+2	; 0x02
 462:	c9 97       	sbiw	r24, 0x39	; 57
 464:	61 f0       	breq	.+24     	; 0x47e <Write_Port_Register+0x32>
 466:	89 81       	ldd	r24, Y+1	; 0x01
 468:	9a 81       	ldd	r25, Y+2	; 0x02
 46a:	c6 97       	sbiw	r24, 0x36	; 54
 46c:	41 f0       	breq	.+16     	; 0x47e <Write_Port_Register+0x32>
 46e:	89 81       	ldd	r24, Y+1	; 0x01
 470:	9a 81       	ldd	r25, Y+2	; 0x02
 472:	c3 97       	sbiw	r24, 0x33	; 51
 474:	21 f0       	breq	.+8      	; 0x47e <Write_Port_Register+0x32>
 476:	89 81       	ldd	r24, Y+1	; 0x01
 478:	9a 81       	ldd	r25, Y+2	; 0x02
 47a:	c0 97       	sbiw	r24, 0x30	; 48
 47c:	31 f4       	brne	.+12     	; 0x48a <Write_Port_Register+0x3e>
	GPIO->Un_PORTx.PORTx = Pin;
 47e:	89 81       	ldd	r24, Y+1	; 0x01
 480:	9a 81       	ldd	r25, Y+2	; 0x02
 482:	2b 81       	ldd	r18, Y+3	; 0x03
 484:	fc 01       	movw	r30, r24
 486:	22 83       	std	Z+2, r18	; 0x02
 488:	01 c0       	rjmp	.+2      	; 0x48c <Write_Port_Register+0x40>
	GPIO->Un_PORTx.PORTx ^= Pin;
}

void Write_Port_Register(St_GPIO *GPIO,unsigned char Pin)
{
	if(!(Check_PORT(GPIO))){return;}
 48a:	00 00       	nop
	GPIO->Un_PORTx.PORTx = Pin;
}
 48c:	0f 90       	pop	r0
 48e:	0f 90       	pop	r0
 490:	0f 90       	pop	r0
 492:	df 91       	pop	r29
 494:	cf 91       	pop	r28
 496:	08 95       	ret

00000498 <Init_PIR>:


//------------------------------ Global Functions ------------------------------

uint8_t Init_PIR(St_PIR_Sensor_Typedef *Instance)
{
 498:	cf 93       	push	r28
 49a:	df 93       	push	r29
 49c:	00 d0       	rcall	.+0      	; 0x49e <Init_PIR+0x6>
 49e:	00 d0       	rcall	.+0      	; 0x4a0 <Init_PIR+0x8>
 4a0:	1f 92       	push	r1
 4a2:	cd b7       	in	r28, 0x3d	; 61
 4a4:	de b7       	in	r29, 0x3e	; 62
 4a6:	9d 83       	std	Y+5, r25	; 0x05
 4a8:	8c 83       	std	Y+4, r24	; 0x04
    GPIO_config config_i_o = {0};
 4aa:	19 82       	std	Y+1, r1	; 0x01
 4ac:	1a 82       	std	Y+2, r1	; 0x02
 4ae:	1b 82       	std	Y+3, r1	; 0x03
    config_i_o.pin = Instance->Input_Pin;
 4b0:	8c 81       	ldd	r24, Y+4	; 0x04
 4b2:	9d 81       	ldd	r25, Y+5	; 0x05
 4b4:	fc 01       	movw	r30, r24
 4b6:	82 81       	ldd	r24, Z+2	; 0x02
 4b8:	89 83       	std	Y+1, r24	; 0x01
	if(Instance->method)
 4ba:	8c 81       	ldd	r24, Y+4	; 0x04
 4bc:	9d 81       	ldd	r25, Y+5	; 0x05
 4be:	fc 01       	movw	r30, r24
 4c0:	83 81       	ldd	r24, Z+3	; 0x03
 4c2:	88 23       	and	r24, r24
 4c4:	09 f4       	brne	.+2      	; 0x4c8 <Init_PIR+0x30>
 4c6:	50 c0       	rjmp	.+160    	; 0x568 <Init_PIR+0xd0>
    {
        config_i_o.mode = Any_Ch_Ex_Int;
 4c8:	83 e8       	ldi	r24, 0x83	; 131
 4ca:	8a 83       	std	Y+2, r24	; 0x02
        if((Instance->Input_Pin == PIN_2) && (Instance->Input_Port == PORT_D))
 4cc:	8c 81       	ldd	r24, Y+4	; 0x04
 4ce:	9d 81       	ldd	r25, Y+5	; 0x05
 4d0:	fc 01       	movw	r30, r24
 4d2:	82 81       	ldd	r24, Z+2	; 0x02
 4d4:	84 30       	cpi	r24, 0x04	; 4
 4d6:	89 f4       	brne	.+34     	; 0x4fa <Init_PIR+0x62>
 4d8:	8c 81       	ldd	r24, Y+4	; 0x04
 4da:	9d 81       	ldd	r25, Y+5	; 0x05
 4dc:	fc 01       	movw	r30, r24
 4de:	80 81       	ld	r24, Z
 4e0:	91 81       	ldd	r25, Z+1	; 0x01
 4e2:	c0 97       	sbiw	r24, 0x30	; 48
 4e4:	51 f4       	brne	.+20     	; 0x4fa <Init_PIR+0x62>
        {
            Enable_EXTI_0();
 4e6:	8b e5       	ldi	r24, 0x5B	; 91
 4e8:	90 e0       	ldi	r25, 0x00	; 0
 4ea:	2b e5       	ldi	r18, 0x5B	; 91
 4ec:	30 e0       	ldi	r19, 0x00	; 0
 4ee:	f9 01       	movw	r30, r18
 4f0:	20 81       	ld	r18, Z
 4f2:	20 64       	ori	r18, 0x40	; 64
 4f4:	fc 01       	movw	r30, r24
 4f6:	20 83       	st	Z, r18
 4f8:	2d c0       	rjmp	.+90     	; 0x554 <Init_PIR+0xbc>
        }else if ((Instance->Input_Pin == PIN_3) && (Instance->Input_Port == PORT_D))
 4fa:	8c 81       	ldd	r24, Y+4	; 0x04
 4fc:	9d 81       	ldd	r25, Y+5	; 0x05
 4fe:	fc 01       	movw	r30, r24
 500:	82 81       	ldd	r24, Z+2	; 0x02
 502:	88 30       	cpi	r24, 0x08	; 8
 504:	89 f4       	brne	.+34     	; 0x528 <Init_PIR+0x90>
 506:	8c 81       	ldd	r24, Y+4	; 0x04
 508:	9d 81       	ldd	r25, Y+5	; 0x05
 50a:	fc 01       	movw	r30, r24
 50c:	80 81       	ld	r24, Z
 50e:	91 81       	ldd	r25, Z+1	; 0x01
 510:	c0 97       	sbiw	r24, 0x30	; 48
 512:	51 f4       	brne	.+20     	; 0x528 <Init_PIR+0x90>
        {
            Enable_EXTI_1();
 514:	8b e5       	ldi	r24, 0x5B	; 91
 516:	90 e0       	ldi	r25, 0x00	; 0
 518:	2b e5       	ldi	r18, 0x5B	; 91
 51a:	30 e0       	ldi	r19, 0x00	; 0
 51c:	f9 01       	movw	r30, r18
 51e:	20 81       	ld	r18, Z
 520:	20 68       	ori	r18, 0x80	; 128
 522:	fc 01       	movw	r30, r24
 524:	20 83       	st	Z, r18
 526:	16 c0       	rjmp	.+44     	; 0x554 <Init_PIR+0xbc>
        }else if ((Instance->Input_Pin == PIN_2) && (Instance->Input_Port == PORT_B))
 528:	8c 81       	ldd	r24, Y+4	; 0x04
 52a:	9d 81       	ldd	r25, Y+5	; 0x05
 52c:	fc 01       	movw	r30, r24
 52e:	82 81       	ldd	r24, Z+2	; 0x02
 530:	84 30       	cpi	r24, 0x04	; 4
 532:	81 f4       	brne	.+32     	; 0x554 <Init_PIR+0xbc>
 534:	8c 81       	ldd	r24, Y+4	; 0x04
 536:	9d 81       	ldd	r25, Y+5	; 0x05
 538:	fc 01       	movw	r30, r24
 53a:	80 81       	ld	r24, Z
 53c:	91 81       	ldd	r25, Z+1	; 0x01
 53e:	c6 97       	sbiw	r24, 0x36	; 54
 540:	49 f4       	brne	.+18     	; 0x554 <Init_PIR+0xbc>
        {
            Enable_EXTI_2();
 542:	8b e5       	ldi	r24, 0x5B	; 91
 544:	90 e0       	ldi	r25, 0x00	; 0
 546:	2b e5       	ldi	r18, 0x5B	; 91
 548:	30 e0       	ldi	r19, 0x00	; 0
 54a:	f9 01       	movw	r30, r18
 54c:	20 81       	ld	r18, Z
 54e:	20 62       	ori	r18, 0x20	; 32
 550:	fc 01       	movw	r30, r24
 552:	20 83       	st	Z, r18
        }
	    Enable_Global_EXTI();
 554:	8f e5       	ldi	r24, 0x5F	; 95
 556:	90 e0       	ldi	r25, 0x00	; 0
 558:	2f e5       	ldi	r18, 0x5F	; 95
 55a:	30 e0       	ldi	r19, 0x00	; 0
 55c:	f9 01       	movw	r30, r18
 55e:	20 81       	ld	r18, Z
 560:	20 68       	ori	r18, 0x80	; 128
 562:	fc 01       	movw	r30, r24
 564:	20 83       	st	Z, r18
 566:	01 c0       	rjmp	.+2      	; 0x56a <Init_PIR+0xd2>
    }else
    {
        config_i_o.mode = INPUT;
 568:	1a 82       	std	Y+2, r1	; 0x02
    }
	Init_GPIO(Instance->Input_Port,&config_i_o);
 56a:	8c 81       	ldd	r24, Y+4	; 0x04
 56c:	9d 81       	ldd	r25, Y+5	; 0x05
 56e:	fc 01       	movw	r30, r24
 570:	80 81       	ld	r24, Z
 572:	91 81       	ldd	r25, Z+1	; 0x01
 574:	9e 01       	movw	r18, r28
 576:	2f 5f       	subi	r18, 0xFF	; 255
 578:	3f 4f       	sbci	r19, 0xFF	; 255
 57a:	b9 01       	movw	r22, r18
 57c:	0e 94 0c 01 	call	0x218	; 0x218 <Init_GPIO>

    return 1;
 580:	81 e0       	ldi	r24, 0x01	; 1
}
 582:	0f 90       	pop	r0
 584:	0f 90       	pop	r0
 586:	0f 90       	pop	r0
 588:	0f 90       	pop	r0
 58a:	0f 90       	pop	r0
 58c:	df 91       	pop	r29
 58e:	cf 91       	pop	r28
 590:	08 95       	ret

00000592 <__vector_10>:
    return 1;
}

volatile uint8_t counter = 0;
ISR(TIMER0_COMP_vect)
{
 592:	1f 92       	push	r1
 594:	0f 92       	push	r0
 596:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
 59a:	0f 92       	push	r0
 59c:	11 24       	eor	r1, r1
 59e:	2f 93       	push	r18
 5a0:	3f 93       	push	r19
 5a2:	4f 93       	push	r20
 5a4:	5f 93       	push	r21
 5a6:	6f 93       	push	r22
 5a8:	7f 93       	push	r23
 5aa:	8f 93       	push	r24
 5ac:	9f 93       	push	r25
 5ae:	af 93       	push	r26
 5b0:	bf 93       	push	r27
 5b2:	ef 93       	push	r30
 5b4:	ff 93       	push	r31
 5b6:	cf 93       	push	r28
 5b8:	df 93       	push	r29
 5ba:	cd b7       	in	r28, 0x3d	; 61
 5bc:	de b7       	in	r29, 0x3e	; 62
    counter++;
 5be:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <counter>
 5c2:	8f 5f       	subi	r24, 0xFF	; 255
 5c4:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <counter>
    Write_Port_Register(PORT_A,counter);
 5c8:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <counter>
 5cc:	68 2f       	mov	r22, r24
 5ce:	89 e3       	ldi	r24, 0x39	; 57
 5d0:	90 e0       	ldi	r25, 0x00	; 0
 5d2:	0e 94 26 02 	call	0x44c	; 0x44c <Write_Port_Register>
}
 5d6:	00 00       	nop
 5d8:	df 91       	pop	r29
 5da:	cf 91       	pop	r28
 5dc:	ff 91       	pop	r31
 5de:	ef 91       	pop	r30
 5e0:	bf 91       	pop	r27
 5e2:	af 91       	pop	r26
 5e4:	9f 91       	pop	r25
 5e6:	8f 91       	pop	r24
 5e8:	7f 91       	pop	r23
 5ea:	6f 91       	pop	r22
 5ec:	5f 91       	pop	r21
 5ee:	4f 91       	pop	r20
 5f0:	3f 91       	pop	r19
 5f2:	2f 91       	pop	r18
 5f4:	0f 90       	pop	r0
 5f6:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
 5fa:	0f 90       	pop	r0
 5fc:	1f 90       	pop	r1
 5fe:	18 95       	reti

00000600 <__vector_11>:


ISR(TIMER0_OVF_vect)
{
 600:	1f 92       	push	r1
 602:	0f 92       	push	r0
 604:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
 608:	0f 92       	push	r0
 60a:	11 24       	eor	r1, r1
 60c:	cf 93       	push	r28
 60e:	df 93       	push	r29
 610:	cd b7       	in	r28, 0x3d	; 61
 612:	de b7       	in	r29, 0x3e	; 62
    
}
 614:	00 00       	nop
 616:	df 91       	pop	r29
 618:	cf 91       	pop	r28
 61a:	0f 90       	pop	r0
 61c:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
 620:	0f 90       	pop	r0
 622:	1f 90       	pop	r1
 624:	18 95       	reti

00000626 <Uart_Receive>:
/**
 * @brief   Used to Receiv Data form UART by polling
 * @return  unsigned char: return received value 
 */
unsigned char *Uart_Receive(St_UART_driver *_init_uart)
{
 626:	cf 93       	push	r28
 628:	df 93       	push	r29
 62a:	00 d0       	rcall	.+0      	; 0x62c <Uart_Receive+0x6>
 62c:	00 d0       	rcall	.+0      	; 0x62e <Uart_Receive+0x8>
 62e:	00 d0       	rcall	.+0      	; 0x630 <Uart_Receive+0xa>
 630:	cd b7       	in	r28, 0x3d	; 61
 632:	de b7       	in	r29, 0x3e	; 62
 634:	9e 83       	std	Y+6, r25	; 0x06
 636:	8d 83       	std	Y+5, r24	; 0x05
    uint8_t index = 0;
 638:	19 82       	std	Y+1, r1	; 0x01
    unsigned char status, resh, resl;
    
    while(_init_uart->msg[index] != '#')
 63a:	66 c0       	rjmp	.+204    	; 0x708 <Uart_Receive+0xe2>
    {
        
        while(!(UCSRA_R->UCSRA_field & (1 << RXC)));
 63c:	00 00       	nop
 63e:	8b e2       	ldi	r24, 0x2B	; 43
 640:	90 e0       	ldi	r25, 0x00	; 0
 642:	fc 01       	movw	r30, r24
 644:	80 81       	ld	r24, Z
 646:	88 23       	and	r24, r24
 648:	d4 f7       	brge	.-12     	; 0x63e <Uart_Receive+0x18>

        status = UCSRA_R->UCSRA_field;
 64a:	8b e2       	ldi	r24, 0x2B	; 43
 64c:	90 e0       	ldi	r25, 0x00	; 0
 64e:	fc 01       	movw	r30, r24
 650:	80 81       	ld	r24, Z
 652:	8a 83       	std	Y+2, r24	; 0x02
        resh = UCSRB_R->UCSRB_field;
 654:	8a e2       	ldi	r24, 0x2A	; 42
 656:	90 e0       	ldi	r25, 0x00	; 0
 658:	fc 01       	movw	r30, r24
 65a:	80 81       	ld	r24, Z
 65c:	8b 83       	std	Y+3, r24	; 0x03
        resl = UDR;
 65e:	8c e2       	ldi	r24, 0x2C	; 44
 660:	90 e0       	ldi	r25, 0x00	; 0
 662:	fc 01       	movw	r30, r24
 664:	80 81       	ld	r24, Z
 666:	8c 83       	std	Y+4, r24	; 0x04

        if(status & ((1 << FE)|(1 << DOR)|(1 << PE)))
 668:	8a 81       	ldd	r24, Y+2	; 0x02
 66a:	88 2f       	mov	r24, r24
 66c:	90 e0       	ldi	r25, 0x00	; 0
 66e:	8c 71       	andi	r24, 0x1C	; 28
 670:	99 27       	eor	r25, r25
 672:	89 2b       	or	r24, r25
 674:	19 f0       	breq	.+6      	; 0x67c <Uart_Receive+0x56>
            return -1;
 676:	8f ef       	ldi	r24, 0xFF	; 255
 678:	9f ef       	ldi	r25, 0xFF	; 255
 67a:	55 c0       	rjmp	.+170    	; 0x726 <Uart_Receive+0x100>
        resh = (resh >> 1) & 0x01;
 67c:	8b 81       	ldd	r24, Y+3	; 0x03
 67e:	86 95       	lsr	r24
 680:	81 70       	andi	r24, 0x01	; 1
 682:	8b 83       	std	Y+3, r24	; 0x03
        if((index == 15) || (_init_uart->msg[index] == '#')){index = 0;}
 684:	89 81       	ldd	r24, Y+1	; 0x01
 686:	8f 30       	cpi	r24, 0x0F	; 15
 688:	71 f0       	breq	.+28     	; 0x6a6 <Uart_Receive+0x80>
 68a:	8d 81       	ldd	r24, Y+5	; 0x05
 68c:	9e 81       	ldd	r25, Y+6	; 0x06
 68e:	fc 01       	movw	r30, r24
 690:	21 85       	ldd	r18, Z+9	; 0x09
 692:	32 85       	ldd	r19, Z+10	; 0x0a
 694:	89 81       	ldd	r24, Y+1	; 0x01
 696:	88 2f       	mov	r24, r24
 698:	90 e0       	ldi	r25, 0x00	; 0
 69a:	82 0f       	add	r24, r18
 69c:	93 1f       	adc	r25, r19
 69e:	fc 01       	movw	r30, r24
 6a0:	80 81       	ld	r24, Z
 6a2:	83 32       	cpi	r24, 0x23	; 35
 6a4:	09 f4       	brne	.+2      	; 0x6a8 <Uart_Receive+0x82>
 6a6:	19 82       	std	Y+1, r1	; 0x01
        _init_uart->msg[index] = ((resh << 8) | resl);
 6a8:	8d 81       	ldd	r24, Y+5	; 0x05
 6aa:	9e 81       	ldd	r25, Y+6	; 0x06
 6ac:	fc 01       	movw	r30, r24
 6ae:	21 85       	ldd	r18, Z+9	; 0x09
 6b0:	32 85       	ldd	r19, Z+10	; 0x0a
 6b2:	89 81       	ldd	r24, Y+1	; 0x01
 6b4:	88 2f       	mov	r24, r24
 6b6:	90 e0       	ldi	r25, 0x00	; 0
 6b8:	82 0f       	add	r24, r18
 6ba:	93 1f       	adc	r25, r19
 6bc:	2b 81       	ldd	r18, Y+3	; 0x03
 6be:	22 2f       	mov	r18, r18
 6c0:	30 e0       	ldi	r19, 0x00	; 0
 6c2:	32 2f       	mov	r19, r18
 6c4:	22 27       	eor	r18, r18
 6c6:	32 2f       	mov	r19, r18
 6c8:	2c 81       	ldd	r18, Y+4	; 0x04
 6ca:	23 2b       	or	r18, r19
 6cc:	fc 01       	movw	r30, r24
 6ce:	20 83       	st	Z, r18
        if(_init_uart->msg[index] == '#') {return &_init_uart->msg[index];}
 6d0:	8d 81       	ldd	r24, Y+5	; 0x05
 6d2:	9e 81       	ldd	r25, Y+6	; 0x06
 6d4:	fc 01       	movw	r30, r24
 6d6:	21 85       	ldd	r18, Z+9	; 0x09
 6d8:	32 85       	ldd	r19, Z+10	; 0x0a
 6da:	89 81       	ldd	r24, Y+1	; 0x01
 6dc:	88 2f       	mov	r24, r24
 6de:	90 e0       	ldi	r25, 0x00	; 0
 6e0:	82 0f       	add	r24, r18
 6e2:	93 1f       	adc	r25, r19
 6e4:	fc 01       	movw	r30, r24
 6e6:	80 81       	ld	r24, Z
 6e8:	83 32       	cpi	r24, 0x23	; 35
 6ea:	59 f4       	brne	.+22     	; 0x702 <Uart_Receive+0xdc>
 6ec:	8d 81       	ldd	r24, Y+5	; 0x05
 6ee:	9e 81       	ldd	r25, Y+6	; 0x06
 6f0:	fc 01       	movw	r30, r24
 6f2:	21 85       	ldd	r18, Z+9	; 0x09
 6f4:	32 85       	ldd	r19, Z+10	; 0x0a
 6f6:	89 81       	ldd	r24, Y+1	; 0x01
 6f8:	88 2f       	mov	r24, r24
 6fa:	90 e0       	ldi	r25, 0x00	; 0
 6fc:	82 0f       	add	r24, r18
 6fe:	93 1f       	adc	r25, r19
 700:	12 c0       	rjmp	.+36     	; 0x726 <Uart_Receive+0x100>
        index++;
 702:	89 81       	ldd	r24, Y+1	; 0x01
 704:	8f 5f       	subi	r24, 0xFF	; 255
 706:	89 83       	std	Y+1, r24	; 0x01
unsigned char *Uart_Receive(St_UART_driver *_init_uart)
{
    uint8_t index = 0;
    unsigned char status, resh, resl;
    
    while(_init_uart->msg[index] != '#')
 708:	8d 81       	ldd	r24, Y+5	; 0x05
 70a:	9e 81       	ldd	r25, Y+6	; 0x06
 70c:	fc 01       	movw	r30, r24
 70e:	21 85       	ldd	r18, Z+9	; 0x09
 710:	32 85       	ldd	r19, Z+10	; 0x0a
 712:	89 81       	ldd	r24, Y+1	; 0x01
 714:	88 2f       	mov	r24, r24
 716:	90 e0       	ldi	r25, 0x00	; 0
 718:	82 0f       	add	r24, r18
 71a:	93 1f       	adc	r25, r19
 71c:	fc 01       	movw	r30, r24
 71e:	80 81       	ld	r24, Z
 720:	83 32       	cpi	r24, 0x23	; 35
 722:	09 f0       	breq	.+2      	; 0x726 <Uart_Receive+0x100>
 724:	8b cf       	rjmp	.-234    	; 0x63c <Uart_Receive+0x16>
        index++;
    }
    

    
}
 726:	26 96       	adiw	r28, 0x06	; 6
 728:	0f b6       	in	r0, 0x3f	; 63
 72a:	f8 94       	cli
 72c:	de bf       	out	0x3e, r29	; 62
 72e:	0f be       	out	0x3f, r0	; 63
 730:	cd bf       	out	0x3d, r28	; 61
 732:	df 91       	pop	r29
 734:	cf 91       	pop	r28
 736:	08 95       	ret

00000738 <__vector_13>:

ISR(USART_RXC_vect)
{
 738:	1f 92       	push	r1
 73a:	0f 92       	push	r0
 73c:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
 740:	0f 92       	push	r0
 742:	11 24       	eor	r1, r1
 744:	2f 93       	push	r18
 746:	3f 93       	push	r19
 748:	4f 93       	push	r20
 74a:	5f 93       	push	r21
 74c:	6f 93       	push	r22
 74e:	7f 93       	push	r23
 750:	8f 93       	push	r24
 752:	9f 93       	push	r25
 754:	af 93       	push	r26
 756:	bf 93       	push	r27
 758:	ef 93       	push	r30
 75a:	ff 93       	push	r31
 75c:	cf 93       	push	r28
 75e:	df 93       	push	r29
 760:	cd b7       	in	r28, 0x3d	; 61
 762:	de b7       	in	r29, 0x3e	; 62
    Uart_Receive(&UART_Config);
 764:	85 e6       	ldi	r24, 0x65	; 101
 766:	90 e0       	ldi	r25, 0x00	; 0
 768:	0e 94 13 03 	call	0x626	; 0x626 <Uart_Receive>
}
 76c:	00 00       	nop
 76e:	df 91       	pop	r29
 770:	cf 91       	pop	r28
 772:	ff 91       	pop	r31
 774:	ef 91       	pop	r30
 776:	bf 91       	pop	r27
 778:	af 91       	pop	r26
 77a:	9f 91       	pop	r25
 77c:	8f 91       	pop	r24
 77e:	7f 91       	pop	r23
 780:	6f 91       	pop	r22
 782:	5f 91       	pop	r21
 784:	4f 91       	pop	r20
 786:	3f 91       	pop	r19
 788:	2f 91       	pop	r18
 78a:	0f 90       	pop	r0
 78c:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
 790:	0f 90       	pop	r0
 792:	1f 90       	pop	r1
 794:	18 95       	reti

00000796 <__vector_15>:


ISR(USART_TXC_vect)
{
 796:	1f 92       	push	r1
 798:	0f 92       	push	r0
 79a:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
 79e:	0f 92       	push	r0
 7a0:	11 24       	eor	r1, r1
 7a2:	cf 93       	push	r28
 7a4:	df 93       	push	r29
 7a6:	cd b7       	in	r28, 0x3d	; 61
 7a8:	de b7       	in	r29, 0x3e	; 62

}
 7aa:	00 00       	nop
 7ac:	df 91       	pop	r29
 7ae:	cf 91       	pop	r28
 7b0:	0f 90       	pop	r0
 7b2:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
 7b6:	0f 90       	pop	r0
 7b8:	1f 90       	pop	r1
 7ba:	18 95       	reti

000007bc <__vector_14>:


ISR(USART_UDRE_vect)
{
 7bc:	1f 92       	push	r1
 7be:	0f 92       	push	r0
 7c0:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
 7c4:	0f 92       	push	r0
 7c6:	11 24       	eor	r1, r1
 7c8:	2f 93       	push	r18
 7ca:	8f 93       	push	r24
 7cc:	9f 93       	push	r25
 7ce:	ef 93       	push	r30
 7d0:	ff 93       	push	r31
 7d2:	cf 93       	push	r28
 7d4:	df 93       	push	r29
 7d6:	cd b7       	in	r28, 0x3d	; 61
 7d8:	de b7       	in	r29, 0x3e	; 62
    UCSRB_R->UCSRB_bits.UDRIE_b = 0;
 7da:	8a e2       	ldi	r24, 0x2A	; 42
 7dc:	90 e0       	ldi	r25, 0x00	; 0
 7de:	fc 01       	movw	r30, r24
 7e0:	20 81       	ld	r18, Z
 7e2:	2f 7d       	andi	r18, 0xDF	; 223
 7e4:	fc 01       	movw	r30, r24
 7e6:	20 83       	st	Z, r18
 7e8:	00 00       	nop
 7ea:	df 91       	pop	r29
 7ec:	cf 91       	pop	r28
 7ee:	ff 91       	pop	r31
 7f0:	ef 91       	pop	r30
 7f2:	9f 91       	pop	r25
 7f4:	8f 91       	pop	r24
 7f6:	2f 91       	pop	r18
 7f8:	0f 90       	pop	r0
 7fa:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
 7fe:	0f 90       	pop	r0
 800:	1f 90       	pop	r1
 802:	18 95       	reti

00000804 <main>:
 804:	cf 93       	push	r28
 806:	df 93       	push	r29
 808:	cd b7       	in	r28, 0x3d	; 61
 80a:	de b7       	in	r29, 0x3e	; 62
 80c:	0e 94 49 00 	call	0x92	; 0x92 <init>
 810:	0e 94 74 00 	call	0xe8	; 0xe8 <program>
 814:	fd cf       	rjmp	.-6      	; 0x810 <main+0xc>

00000816 <_exit>:
 816:	f8 94       	cli

00000818 <__stop_program>:
 818:	ff cf       	rjmp	.-2      	; 0x818 <__stop_program>
