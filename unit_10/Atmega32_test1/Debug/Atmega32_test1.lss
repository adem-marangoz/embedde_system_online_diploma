
Atmega32_test1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000089c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000910  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000010  00800060  00800060  00000910  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000910  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000940  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000198  00000000  00000000  0000097c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001ed2  00000000  00000000  00000b14  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b8c  00000000  00000000  000029e6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dcd  00000000  00000000  00003572  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000061c  00000000  00000000  00004340  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000e0b  00000000  00000000  0000495c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000ce1  00000000  00000000  00005767  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000138  00000000  00000000  00006448  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__vector_1>
   8:	0c 94 ac 00 	jmp	0x158	; 0x158 <__vector_2>
   c:	0c 94 dc 00 	jmp	0x1b8	; 0x1b8 <__vector_3>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 0a 03 	jmp	0x614	; 0x614 <__vector_10>
  2c:	0c 94 41 03 	jmp	0x682	; 0x682 <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 dd 03 	jmp	0x7ba	; 0x7ba <__vector_13>
  38:	0c 94 1f 04 	jmp	0x83e	; 0x83e <__vector_14>
  3c:	0c 94 0c 04 	jmp	0x818	; 0x818 <__vector_15>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec e9       	ldi	r30, 0x9C	; 156
  68:	f8 e0       	ldi	r31, 0x08	; 8
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 37       	cpi	r26, 0x70	; 112
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 43 04 	call	0x886	; 0x886 <main>
  8a:	0c 94 4c 04 	jmp	0x898	; 0x898 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <init>:
//_____________________________ MACRO Definition _______________________________
#define Master			1
//==============================================================================

void init(void)
{
  92:	cf 93       	push	r28
  94:	df 93       	push	r29
  96:	00 d0       	rcall	.+0      	; 0x98 <init+0x6>
  98:	1f 92       	push	r1
  9a:	cd b7       	in	r28, 0x3d	; 61
  9c:	de b7       	in	r29, 0x3e	; 62
	// ADC_Init(&adc1_config);
//==============================================================================


// ---------------------------- Normal Output ----------------------------------
	GPIO_config config_i_o = {0};
  9e:	19 82       	std	Y+1, r1	; 0x01
  a0:	1a 82       	std	Y+2, r1	; 0x02
  a2:	1b 82       	std	Y+3, r1	; 0x03
	config_i_o.pin = PIN_0;
  a4:	81 e0       	ldi	r24, 0x01	; 1
  a6:	89 83       	std	Y+1, r24	; 0x01
	config_i_o.mode = OUTPUT;
  a8:	81 e0       	ldi	r24, 0x01	; 1
  aa:	8a 83       	std	Y+2, r24	; 0x02
	Init_GPIO(PORT_A,&config_i_o);
  ac:	ce 01       	movw	r24, r28
  ae:	01 96       	adiw	r24, 0x01	; 1
  b0:	bc 01       	movw	r22, r24
  b2:	89 e3       	ldi	r24, 0x39	; 57
  b4:	90 e0       	ldi	r25, 0x00	; 0
  b6:	0e 94 0d 01 	call	0x21a	; 0x21a <Init_GPIO>
// =============================================================================

// ---------------------------- PIR Sensor -------------------------------------
	Pir_config.Input_Port = PORT_D;
  ba:	80 e3       	ldi	r24, 0x30	; 48
  bc:	90 e0       	ldi	r25, 0x00	; 0
  be:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  c2:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	Pir_config.Input_Pin = PIN_3;
  c6:	88 e0       	ldi	r24, 0x08	; 8
  c8:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
	Pir_config.method = interrupt;
  cc:	81 e0       	ldi	r24, 0x01	; 1
  ce:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
	Init_PIR(&Pir_config);
  d2:	80 e6       	ldi	r24, 0x60	; 96
  d4:	90 e0       	ldi	r25, 0x00	; 0
  d6:	0e 94 8d 02 	call	0x51a	; 0x51a <Init_PIR>

//==============================================================================

}
  da:	00 00       	nop
  dc:	0f 90       	pop	r0
  de:	0f 90       	pop	r0
  e0:	0f 90       	pop	r0
  e2:	df 91       	pop	r29
  e4:	cf 91       	pop	r28
  e6:	08 95       	ret

000000e8 <program>:

void program(void)
{ 	
  e8:	cf 93       	push	r28
  ea:	df 93       	push	r29
  ec:	cd b7       	in	r28, 0x3d	; 61
  ee:	de b7       	in	r29, 0x3e	; 62

}
  f0:	00 00       	nop
  f2:	df 91       	pop	r29
  f4:	cf 91       	pop	r28
  f6:	08 95       	ret

000000f8 <__vector_1>:



ISR(INT0_vect)
{
  f8:	1f 92       	push	r1
  fa:	0f 92       	push	r0
  fc:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
 100:	0f 92       	push	r0
 102:	11 24       	eor	r1, r1
 104:	2f 93       	push	r18
 106:	3f 93       	push	r19
 108:	4f 93       	push	r20
 10a:	5f 93       	push	r21
 10c:	6f 93       	push	r22
 10e:	7f 93       	push	r23
 110:	8f 93       	push	r24
 112:	9f 93       	push	r25
 114:	af 93       	push	r26
 116:	bf 93       	push	r27
 118:	ef 93       	push	r30
 11a:	ff 93       	push	r31
 11c:	cf 93       	push	r28
 11e:	df 93       	push	r29
 120:	cd b7       	in	r28, 0x3d	; 61
 122:	de b7       	in	r29, 0x3e	; 62
    Toggle_pin(PORT_A,PIN_0);
 124:	61 e0       	ldi	r22, 0x01	; 1
 126:	89 e3       	ldi	r24, 0x39	; 57
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	0e 94 3b 02 	call	0x476	; 0x476 <Toggle_pin>
}
 12e:	00 00       	nop
 130:	df 91       	pop	r29
 132:	cf 91       	pop	r28
 134:	ff 91       	pop	r31
 136:	ef 91       	pop	r30
 138:	bf 91       	pop	r27
 13a:	af 91       	pop	r26
 13c:	9f 91       	pop	r25
 13e:	8f 91       	pop	r24
 140:	7f 91       	pop	r23
 142:	6f 91       	pop	r22
 144:	5f 91       	pop	r21
 146:	4f 91       	pop	r20
 148:	3f 91       	pop	r19
 14a:	2f 91       	pop	r18
 14c:	0f 90       	pop	r0
 14e:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
 152:	0f 90       	pop	r0
 154:	1f 90       	pop	r1
 156:	18 95       	reti

00000158 <__vector_2>:


ISR(INT1_vect)
{
 158:	1f 92       	push	r1
 15a:	0f 92       	push	r0
 15c:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
 160:	0f 92       	push	r0
 162:	11 24       	eor	r1, r1
 164:	2f 93       	push	r18
 166:	3f 93       	push	r19
 168:	4f 93       	push	r20
 16a:	5f 93       	push	r21
 16c:	6f 93       	push	r22
 16e:	7f 93       	push	r23
 170:	8f 93       	push	r24
 172:	9f 93       	push	r25
 174:	af 93       	push	r26
 176:	bf 93       	push	r27
 178:	ef 93       	push	r30
 17a:	ff 93       	push	r31
 17c:	cf 93       	push	r28
 17e:	df 93       	push	r29
 180:	cd b7       	in	r28, 0x3d	; 61
 182:	de b7       	in	r29, 0x3e	; 62
    Toggle_pin(PORT_A,PIN_0);
 184:	61 e0       	ldi	r22, 0x01	; 1
 186:	89 e3       	ldi	r24, 0x39	; 57
 188:	90 e0       	ldi	r25, 0x00	; 0
 18a:	0e 94 3b 02 	call	0x476	; 0x476 <Toggle_pin>
}
 18e:	00 00       	nop
 190:	df 91       	pop	r29
 192:	cf 91       	pop	r28
 194:	ff 91       	pop	r31
 196:	ef 91       	pop	r30
 198:	bf 91       	pop	r27
 19a:	af 91       	pop	r26
 19c:	9f 91       	pop	r25
 19e:	8f 91       	pop	r24
 1a0:	7f 91       	pop	r23
 1a2:	6f 91       	pop	r22
 1a4:	5f 91       	pop	r21
 1a6:	4f 91       	pop	r20
 1a8:	3f 91       	pop	r19
 1aa:	2f 91       	pop	r18
 1ac:	0f 90       	pop	r0
 1ae:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
 1b2:	0f 90       	pop	r0
 1b4:	1f 90       	pop	r1
 1b6:	18 95       	reti

000001b8 <__vector_3>:


ISR(INT2_vect)
{
 1b8:	1f 92       	push	r1
 1ba:	0f 92       	push	r0
 1bc:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
 1c0:	0f 92       	push	r0
 1c2:	11 24       	eor	r1, r1
 1c4:	2f 93       	push	r18
 1c6:	3f 93       	push	r19
 1c8:	4f 93       	push	r20
 1ca:	5f 93       	push	r21
 1cc:	6f 93       	push	r22
 1ce:	7f 93       	push	r23
 1d0:	8f 93       	push	r24
 1d2:	9f 93       	push	r25
 1d4:	af 93       	push	r26
 1d6:	bf 93       	push	r27
 1d8:	ef 93       	push	r30
 1da:	ff 93       	push	r31
 1dc:	cf 93       	push	r28
 1de:	df 93       	push	r29
 1e0:	cd b7       	in	r28, 0x3d	; 61
 1e2:	de b7       	in	r29, 0x3e	; 62
    Write_Pin(PORT_A,PIN_0, High);
 1e4:	41 e0       	ldi	r20, 0x01	; 1
 1e6:	61 e0       	ldi	r22, 0x01	; 1
 1e8:	89 e3       	ldi	r24, 0x39	; 57
 1ea:	90 e0       	ldi	r25, 0x00	; 0
 1ec:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <Write_Pin>
 1f0:	00 00       	nop
 1f2:	df 91       	pop	r29
 1f4:	cf 91       	pop	r28
 1f6:	ff 91       	pop	r31
 1f8:	ef 91       	pop	r30
 1fa:	bf 91       	pop	r27
 1fc:	af 91       	pop	r26
 1fe:	9f 91       	pop	r25
 200:	8f 91       	pop	r24
 202:	7f 91       	pop	r23
 204:	6f 91       	pop	r22
 206:	5f 91       	pop	r21
 208:	4f 91       	pop	r20
 20a:	3f 91       	pop	r19
 20c:	2f 91       	pop	r18
 20e:	0f 90       	pop	r0
 210:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
 214:	0f 90       	pop	r0
 216:	1f 90       	pop	r1
 218:	18 95       	reti

0000021a <Init_GPIO>:
unsigned char Read_Pins(St_GPIO *GPIO)
{
	if(!(Check_PORT(GPIO))){return 0;}
	return (GPIO->Un_PINx.PINx);

}
 21a:	cf 93       	push	r28
 21c:	df 93       	push	r29
 21e:	cd b7       	in	r28, 0x3d	; 61
 220:	de b7       	in	r29, 0x3e	; 62
 222:	28 97       	sbiw	r28, 0x08	; 8
 224:	0f b6       	in	r0, 0x3f	; 63
 226:	f8 94       	cli
 228:	de bf       	out	0x3e, r29	; 62
 22a:	0f be       	out	0x3f, r0	; 63
 22c:	cd bf       	out	0x3d, r28	; 61
 22e:	9e 83       	std	Y+6, r25	; 0x06
 230:	8d 83       	std	Y+5, r24	; 0x05
 232:	78 87       	std	Y+8, r23	; 0x08
 234:	6f 83       	std	Y+7, r22	; 0x07
 236:	8d 81       	ldd	r24, Y+5	; 0x05
 238:	9e 81       	ldd	r25, Y+6	; 0x06
 23a:	c9 97       	sbiw	r24, 0x39	; 57
 23c:	71 f0       	breq	.+28     	; 0x25a <Init_GPIO+0x40>
 23e:	8d 81       	ldd	r24, Y+5	; 0x05
 240:	9e 81       	ldd	r25, Y+6	; 0x06
 242:	c6 97       	sbiw	r24, 0x36	; 54
 244:	51 f0       	breq	.+20     	; 0x25a <Init_GPIO+0x40>
 246:	8d 81       	ldd	r24, Y+5	; 0x05
 248:	9e 81       	ldd	r25, Y+6	; 0x06
 24a:	c3 97       	sbiw	r24, 0x33	; 51
 24c:	31 f0       	breq	.+12     	; 0x25a <Init_GPIO+0x40>
 24e:	8d 81       	ldd	r24, Y+5	; 0x05
 250:	9e 81       	ldd	r25, Y+6	; 0x06
 252:	c0 97       	sbiw	r24, 0x30	; 48
 254:	11 f0       	breq	.+4      	; 0x25a <Init_GPIO+0x40>
 256:	80 e0       	ldi	r24, 0x00	; 0
 258:	c5 c0       	rjmp	.+394    	; 0x3e4 <Init_GPIO+0x1ca>
 25a:	1b 82       	std	Y+3, r1	; 0x03
 25c:	1c 82       	std	Y+4, r1	; 0x04
 25e:	19 82       	std	Y+1, r1	; 0x01
 260:	1a 82       	std	Y+2, r1	; 0x02
 262:	bb c0       	rjmp	.+374    	; 0x3da <Init_GPIO+0x1c0>
 264:	8a 81       	ldd	r24, Y+2	; 0x02
 266:	28 2f       	mov	r18, r24
 268:	30 e0       	ldi	r19, 0x00	; 0
 26a:	81 e0       	ldi	r24, 0x01	; 1
 26c:	90 e0       	ldi	r25, 0x00	; 0
 26e:	02 c0       	rjmp	.+4      	; 0x274 <Init_GPIO+0x5a>
 270:	88 0f       	add	r24, r24
 272:	99 1f       	adc	r25, r25
 274:	2a 95       	dec	r18
 276:	e2 f7       	brpl	.-8      	; 0x270 <Init_GPIO+0x56>
 278:	8b 83       	std	Y+3, r24	; 0x03
 27a:	8f 81       	ldd	r24, Y+7	; 0x07
 27c:	98 85       	ldd	r25, Y+8	; 0x08
 27e:	fc 01       	movw	r30, r24
 280:	90 81       	ld	r25, Z
 282:	8b 81       	ldd	r24, Y+3	; 0x03
 284:	89 23       	and	r24, r25
 286:	8c 83       	std	Y+4, r24	; 0x04
 288:	9b 81       	ldd	r25, Y+3	; 0x03
 28a:	8c 81       	ldd	r24, Y+4	; 0x04
 28c:	98 17       	cp	r25, r24
 28e:	09 f0       	breq	.+2      	; 0x292 <Init_GPIO+0x78>
 290:	a1 c0       	rjmp	.+322    	; 0x3d4 <Init_GPIO+0x1ba>
 292:	8f 81       	ldd	r24, Y+7	; 0x07
 294:	98 85       	ldd	r25, Y+8	; 0x08
 296:	fc 01       	movw	r30, r24
 298:	81 81       	ldd	r24, Z+1	; 0x01
 29a:	81 30       	cpi	r24, 0x01	; 1
 29c:	79 f5       	brne	.+94     	; 0x2fc <Init_GPIO+0xe2>
 29e:	8d 81       	ldd	r24, Y+5	; 0x05
 2a0:	9e 81       	ldd	r25, Y+6	; 0x06
 2a2:	fc 01       	movw	r30, r24
 2a4:	81 81       	ldd	r24, Z+1	; 0x01
 2a6:	89 83       	std	Y+1, r24	; 0x01
 2a8:	8f 81       	ldd	r24, Y+7	; 0x07
 2aa:	98 85       	ldd	r25, Y+8	; 0x08
 2ac:	fc 01       	movw	r30, r24
 2ae:	81 81       	ldd	r24, Z+1	; 0x01
 2b0:	88 2f       	mov	r24, r24
 2b2:	90 e0       	ldi	r25, 0x00	; 0
 2b4:	2a 81       	ldd	r18, Y+2	; 0x02
 2b6:	22 2f       	mov	r18, r18
 2b8:	30 e0       	ldi	r19, 0x00	; 0
 2ba:	02 c0       	rjmp	.+4      	; 0x2c0 <Init_GPIO+0xa6>
 2bc:	88 0f       	add	r24, r24
 2be:	99 1f       	adc	r25, r25
 2c0:	2a 95       	dec	r18
 2c2:	e2 f7       	brpl	.-8      	; 0x2bc <Init_GPIO+0xa2>
 2c4:	98 2f       	mov	r25, r24
 2c6:	90 95       	com	r25
 2c8:	89 81       	ldd	r24, Y+1	; 0x01
 2ca:	89 23       	and	r24, r25
 2cc:	89 83       	std	Y+1, r24	; 0x01
 2ce:	8f 81       	ldd	r24, Y+7	; 0x07
 2d0:	98 85       	ldd	r25, Y+8	; 0x08
 2d2:	fc 01       	movw	r30, r24
 2d4:	81 81       	ldd	r24, Z+1	; 0x01
 2d6:	88 2f       	mov	r24, r24
 2d8:	90 e0       	ldi	r25, 0x00	; 0
 2da:	2a 81       	ldd	r18, Y+2	; 0x02
 2dc:	22 2f       	mov	r18, r18
 2de:	30 e0       	ldi	r19, 0x00	; 0
 2e0:	02 c0       	rjmp	.+4      	; 0x2e6 <Init_GPIO+0xcc>
 2e2:	88 0f       	add	r24, r24
 2e4:	99 1f       	adc	r25, r25
 2e6:	2a 95       	dec	r18
 2e8:	e2 f7       	brpl	.-8      	; 0x2e2 <Init_GPIO+0xc8>
 2ea:	98 2f       	mov	r25, r24
 2ec:	89 81       	ldd	r24, Y+1	; 0x01
 2ee:	89 2b       	or	r24, r25
 2f0:	89 83       	std	Y+1, r24	; 0x01
 2f2:	8d 81       	ldd	r24, Y+5	; 0x05
 2f4:	9e 81       	ldd	r25, Y+6	; 0x06
 2f6:	29 81       	ldd	r18, Y+1	; 0x01
 2f8:	fc 01       	movw	r30, r24
 2fa:	21 83       	std	Z+1, r18	; 0x01
 2fc:	8f 81       	ldd	r24, Y+7	; 0x07
 2fe:	98 85       	ldd	r25, Y+8	; 0x08
 300:	fc 01       	movw	r30, r24
 302:	81 81       	ldd	r24, Z+1	; 0x01
 304:	88 23       	and	r24, r24
 306:	0c f0       	brlt	.+2      	; 0x30a <Init_GPIO+0xf0>
 308:	65 c0       	rjmp	.+202    	; 0x3d4 <Init_GPIO+0x1ba>
 30a:	8d 81       	ldd	r24, Y+5	; 0x05
 30c:	9e 81       	ldd	r25, Y+6	; 0x06
 30e:	c0 97       	sbiw	r24, 0x30	; 48
 310:	79 f5       	brne	.+94     	; 0x370 <Init_GPIO+0x156>
 312:	85 e5       	ldi	r24, 0x55	; 85
 314:	90 e0       	ldi	r25, 0x00	; 0
 316:	fc 01       	movw	r30, r24
 318:	80 81       	ld	r24, Z
 31a:	89 83       	std	Y+1, r24	; 0x01
 31c:	8c 81       	ldd	r24, Y+4	; 0x04
 31e:	84 30       	cpi	r24, 0x04	; 4
 320:	69 f4       	brne	.+26     	; 0x33c <Init_GPIO+0x122>
 322:	89 81       	ldd	r24, Y+1	; 0x01
 324:	8c 7f       	andi	r24, 0xFC	; 252
 326:	89 83       	std	Y+1, r24	; 0x01
 328:	8f 81       	ldd	r24, Y+7	; 0x07
 32a:	98 85       	ldd	r25, Y+8	; 0x08
 32c:	fc 01       	movw	r30, r24
 32e:	81 81       	ldd	r24, Z+1	; 0x01
 330:	98 2f       	mov	r25, r24
 332:	93 70       	andi	r25, 0x03	; 3
 334:	89 81       	ldd	r24, Y+1	; 0x01
 336:	89 2b       	or	r24, r25
 338:	89 83       	std	Y+1, r24	; 0x01
 33a:	15 c0       	rjmp	.+42     	; 0x366 <Init_GPIO+0x14c>
 33c:	8c 81       	ldd	r24, Y+4	; 0x04
 33e:	88 30       	cpi	r24, 0x08	; 8
 340:	91 f4       	brne	.+36     	; 0x366 <Init_GPIO+0x14c>
 342:	89 81       	ldd	r24, Y+1	; 0x01
 344:	83 7f       	andi	r24, 0xF3	; 243
 346:	89 83       	std	Y+1, r24	; 0x01
 348:	8f 81       	ldd	r24, Y+7	; 0x07
 34a:	98 85       	ldd	r25, Y+8	; 0x08
 34c:	fc 01       	movw	r30, r24
 34e:	81 81       	ldd	r24, Z+1	; 0x01
 350:	88 2f       	mov	r24, r24
 352:	90 e0       	ldi	r25, 0x00	; 0
 354:	88 0f       	add	r24, r24
 356:	99 1f       	adc	r25, r25
 358:	88 0f       	add	r24, r24
 35a:	99 1f       	adc	r25, r25
 35c:	98 2f       	mov	r25, r24
 35e:	9c 70       	andi	r25, 0x0C	; 12
 360:	89 81       	ldd	r24, Y+1	; 0x01
 362:	89 2b       	or	r24, r25
 364:	89 83       	std	Y+1, r24	; 0x01
 366:	85 e5       	ldi	r24, 0x55	; 85
 368:	90 e0       	ldi	r25, 0x00	; 0
 36a:	29 81       	ldd	r18, Y+1	; 0x01
 36c:	fc 01       	movw	r30, r24
 36e:	20 83       	st	Z, r18
 370:	8c 81       	ldd	r24, Y+4	; 0x04
 372:	84 30       	cpi	r24, 0x04	; 4
 374:	79 f5       	brne	.+94     	; 0x3d4 <Init_GPIO+0x1ba>
 376:	8d 81       	ldd	r24, Y+5	; 0x05
 378:	9e 81       	ldd	r25, Y+6	; 0x06
 37a:	c6 97       	sbiw	r24, 0x36	; 54
 37c:	59 f5       	brne	.+86     	; 0x3d4 <Init_GPIO+0x1ba>
 37e:	84 e5       	ldi	r24, 0x54	; 84
 380:	90 e0       	ldi	r25, 0x00	; 0
 382:	fc 01       	movw	r30, r24
 384:	80 81       	ld	r24, Z
 386:	89 83       	std	Y+1, r24	; 0x01
 388:	8f 81       	ldd	r24, Y+7	; 0x07
 38a:	98 85       	ldd	r25, Y+8	; 0x08
 38c:	fc 01       	movw	r30, r24
 38e:	81 81       	ldd	r24, Z+1	; 0x01
 390:	82 78       	andi	r24, 0x82	; 130
 392:	82 95       	swap	r24
 394:	88 0f       	add	r24, r24
 396:	80 7e       	andi	r24, 0xE0	; 224
 398:	80 95       	com	r24
 39a:	98 2f       	mov	r25, r24
 39c:	89 81       	ldd	r24, Y+1	; 0x01
 39e:	89 23       	and	r24, r25
 3a0:	89 83       	std	Y+1, r24	; 0x01
 3a2:	8f 81       	ldd	r24, Y+7	; 0x07
 3a4:	98 85       	ldd	r25, Y+8	; 0x08
 3a6:	fc 01       	movw	r30, r24
 3a8:	81 81       	ldd	r24, Z+1	; 0x01
 3aa:	88 2f       	mov	r24, r24
 3ac:	90 e0       	ldi	r25, 0x00	; 0
 3ae:	82 78       	andi	r24, 0x82	; 130
 3b0:	99 27       	eor	r25, r25
 3b2:	88 0f       	add	r24, r24
 3b4:	99 1f       	adc	r25, r25
 3b6:	82 95       	swap	r24
 3b8:	92 95       	swap	r25
 3ba:	90 7f       	andi	r25, 0xF0	; 240
 3bc:	98 27       	eor	r25, r24
 3be:	80 7f       	andi	r24, 0xF0	; 240
 3c0:	98 27       	eor	r25, r24
 3c2:	98 2f       	mov	r25, r24
 3c4:	89 81       	ldd	r24, Y+1	; 0x01
 3c6:	89 2b       	or	r24, r25
 3c8:	89 83       	std	Y+1, r24	; 0x01
 3ca:	84 e5       	ldi	r24, 0x54	; 84
 3cc:	90 e0       	ldi	r25, 0x00	; 0
 3ce:	29 81       	ldd	r18, Y+1	; 0x01
 3d0:	fc 01       	movw	r30, r24
 3d2:	20 83       	st	Z, r18
 3d4:	8a 81       	ldd	r24, Y+2	; 0x02
 3d6:	8f 5f       	subi	r24, 0xFF	; 255
 3d8:	8a 83       	std	Y+2, r24	; 0x02
 3da:	8a 81       	ldd	r24, Y+2	; 0x02
 3dc:	88 30       	cpi	r24, 0x08	; 8
 3de:	08 f4       	brcc	.+2      	; 0x3e2 <Init_GPIO+0x1c8>
 3e0:	41 cf       	rjmp	.-382    	; 0x264 <Init_GPIO+0x4a>
 3e2:	81 e0       	ldi	r24, 0x01	; 1
 3e4:	28 96       	adiw	r28, 0x08	; 8
 3e6:	0f b6       	in	r0, 0x3f	; 63
 3e8:	f8 94       	cli
 3ea:	de bf       	out	0x3e, r29	; 62
 3ec:	0f be       	out	0x3f, r0	; 63
 3ee:	cd bf       	out	0x3d, r28	; 61
 3f0:	df 91       	pop	r29
 3f2:	cf 91       	pop	r28
 3f4:	08 95       	ret

000003f6 <Write_Pin>:
 3f6:	cf 93       	push	r28
 3f8:	df 93       	push	r29
 3fa:	00 d0       	rcall	.+0      	; 0x3fc <Write_Pin+0x6>
 3fc:	00 d0       	rcall	.+0      	; 0x3fe <Write_Pin+0x8>
 3fe:	cd b7       	in	r28, 0x3d	; 61
 400:	de b7       	in	r29, 0x3e	; 62
 402:	9a 83       	std	Y+2, r25	; 0x02
 404:	89 83       	std	Y+1, r24	; 0x01
 406:	6b 83       	std	Y+3, r22	; 0x03
 408:	4c 83       	std	Y+4, r20	; 0x04
 40a:	89 81       	ldd	r24, Y+1	; 0x01
 40c:	9a 81       	ldd	r25, Y+2	; 0x02
 40e:	c9 97       	sbiw	r24, 0x39	; 57
 410:	71 f0       	breq	.+28     	; 0x42e <__EEPROM_REGION_LENGTH__+0x2e>
 412:	89 81       	ldd	r24, Y+1	; 0x01
 414:	9a 81       	ldd	r25, Y+2	; 0x02
 416:	c6 97       	sbiw	r24, 0x36	; 54
 418:	51 f0       	breq	.+20     	; 0x42e <__EEPROM_REGION_LENGTH__+0x2e>
 41a:	89 81       	ldd	r24, Y+1	; 0x01
 41c:	9a 81       	ldd	r25, Y+2	; 0x02
 41e:	c3 97       	sbiw	r24, 0x33	; 51
 420:	31 f0       	breq	.+12     	; 0x42e <__EEPROM_REGION_LENGTH__+0x2e>
 422:	89 81       	ldd	r24, Y+1	; 0x01
 424:	9a 81       	ldd	r25, Y+2	; 0x02
 426:	c0 97       	sbiw	r24, 0x30	; 48
 428:	11 f0       	breq	.+4      	; 0x42e <__EEPROM_REGION_LENGTH__+0x2e>
 42a:	80 e0       	ldi	r24, 0x00	; 0
 42c:	1d c0       	rjmp	.+58     	; 0x468 <__EEPROM_REGION_LENGTH__+0x68>
 42e:	8c 81       	ldd	r24, Y+4	; 0x04
 430:	81 30       	cpi	r24, 0x01	; 1
 432:	61 f4       	brne	.+24     	; 0x44c <__EEPROM_REGION_LENGTH__+0x4c>
 434:	89 81       	ldd	r24, Y+1	; 0x01
 436:	9a 81       	ldd	r25, Y+2	; 0x02
 438:	fc 01       	movw	r30, r24
 43a:	92 81       	ldd	r25, Z+2	; 0x02
 43c:	8b 81       	ldd	r24, Y+3	; 0x03
 43e:	29 2f       	mov	r18, r25
 440:	28 2b       	or	r18, r24
 442:	89 81       	ldd	r24, Y+1	; 0x01
 444:	9a 81       	ldd	r25, Y+2	; 0x02
 446:	fc 01       	movw	r30, r24
 448:	22 83       	std	Z+2, r18	; 0x02
 44a:	0d c0       	rjmp	.+26     	; 0x466 <__EEPROM_REGION_LENGTH__+0x66>
 44c:	89 81       	ldd	r24, Y+1	; 0x01
 44e:	9a 81       	ldd	r25, Y+2	; 0x02
 450:	fc 01       	movw	r30, r24
 452:	82 81       	ldd	r24, Z+2	; 0x02
 454:	98 2f       	mov	r25, r24
 456:	8b 81       	ldd	r24, Y+3	; 0x03
 458:	80 95       	com	r24
 45a:	89 23       	and	r24, r25
 45c:	28 2f       	mov	r18, r24
 45e:	89 81       	ldd	r24, Y+1	; 0x01
 460:	9a 81       	ldd	r25, Y+2	; 0x02
 462:	fc 01       	movw	r30, r24
 464:	22 83       	std	Z+2, r18	; 0x02
 466:	81 e0       	ldi	r24, 0x01	; 1
 468:	0f 90       	pop	r0
 46a:	0f 90       	pop	r0
 46c:	0f 90       	pop	r0
 46e:	0f 90       	pop	r0
 470:	df 91       	pop	r29
 472:	cf 91       	pop	r28
 474:	08 95       	ret

00000476 <Toggle_pin>:

void Toggle_pin(St_GPIO *GPIO,unsigned char Pin)
{
 476:	cf 93       	push	r28
 478:	df 93       	push	r29
 47a:	00 d0       	rcall	.+0      	; 0x47c <Toggle_pin+0x6>
 47c:	1f 92       	push	r1
 47e:	cd b7       	in	r28, 0x3d	; 61
 480:	de b7       	in	r29, 0x3e	; 62
 482:	9a 83       	std	Y+2, r25	; 0x02
 484:	89 83       	std	Y+1, r24	; 0x01
 486:	6b 83       	std	Y+3, r22	; 0x03
	if(!(Check_PORT(GPIO))){return;}
 488:	89 81       	ldd	r24, Y+1	; 0x01
 48a:	9a 81       	ldd	r25, Y+2	; 0x02
 48c:	c9 97       	sbiw	r24, 0x39	; 57
 48e:	61 f0       	breq	.+24     	; 0x4a8 <Toggle_pin+0x32>
 490:	89 81       	ldd	r24, Y+1	; 0x01
 492:	9a 81       	ldd	r25, Y+2	; 0x02
 494:	c6 97       	sbiw	r24, 0x36	; 54
 496:	41 f0       	breq	.+16     	; 0x4a8 <Toggle_pin+0x32>
 498:	89 81       	ldd	r24, Y+1	; 0x01
 49a:	9a 81       	ldd	r25, Y+2	; 0x02
 49c:	c3 97       	sbiw	r24, 0x33	; 51
 49e:	21 f0       	breq	.+8      	; 0x4a8 <Toggle_pin+0x32>
 4a0:	89 81       	ldd	r24, Y+1	; 0x01
 4a2:	9a 81       	ldd	r25, Y+2	; 0x02
 4a4:	c0 97       	sbiw	r24, 0x30	; 48
 4a6:	61 f4       	brne	.+24     	; 0x4c0 <Toggle_pin+0x4a>

	GPIO->Un_PORTx.PORTx ^= Pin;
 4a8:	89 81       	ldd	r24, Y+1	; 0x01
 4aa:	9a 81       	ldd	r25, Y+2	; 0x02
 4ac:	fc 01       	movw	r30, r24
 4ae:	92 81       	ldd	r25, Z+2	; 0x02
 4b0:	8b 81       	ldd	r24, Y+3	; 0x03
 4b2:	29 2f       	mov	r18, r25
 4b4:	28 27       	eor	r18, r24
 4b6:	89 81       	ldd	r24, Y+1	; 0x01
 4b8:	9a 81       	ldd	r25, Y+2	; 0x02
 4ba:	fc 01       	movw	r30, r24
 4bc:	22 83       	std	Z+2, r18	; 0x02
 4be:	01 c0       	rjmp	.+2      	; 0x4c2 <Toggle_pin+0x4c>

}

void Toggle_pin(St_GPIO *GPIO,unsigned char Pin)
{
	if(!(Check_PORT(GPIO))){return;}
 4c0:	00 00       	nop

	GPIO->Un_PORTx.PORTx ^= Pin;
}
 4c2:	0f 90       	pop	r0
 4c4:	0f 90       	pop	r0
 4c6:	0f 90       	pop	r0
 4c8:	df 91       	pop	r29
 4ca:	cf 91       	pop	r28
 4cc:	08 95       	ret

000004ce <Write_Port_Register>:

void Write_Port_Register(St_GPIO *GPIO,unsigned char Pin)
{
 4ce:	cf 93       	push	r28
 4d0:	df 93       	push	r29
 4d2:	00 d0       	rcall	.+0      	; 0x4d4 <Write_Port_Register+0x6>
 4d4:	1f 92       	push	r1
 4d6:	cd b7       	in	r28, 0x3d	; 61
 4d8:	de b7       	in	r29, 0x3e	; 62
 4da:	9a 83       	std	Y+2, r25	; 0x02
 4dc:	89 83       	std	Y+1, r24	; 0x01
 4de:	6b 83       	std	Y+3, r22	; 0x03
	if(!(Check_PORT(GPIO))){return;}
 4e0:	89 81       	ldd	r24, Y+1	; 0x01
 4e2:	9a 81       	ldd	r25, Y+2	; 0x02
 4e4:	c9 97       	sbiw	r24, 0x39	; 57
 4e6:	61 f0       	breq	.+24     	; 0x500 <Write_Port_Register+0x32>
 4e8:	89 81       	ldd	r24, Y+1	; 0x01
 4ea:	9a 81       	ldd	r25, Y+2	; 0x02
 4ec:	c6 97       	sbiw	r24, 0x36	; 54
 4ee:	41 f0       	breq	.+16     	; 0x500 <Write_Port_Register+0x32>
 4f0:	89 81       	ldd	r24, Y+1	; 0x01
 4f2:	9a 81       	ldd	r25, Y+2	; 0x02
 4f4:	c3 97       	sbiw	r24, 0x33	; 51
 4f6:	21 f0       	breq	.+8      	; 0x500 <Write_Port_Register+0x32>
 4f8:	89 81       	ldd	r24, Y+1	; 0x01
 4fa:	9a 81       	ldd	r25, Y+2	; 0x02
 4fc:	c0 97       	sbiw	r24, 0x30	; 48
 4fe:	31 f4       	brne	.+12     	; 0x50c <Write_Port_Register+0x3e>
	GPIO->Un_PORTx.PORTx = Pin;
 500:	89 81       	ldd	r24, Y+1	; 0x01
 502:	9a 81       	ldd	r25, Y+2	; 0x02
 504:	2b 81       	ldd	r18, Y+3	; 0x03
 506:	fc 01       	movw	r30, r24
 508:	22 83       	std	Z+2, r18	; 0x02
 50a:	01 c0       	rjmp	.+2      	; 0x50e <Write_Port_Register+0x40>
	GPIO->Un_PORTx.PORTx ^= Pin;
}

void Write_Port_Register(St_GPIO *GPIO,unsigned char Pin)
{
	if(!(Check_PORT(GPIO))){return;}
 50c:	00 00       	nop
	GPIO->Un_PORTx.PORTx = Pin;
}
 50e:	0f 90       	pop	r0
 510:	0f 90       	pop	r0
 512:	0f 90       	pop	r0
 514:	df 91       	pop	r29
 516:	cf 91       	pop	r28
 518:	08 95       	ret

0000051a <Init_PIR>:


//------------------------------ Global Functions ------------------------------

uint8_t Init_PIR(St_PIR_Sensor_Typedef *Instance)
{
 51a:	cf 93       	push	r28
 51c:	df 93       	push	r29
 51e:	00 d0       	rcall	.+0      	; 0x520 <Init_PIR+0x6>
 520:	00 d0       	rcall	.+0      	; 0x522 <Init_PIR+0x8>
 522:	1f 92       	push	r1
 524:	cd b7       	in	r28, 0x3d	; 61
 526:	de b7       	in	r29, 0x3e	; 62
 528:	9d 83       	std	Y+5, r25	; 0x05
 52a:	8c 83       	std	Y+4, r24	; 0x04
    GPIO_config config_i_o = {0};
 52c:	19 82       	std	Y+1, r1	; 0x01
 52e:	1a 82       	std	Y+2, r1	; 0x02
 530:	1b 82       	std	Y+3, r1	; 0x03
    config_i_o.pin = Instance->Input_Pin;
 532:	8c 81       	ldd	r24, Y+4	; 0x04
 534:	9d 81       	ldd	r25, Y+5	; 0x05
 536:	fc 01       	movw	r30, r24
 538:	82 81       	ldd	r24, Z+2	; 0x02
 53a:	89 83       	std	Y+1, r24	; 0x01
	if(Instance->method)
 53c:	8c 81       	ldd	r24, Y+4	; 0x04
 53e:	9d 81       	ldd	r25, Y+5	; 0x05
 540:	fc 01       	movw	r30, r24
 542:	83 81       	ldd	r24, Z+3	; 0x03
 544:	88 23       	and	r24, r24
 546:	09 f4       	brne	.+2      	; 0x54a <Init_PIR+0x30>
 548:	50 c0       	rjmp	.+160    	; 0x5ea <Init_PIR+0xd0>
    {
        config_i_o.mode = Rising_Ed_Ex_Int;
 54a:	83 e8       	ldi	r24, 0x83	; 131
 54c:	8a 83       	std	Y+2, r24	; 0x02
        if((Instance->Input_Pin == PIN_2) && (Instance->Input_Port == PORT_D))
 54e:	8c 81       	ldd	r24, Y+4	; 0x04
 550:	9d 81       	ldd	r25, Y+5	; 0x05
 552:	fc 01       	movw	r30, r24
 554:	82 81       	ldd	r24, Z+2	; 0x02
 556:	84 30       	cpi	r24, 0x04	; 4
 558:	89 f4       	brne	.+34     	; 0x57c <Init_PIR+0x62>
 55a:	8c 81       	ldd	r24, Y+4	; 0x04
 55c:	9d 81       	ldd	r25, Y+5	; 0x05
 55e:	fc 01       	movw	r30, r24
 560:	80 81       	ld	r24, Z
 562:	91 81       	ldd	r25, Z+1	; 0x01
 564:	c0 97       	sbiw	r24, 0x30	; 48
 566:	51 f4       	brne	.+20     	; 0x57c <Init_PIR+0x62>
        {
            Enable_EXTI_0();
 568:	8b e5       	ldi	r24, 0x5B	; 91
 56a:	90 e0       	ldi	r25, 0x00	; 0
 56c:	2b e5       	ldi	r18, 0x5B	; 91
 56e:	30 e0       	ldi	r19, 0x00	; 0
 570:	f9 01       	movw	r30, r18
 572:	20 81       	ld	r18, Z
 574:	20 64       	ori	r18, 0x40	; 64
 576:	fc 01       	movw	r30, r24
 578:	20 83       	st	Z, r18
 57a:	2d c0       	rjmp	.+90     	; 0x5d6 <Init_PIR+0xbc>
        }else if ((Instance->Input_Pin == PIN_3) && (Instance->Input_Port == PORT_D))
 57c:	8c 81       	ldd	r24, Y+4	; 0x04
 57e:	9d 81       	ldd	r25, Y+5	; 0x05
 580:	fc 01       	movw	r30, r24
 582:	82 81       	ldd	r24, Z+2	; 0x02
 584:	88 30       	cpi	r24, 0x08	; 8
 586:	89 f4       	brne	.+34     	; 0x5aa <Init_PIR+0x90>
 588:	8c 81       	ldd	r24, Y+4	; 0x04
 58a:	9d 81       	ldd	r25, Y+5	; 0x05
 58c:	fc 01       	movw	r30, r24
 58e:	80 81       	ld	r24, Z
 590:	91 81       	ldd	r25, Z+1	; 0x01
 592:	c0 97       	sbiw	r24, 0x30	; 48
 594:	51 f4       	brne	.+20     	; 0x5aa <Init_PIR+0x90>
        {
            Enable_EXTI_1();
 596:	8b e5       	ldi	r24, 0x5B	; 91
 598:	90 e0       	ldi	r25, 0x00	; 0
 59a:	2b e5       	ldi	r18, 0x5B	; 91
 59c:	30 e0       	ldi	r19, 0x00	; 0
 59e:	f9 01       	movw	r30, r18
 5a0:	20 81       	ld	r18, Z
 5a2:	20 68       	ori	r18, 0x80	; 128
 5a4:	fc 01       	movw	r30, r24
 5a6:	20 83       	st	Z, r18
 5a8:	16 c0       	rjmp	.+44     	; 0x5d6 <Init_PIR+0xbc>
        }else if ((Instance->Input_Pin == PIN_2) && (Instance->Input_Port == PORT_B))
 5aa:	8c 81       	ldd	r24, Y+4	; 0x04
 5ac:	9d 81       	ldd	r25, Y+5	; 0x05
 5ae:	fc 01       	movw	r30, r24
 5b0:	82 81       	ldd	r24, Z+2	; 0x02
 5b2:	84 30       	cpi	r24, 0x04	; 4
 5b4:	81 f4       	brne	.+32     	; 0x5d6 <Init_PIR+0xbc>
 5b6:	8c 81       	ldd	r24, Y+4	; 0x04
 5b8:	9d 81       	ldd	r25, Y+5	; 0x05
 5ba:	fc 01       	movw	r30, r24
 5bc:	80 81       	ld	r24, Z
 5be:	91 81       	ldd	r25, Z+1	; 0x01
 5c0:	c6 97       	sbiw	r24, 0x36	; 54
 5c2:	49 f4       	brne	.+18     	; 0x5d6 <Init_PIR+0xbc>
        {
            Enable_EXTI_2();
 5c4:	8b e5       	ldi	r24, 0x5B	; 91
 5c6:	90 e0       	ldi	r25, 0x00	; 0
 5c8:	2b e5       	ldi	r18, 0x5B	; 91
 5ca:	30 e0       	ldi	r19, 0x00	; 0
 5cc:	f9 01       	movw	r30, r18
 5ce:	20 81       	ld	r18, Z
 5d0:	20 62       	ori	r18, 0x20	; 32
 5d2:	fc 01       	movw	r30, r24
 5d4:	20 83       	st	Z, r18
        }
	    Enable_Global_EXTI();
 5d6:	8f e5       	ldi	r24, 0x5F	; 95
 5d8:	90 e0       	ldi	r25, 0x00	; 0
 5da:	2f e5       	ldi	r18, 0x5F	; 95
 5dc:	30 e0       	ldi	r19, 0x00	; 0
 5de:	f9 01       	movw	r30, r18
 5e0:	20 81       	ld	r18, Z
 5e2:	20 68       	ori	r18, 0x80	; 128
 5e4:	fc 01       	movw	r30, r24
 5e6:	20 83       	st	Z, r18
 5e8:	01 c0       	rjmp	.+2      	; 0x5ec <Init_PIR+0xd2>
    }else
    {
        config_i_o.mode = INPUT;
 5ea:	1a 82       	std	Y+2, r1	; 0x02
    }
	Init_GPIO(Instance->Input_Port,&config_i_o);
 5ec:	8c 81       	ldd	r24, Y+4	; 0x04
 5ee:	9d 81       	ldd	r25, Y+5	; 0x05
 5f0:	fc 01       	movw	r30, r24
 5f2:	80 81       	ld	r24, Z
 5f4:	91 81       	ldd	r25, Z+1	; 0x01
 5f6:	9e 01       	movw	r18, r28
 5f8:	2f 5f       	subi	r18, 0xFF	; 255
 5fa:	3f 4f       	sbci	r19, 0xFF	; 255
 5fc:	b9 01       	movw	r22, r18
 5fe:	0e 94 0d 01 	call	0x21a	; 0x21a <Init_GPIO>

    return 1;
 602:	81 e0       	ldi	r24, 0x01	; 1
}
 604:	0f 90       	pop	r0
 606:	0f 90       	pop	r0
 608:	0f 90       	pop	r0
 60a:	0f 90       	pop	r0
 60c:	0f 90       	pop	r0
 60e:	df 91       	pop	r29
 610:	cf 91       	pop	r28
 612:	08 95       	ret

00000614 <__vector_10>:
    return 1;
}

volatile uint8_t counter = 0;
ISR(TIMER0_COMP_vect)
{
 614:	1f 92       	push	r1
 616:	0f 92       	push	r0
 618:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
 61c:	0f 92       	push	r0
 61e:	11 24       	eor	r1, r1
 620:	2f 93       	push	r18
 622:	3f 93       	push	r19
 624:	4f 93       	push	r20
 626:	5f 93       	push	r21
 628:	6f 93       	push	r22
 62a:	7f 93       	push	r23
 62c:	8f 93       	push	r24
 62e:	9f 93       	push	r25
 630:	af 93       	push	r26
 632:	bf 93       	push	r27
 634:	ef 93       	push	r30
 636:	ff 93       	push	r31
 638:	cf 93       	push	r28
 63a:	df 93       	push	r29
 63c:	cd b7       	in	r28, 0x3d	; 61
 63e:	de b7       	in	r29, 0x3e	; 62
    counter++;
 640:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <counter>
 644:	8f 5f       	subi	r24, 0xFF	; 255
 646:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <counter>
    Write_Port_Register(PORT_A,counter);
 64a:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <counter>
 64e:	68 2f       	mov	r22, r24
 650:	89 e3       	ldi	r24, 0x39	; 57
 652:	90 e0       	ldi	r25, 0x00	; 0
 654:	0e 94 67 02 	call	0x4ce	; 0x4ce <Write_Port_Register>
}
 658:	00 00       	nop
 65a:	df 91       	pop	r29
 65c:	cf 91       	pop	r28
 65e:	ff 91       	pop	r31
 660:	ef 91       	pop	r30
 662:	bf 91       	pop	r27
 664:	af 91       	pop	r26
 666:	9f 91       	pop	r25
 668:	8f 91       	pop	r24
 66a:	7f 91       	pop	r23
 66c:	6f 91       	pop	r22
 66e:	5f 91       	pop	r21
 670:	4f 91       	pop	r20
 672:	3f 91       	pop	r19
 674:	2f 91       	pop	r18
 676:	0f 90       	pop	r0
 678:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
 67c:	0f 90       	pop	r0
 67e:	1f 90       	pop	r1
 680:	18 95       	reti

00000682 <__vector_11>:


ISR(TIMER0_OVF_vect)
{
 682:	1f 92       	push	r1
 684:	0f 92       	push	r0
 686:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
 68a:	0f 92       	push	r0
 68c:	11 24       	eor	r1, r1
 68e:	cf 93       	push	r28
 690:	df 93       	push	r29
 692:	cd b7       	in	r28, 0x3d	; 61
 694:	de b7       	in	r29, 0x3e	; 62
    
}
 696:	00 00       	nop
 698:	df 91       	pop	r29
 69a:	cf 91       	pop	r28
 69c:	0f 90       	pop	r0
 69e:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
 6a2:	0f 90       	pop	r0
 6a4:	1f 90       	pop	r1
 6a6:	18 95       	reti

000006a8 <Uart_Receive>:
/**
 * @brief   Used to Receiv Data form UART by polling
 * @return  unsigned char: return received value 
 */
unsigned char *Uart_Receive(St_UART_driver *_init_uart)
{
 6a8:	cf 93       	push	r28
 6aa:	df 93       	push	r29
 6ac:	00 d0       	rcall	.+0      	; 0x6ae <Uart_Receive+0x6>
 6ae:	00 d0       	rcall	.+0      	; 0x6b0 <Uart_Receive+0x8>
 6b0:	00 d0       	rcall	.+0      	; 0x6b2 <Uart_Receive+0xa>
 6b2:	cd b7       	in	r28, 0x3d	; 61
 6b4:	de b7       	in	r29, 0x3e	; 62
 6b6:	9e 83       	std	Y+6, r25	; 0x06
 6b8:	8d 83       	std	Y+5, r24	; 0x05
    uint8_t index = 0;
 6ba:	19 82       	std	Y+1, r1	; 0x01
    unsigned char status, resh, resl;
    
    while(_init_uart->msg[index] != '#')
 6bc:	66 c0       	rjmp	.+204    	; 0x78a <Uart_Receive+0xe2>
    {
        
        while(!(UCSRA_R->UCSRA_field & (1 << RXC)));
 6be:	00 00       	nop
 6c0:	8b e2       	ldi	r24, 0x2B	; 43
 6c2:	90 e0       	ldi	r25, 0x00	; 0
 6c4:	fc 01       	movw	r30, r24
 6c6:	80 81       	ld	r24, Z
 6c8:	88 23       	and	r24, r24
 6ca:	d4 f7       	brge	.-12     	; 0x6c0 <Uart_Receive+0x18>

        status = UCSRA_R->UCSRA_field;
 6cc:	8b e2       	ldi	r24, 0x2B	; 43
 6ce:	90 e0       	ldi	r25, 0x00	; 0
 6d0:	fc 01       	movw	r30, r24
 6d2:	80 81       	ld	r24, Z
 6d4:	8a 83       	std	Y+2, r24	; 0x02
        resh = UCSRB_R->UCSRB_field;
 6d6:	8a e2       	ldi	r24, 0x2A	; 42
 6d8:	90 e0       	ldi	r25, 0x00	; 0
 6da:	fc 01       	movw	r30, r24
 6dc:	80 81       	ld	r24, Z
 6de:	8b 83       	std	Y+3, r24	; 0x03
        resl = UDR;
 6e0:	8c e2       	ldi	r24, 0x2C	; 44
 6e2:	90 e0       	ldi	r25, 0x00	; 0
 6e4:	fc 01       	movw	r30, r24
 6e6:	80 81       	ld	r24, Z
 6e8:	8c 83       	std	Y+4, r24	; 0x04

        if(status & ((1 << FE)|(1 << DOR)|(1 << PE)))
 6ea:	8a 81       	ldd	r24, Y+2	; 0x02
 6ec:	88 2f       	mov	r24, r24
 6ee:	90 e0       	ldi	r25, 0x00	; 0
 6f0:	8c 71       	andi	r24, 0x1C	; 28
 6f2:	99 27       	eor	r25, r25
 6f4:	89 2b       	or	r24, r25
 6f6:	19 f0       	breq	.+6      	; 0x6fe <Uart_Receive+0x56>
            return -1;
 6f8:	8f ef       	ldi	r24, 0xFF	; 255
 6fa:	9f ef       	ldi	r25, 0xFF	; 255
 6fc:	55 c0       	rjmp	.+170    	; 0x7a8 <Uart_Receive+0x100>
        resh = (resh >> 1) & 0x01;
 6fe:	8b 81       	ldd	r24, Y+3	; 0x03
 700:	86 95       	lsr	r24
 702:	81 70       	andi	r24, 0x01	; 1
 704:	8b 83       	std	Y+3, r24	; 0x03
        if((index == 15) || (_init_uart->msg[index] == '#')){index = 0;}
 706:	89 81       	ldd	r24, Y+1	; 0x01
 708:	8f 30       	cpi	r24, 0x0F	; 15
 70a:	71 f0       	breq	.+28     	; 0x728 <Uart_Receive+0x80>
 70c:	8d 81       	ldd	r24, Y+5	; 0x05
 70e:	9e 81       	ldd	r25, Y+6	; 0x06
 710:	fc 01       	movw	r30, r24
 712:	21 85       	ldd	r18, Z+9	; 0x09
 714:	32 85       	ldd	r19, Z+10	; 0x0a
 716:	89 81       	ldd	r24, Y+1	; 0x01
 718:	88 2f       	mov	r24, r24
 71a:	90 e0       	ldi	r25, 0x00	; 0
 71c:	82 0f       	add	r24, r18
 71e:	93 1f       	adc	r25, r19
 720:	fc 01       	movw	r30, r24
 722:	80 81       	ld	r24, Z
 724:	83 32       	cpi	r24, 0x23	; 35
 726:	09 f4       	brne	.+2      	; 0x72a <Uart_Receive+0x82>
 728:	19 82       	std	Y+1, r1	; 0x01
        _init_uart->msg[index] = ((resh << 8) | resl);
 72a:	8d 81       	ldd	r24, Y+5	; 0x05
 72c:	9e 81       	ldd	r25, Y+6	; 0x06
 72e:	fc 01       	movw	r30, r24
 730:	21 85       	ldd	r18, Z+9	; 0x09
 732:	32 85       	ldd	r19, Z+10	; 0x0a
 734:	89 81       	ldd	r24, Y+1	; 0x01
 736:	88 2f       	mov	r24, r24
 738:	90 e0       	ldi	r25, 0x00	; 0
 73a:	82 0f       	add	r24, r18
 73c:	93 1f       	adc	r25, r19
 73e:	2b 81       	ldd	r18, Y+3	; 0x03
 740:	22 2f       	mov	r18, r18
 742:	30 e0       	ldi	r19, 0x00	; 0
 744:	32 2f       	mov	r19, r18
 746:	22 27       	eor	r18, r18
 748:	32 2f       	mov	r19, r18
 74a:	2c 81       	ldd	r18, Y+4	; 0x04
 74c:	23 2b       	or	r18, r19
 74e:	fc 01       	movw	r30, r24
 750:	20 83       	st	Z, r18
        if(_init_uart->msg[index] == '#') {return &_init_uart->msg[index];}
 752:	8d 81       	ldd	r24, Y+5	; 0x05
 754:	9e 81       	ldd	r25, Y+6	; 0x06
 756:	fc 01       	movw	r30, r24
 758:	21 85       	ldd	r18, Z+9	; 0x09
 75a:	32 85       	ldd	r19, Z+10	; 0x0a
 75c:	89 81       	ldd	r24, Y+1	; 0x01
 75e:	88 2f       	mov	r24, r24
 760:	90 e0       	ldi	r25, 0x00	; 0
 762:	82 0f       	add	r24, r18
 764:	93 1f       	adc	r25, r19
 766:	fc 01       	movw	r30, r24
 768:	80 81       	ld	r24, Z
 76a:	83 32       	cpi	r24, 0x23	; 35
 76c:	59 f4       	brne	.+22     	; 0x784 <Uart_Receive+0xdc>
 76e:	8d 81       	ldd	r24, Y+5	; 0x05
 770:	9e 81       	ldd	r25, Y+6	; 0x06
 772:	fc 01       	movw	r30, r24
 774:	21 85       	ldd	r18, Z+9	; 0x09
 776:	32 85       	ldd	r19, Z+10	; 0x0a
 778:	89 81       	ldd	r24, Y+1	; 0x01
 77a:	88 2f       	mov	r24, r24
 77c:	90 e0       	ldi	r25, 0x00	; 0
 77e:	82 0f       	add	r24, r18
 780:	93 1f       	adc	r25, r19
 782:	12 c0       	rjmp	.+36     	; 0x7a8 <Uart_Receive+0x100>
        index++;
 784:	89 81       	ldd	r24, Y+1	; 0x01
 786:	8f 5f       	subi	r24, 0xFF	; 255
 788:	89 83       	std	Y+1, r24	; 0x01
unsigned char *Uart_Receive(St_UART_driver *_init_uart)
{
    uint8_t index = 0;
    unsigned char status, resh, resl;
    
    while(_init_uart->msg[index] != '#')
 78a:	8d 81       	ldd	r24, Y+5	; 0x05
 78c:	9e 81       	ldd	r25, Y+6	; 0x06
 78e:	fc 01       	movw	r30, r24
 790:	21 85       	ldd	r18, Z+9	; 0x09
 792:	32 85       	ldd	r19, Z+10	; 0x0a
 794:	89 81       	ldd	r24, Y+1	; 0x01
 796:	88 2f       	mov	r24, r24
 798:	90 e0       	ldi	r25, 0x00	; 0
 79a:	82 0f       	add	r24, r18
 79c:	93 1f       	adc	r25, r19
 79e:	fc 01       	movw	r30, r24
 7a0:	80 81       	ld	r24, Z
 7a2:	83 32       	cpi	r24, 0x23	; 35
 7a4:	09 f0       	breq	.+2      	; 0x7a8 <Uart_Receive+0x100>
 7a6:	8b cf       	rjmp	.-234    	; 0x6be <Uart_Receive+0x16>
        index++;
    }
    

    
}
 7a8:	26 96       	adiw	r28, 0x06	; 6
 7aa:	0f b6       	in	r0, 0x3f	; 63
 7ac:	f8 94       	cli
 7ae:	de bf       	out	0x3e, r29	; 62
 7b0:	0f be       	out	0x3f, r0	; 63
 7b2:	cd bf       	out	0x3d, r28	; 61
 7b4:	df 91       	pop	r29
 7b6:	cf 91       	pop	r28
 7b8:	08 95       	ret

000007ba <__vector_13>:

ISR(USART_RXC_vect)
{
 7ba:	1f 92       	push	r1
 7bc:	0f 92       	push	r0
 7be:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
 7c2:	0f 92       	push	r0
 7c4:	11 24       	eor	r1, r1
 7c6:	2f 93       	push	r18
 7c8:	3f 93       	push	r19
 7ca:	4f 93       	push	r20
 7cc:	5f 93       	push	r21
 7ce:	6f 93       	push	r22
 7d0:	7f 93       	push	r23
 7d2:	8f 93       	push	r24
 7d4:	9f 93       	push	r25
 7d6:	af 93       	push	r26
 7d8:	bf 93       	push	r27
 7da:	ef 93       	push	r30
 7dc:	ff 93       	push	r31
 7de:	cf 93       	push	r28
 7e0:	df 93       	push	r29
 7e2:	cd b7       	in	r28, 0x3d	; 61
 7e4:	de b7       	in	r29, 0x3e	; 62
    Uart_Receive(&UART_Config);
 7e6:	85 e6       	ldi	r24, 0x65	; 101
 7e8:	90 e0       	ldi	r25, 0x00	; 0
 7ea:	0e 94 54 03 	call	0x6a8	; 0x6a8 <Uart_Receive>
}
 7ee:	00 00       	nop
 7f0:	df 91       	pop	r29
 7f2:	cf 91       	pop	r28
 7f4:	ff 91       	pop	r31
 7f6:	ef 91       	pop	r30
 7f8:	bf 91       	pop	r27
 7fa:	af 91       	pop	r26
 7fc:	9f 91       	pop	r25
 7fe:	8f 91       	pop	r24
 800:	7f 91       	pop	r23
 802:	6f 91       	pop	r22
 804:	5f 91       	pop	r21
 806:	4f 91       	pop	r20
 808:	3f 91       	pop	r19
 80a:	2f 91       	pop	r18
 80c:	0f 90       	pop	r0
 80e:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
 812:	0f 90       	pop	r0
 814:	1f 90       	pop	r1
 816:	18 95       	reti

00000818 <__vector_15>:


ISR(USART_TXC_vect)
{
 818:	1f 92       	push	r1
 81a:	0f 92       	push	r0
 81c:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
 820:	0f 92       	push	r0
 822:	11 24       	eor	r1, r1
 824:	cf 93       	push	r28
 826:	df 93       	push	r29
 828:	cd b7       	in	r28, 0x3d	; 61
 82a:	de b7       	in	r29, 0x3e	; 62

}
 82c:	00 00       	nop
 82e:	df 91       	pop	r29
 830:	cf 91       	pop	r28
 832:	0f 90       	pop	r0
 834:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
 838:	0f 90       	pop	r0
 83a:	1f 90       	pop	r1
 83c:	18 95       	reti

0000083e <__vector_14>:


ISR(USART_UDRE_vect)
{
 83e:	1f 92       	push	r1
 840:	0f 92       	push	r0
 842:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
 846:	0f 92       	push	r0
 848:	11 24       	eor	r1, r1
 84a:	2f 93       	push	r18
 84c:	8f 93       	push	r24
 84e:	9f 93       	push	r25
 850:	ef 93       	push	r30
 852:	ff 93       	push	r31
 854:	cf 93       	push	r28
 856:	df 93       	push	r29
 858:	cd b7       	in	r28, 0x3d	; 61
 85a:	de b7       	in	r29, 0x3e	; 62
    UCSRB_R->UCSRB_bits.UDRIE_b = 0;
 85c:	8a e2       	ldi	r24, 0x2A	; 42
 85e:	90 e0       	ldi	r25, 0x00	; 0
 860:	fc 01       	movw	r30, r24
 862:	20 81       	ld	r18, Z
 864:	2f 7d       	andi	r18, 0xDF	; 223
 866:	fc 01       	movw	r30, r24
 868:	20 83       	st	Z, r18
 86a:	00 00       	nop
 86c:	df 91       	pop	r29
 86e:	cf 91       	pop	r28
 870:	ff 91       	pop	r31
 872:	ef 91       	pop	r30
 874:	9f 91       	pop	r25
 876:	8f 91       	pop	r24
 878:	2f 91       	pop	r18
 87a:	0f 90       	pop	r0
 87c:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
 880:	0f 90       	pop	r0
 882:	1f 90       	pop	r1
 884:	18 95       	reti

00000886 <main>:
 886:	cf 93       	push	r28
 888:	df 93       	push	r29
 88a:	cd b7       	in	r28, 0x3d	; 61
 88c:	de b7       	in	r29, 0x3e	; 62
 88e:	0e 94 49 00 	call	0x92	; 0x92 <init>
 892:	0e 94 74 00 	call	0xe8	; 0xe8 <program>
 896:	fd cf       	rjmp	.-6      	; 0x892 <main+0xc>

00000898 <_exit>:
 898:	f8 94       	cli

0000089a <__stop_program>:
 89a:	ff cf       	rjmp	.-2      	; 0x89a <__stop_program>
