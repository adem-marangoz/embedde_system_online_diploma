
Atmega32_test1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000982  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  00000982  00000a16  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000015  0080006a  0080006a  00000a20  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000a20  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000a50  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000238  00000000  00000000  00000a8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002752  00000000  00000000  00000cc4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ddd  00000000  00000000  00003416  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001283  00000000  00000000  000041f3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000007d8  00000000  00000000  00005478  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000012b6  00000000  00000000  00005c50  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001028  00000000  00000000  00006f06  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001b8  00000000  00000000  00007f2e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 80 00 	jmp	0x100	; 0x100 <__vector_1>
   8:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__vector_2>
   c:	0c 94 f7 00 	jmp	0x1ee	; 0x1ee <__vector_3>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 b4 03 	jmp	0x768	; 0x768 <__vector_9>
  28:	0c 94 8e 03 	jmp	0x71c	; 0x71c <__vector_10>
  2c:	0c 94 a1 03 	jmp	0x742	; 0x742 <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 50 04 	jmp	0x8a0	; 0x8a0 <__vector_13>
  38:	0c 94 92 04 	jmp	0x924	; 0x924 <__vector_14>
  3c:	0c 94 7f 04 	jmp	0x8fe	; 0x8fe <__vector_15>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 e8       	ldi	r30, 0x82	; 130
  68:	f9 e0       	ldi	r31, 0x09	; 9
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 36       	cpi	r26, 0x6A	; 106
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	aa e6       	ldi	r26, 0x6A	; 106
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	af 37       	cpi	r26, 0x7F	; 127
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 b6 04 	call	0x96c	; 0x96c <main>
  8a:	0c 94 bf 04 	jmp	0x97e	; 0x97e <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <init>:
//_____________________________ MACRO Definition _______________________________
#define Master			1
//==============================================================================

void init(void)
{
  92:	cf 93       	push	r28
  94:	df 93       	push	r29
  96:	00 d0       	rcall	.+0      	; 0x98 <init+0x6>
  98:	1f 92       	push	r1
  9a:	cd b7       	in	r28, 0x3d	; 61
  9c:	de b7       	in	r29, 0x3e	; 62

// ---------------------------- PIR Sensor -------------------------------------
	// Pir_config.Input_Port = PORT_D;
	// Pir_config.Input_Pin = PIN_2;
	// Pir_config.method = interrupt;
	Init_PIR(&Pir_config);
  9e:	8f e6       	ldi	r24, 0x6F	; 111
  a0:	90 e0       	ldi	r25, 0x00	; 0
  a2:	0e 94 83 02 	call	0x506	; 0x506 <Init_PIR>
//------------------------------- Servo motor ----------------------------------
	// config_servo_timer();
//==============================================================================

//--------------------------------- SPI Config ---------------------------------
spi_confige.Data_Modes = Sample_Ris_Setup_Fall;
  a6:	10 92 6d 00 	sts	0x006D, r1	; 0x80006d <__data_end+0x3>
spi_confige.Data_Order = Data_Order_MSB;
  aa:	10 92 6b 00 	sts	0x006B, r1	; 0x80006b <__data_end+0x1>
spi_confige.En_interrupt = Dis_SPI_Interrupt;
  ae:	10 92 6a 00 	sts	0x006A, r1	; 0x80006a <__data_end>
spi_confige.Slave_Master = SPI_Master;
  b2:	80 e1       	ldi	r24, 0x10	; 16
  b4:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <__data_end+0x2>
spi_confige.SPI_Freq = F_OSC_16;
  b8:	81 e0       	ldi	r24, 0x01	; 1
  ba:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__data_end+0x4>
SPI_Init(&spi_confige);
  be:	8a e6       	ldi	r24, 0x6A	; 106
  c0:	90 e0       	ldi	r25, 0x00	; 0
  c2:	0e 94 00 03 	call	0x600	; 0x600 <SPI_Init>
//==============================================================================


//------------------------------ EXti pin config -------------------------------
GPIO_config config_i_o = {0};
  c6:	19 82       	std	Y+1, r1	; 0x01
  c8:	1a 82       	std	Y+2, r1	; 0x02
  ca:	1b 82       	std	Y+3, r1	; 0x03
config_i_o.pin = PIN_2;
  cc:	84 e0       	ldi	r24, 0x04	; 4
  ce:	89 83       	std	Y+1, r24	; 0x01
config_i_o.mode = Falling_Ed_Ex_Int;
  d0:	82 e8       	ldi	r24, 0x82	; 130
  d2:	8a 83       	std	Y+2, r24	; 0x02
Init_GPIO(PORT_D,&config_i_o);
  d4:	ce 01       	movw	r24, r28
  d6:	01 96       	adiw	r24, 0x01	; 1
  d8:	bc 01       	movw	r22, r24
  da:	80 e3       	ldi	r24, 0x30	; 48
  dc:	90 e0       	ldi	r25, 0x00	; 0
  de:	0e 94 27 01 	call	0x24e	; 0x24e <Init_GPIO>
//==============================================================================

}
  e2:	00 00       	nop
  e4:	0f 90       	pop	r0
  e6:	0f 90       	pop	r0
  e8:	0f 90       	pop	r0
  ea:	df 91       	pop	r29
  ec:	cf 91       	pop	r28
  ee:	08 95       	ret

000000f0 <program>:
uint16_t counter = 0;
void program(void)
{ 	
  f0:	cf 93       	push	r28
  f2:	df 93       	push	r29
  f4:	cd b7       	in	r28, 0x3d	; 61
  f6:	de b7       	in	r29, 0x3e	; 62
	
}
  f8:	00 00       	nop
  fa:	df 91       	pop	r29
  fc:	cf 91       	pop	r28
  fe:	08 95       	ret

00000100 <__vector_1>:



ISR(INT0_vect)
{
 100:	1f 92       	push	r1
 102:	0f 92       	push	r0
 104:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
 108:	0f 92       	push	r0
 10a:	11 24       	eor	r1, r1
 10c:	2f 93       	push	r18
 10e:	3f 93       	push	r19
 110:	4f 93       	push	r20
 112:	5f 93       	push	r21
 114:	6f 93       	push	r22
 116:	7f 93       	push	r23
 118:	8f 93       	push	r24
 11a:	9f 93       	push	r25
 11c:	af 93       	push	r26
 11e:	bf 93       	push	r27
 120:	ef 93       	push	r30
 122:	ff 93       	push	r31
 124:	cf 93       	push	r28
 126:	df 93       	push	r29
 128:	cd b7       	in	r28, 0x3d	; 61
 12a:	de b7       	in	r29, 0x3e	; 62
    volatile static uint8_t counter = 0;
	if(counter < 10)
 12c:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <counter.2373>
 130:	8a 30       	cpi	r24, 0x0A	; 10
 132:	c0 f4       	brcc	.+48     	; 0x164 <__vector_1+0x64>
	{
		SPI_MasterTransmit_Char(&spi_confige ,numbers[counter]);
 134:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <counter.2373>
 138:	88 2f       	mov	r24, r24
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	80 5a       	subi	r24, 0xA0	; 160
 13e:	9f 4f       	sbci	r25, 0xFF	; 255
 140:	fc 01       	movw	r30, r24
 142:	80 81       	ld	r24, Z
 144:	68 2f       	mov	r22, r24
 146:	8a e6       	ldi	r24, 0x6A	; 106
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	0e 94 63 03 	call	0x6c6	; 0x6c6 <SPI_MasterTransmit_Char>
		counter ++;
 14e:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <counter.2373>
 152:	8f 5f       	subi	r24, 0xFF	; 255
 154:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <counter.2373>
		if(counter == 10){counter = 0;}
 158:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <counter.2373>
 15c:	8a 30       	cpi	r24, 0x0A	; 10
 15e:	11 f4       	brne	.+4      	; 0x164 <__vector_1+0x64>
 160:	10 92 73 00 	sts	0x0073, r1	; 0x800073 <counter.2373>
	}
}
 164:	00 00       	nop
 166:	df 91       	pop	r29
 168:	cf 91       	pop	r28
 16a:	ff 91       	pop	r31
 16c:	ef 91       	pop	r30
 16e:	bf 91       	pop	r27
 170:	af 91       	pop	r26
 172:	9f 91       	pop	r25
 174:	8f 91       	pop	r24
 176:	7f 91       	pop	r23
 178:	6f 91       	pop	r22
 17a:	5f 91       	pop	r21
 17c:	4f 91       	pop	r20
 17e:	3f 91       	pop	r19
 180:	2f 91       	pop	r18
 182:	0f 90       	pop	r0
 184:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
 188:	0f 90       	pop	r0
 18a:	1f 90       	pop	r1
 18c:	18 95       	reti

0000018e <__vector_2>:


ISR(INT1_vect)
{
 18e:	1f 92       	push	r1
 190:	0f 92       	push	r0
 192:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
 196:	0f 92       	push	r0
 198:	11 24       	eor	r1, r1
 19a:	2f 93       	push	r18
 19c:	3f 93       	push	r19
 19e:	4f 93       	push	r20
 1a0:	5f 93       	push	r21
 1a2:	6f 93       	push	r22
 1a4:	7f 93       	push	r23
 1a6:	8f 93       	push	r24
 1a8:	9f 93       	push	r25
 1aa:	af 93       	push	r26
 1ac:	bf 93       	push	r27
 1ae:	ef 93       	push	r30
 1b0:	ff 93       	push	r31
 1b2:	cf 93       	push	r28
 1b4:	df 93       	push	r29
 1b6:	cd b7       	in	r28, 0x3d	; 61
 1b8:	de b7       	in	r29, 0x3e	; 62
    Toggle_pin(PORT_A,PIN_0);
 1ba:	61 e0       	ldi	r22, 0x01	; 1
 1bc:	89 e3       	ldi	r24, 0x39	; 57
 1be:	90 e0       	ldi	r25, 0x00	; 0
 1c0:	0e 94 57 02 	call	0x4ae	; 0x4ae <Toggle_pin>
}
 1c4:	00 00       	nop
 1c6:	df 91       	pop	r29
 1c8:	cf 91       	pop	r28
 1ca:	ff 91       	pop	r31
 1cc:	ef 91       	pop	r30
 1ce:	bf 91       	pop	r27
 1d0:	af 91       	pop	r26
 1d2:	9f 91       	pop	r25
 1d4:	8f 91       	pop	r24
 1d6:	7f 91       	pop	r23
 1d8:	6f 91       	pop	r22
 1da:	5f 91       	pop	r21
 1dc:	4f 91       	pop	r20
 1de:	3f 91       	pop	r19
 1e0:	2f 91       	pop	r18
 1e2:	0f 90       	pop	r0
 1e4:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
 1e8:	0f 90       	pop	r0
 1ea:	1f 90       	pop	r1
 1ec:	18 95       	reti

000001ee <__vector_3>:


ISR(INT2_vect)
{
 1ee:	1f 92       	push	r1
 1f0:	0f 92       	push	r0
 1f2:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
 1f6:	0f 92       	push	r0
 1f8:	11 24       	eor	r1, r1
 1fa:	2f 93       	push	r18
 1fc:	3f 93       	push	r19
 1fe:	4f 93       	push	r20
 200:	5f 93       	push	r21
 202:	6f 93       	push	r22
 204:	7f 93       	push	r23
 206:	8f 93       	push	r24
 208:	9f 93       	push	r25
 20a:	af 93       	push	r26
 20c:	bf 93       	push	r27
 20e:	ef 93       	push	r30
 210:	ff 93       	push	r31
 212:	cf 93       	push	r28
 214:	df 93       	push	r29
 216:	cd b7       	in	r28, 0x3d	; 61
 218:	de b7       	in	r29, 0x3e	; 62
    Toggle_pin(PORT_A,PIN_0);
 21a:	61 e0       	ldi	r22, 0x01	; 1
 21c:	89 e3       	ldi	r24, 0x39	; 57
 21e:	90 e0       	ldi	r25, 0x00	; 0
 220:	0e 94 57 02 	call	0x4ae	; 0x4ae <Toggle_pin>
 224:	00 00       	nop
 226:	df 91       	pop	r29
 228:	cf 91       	pop	r28
 22a:	ff 91       	pop	r31
 22c:	ef 91       	pop	r30
 22e:	bf 91       	pop	r27
 230:	af 91       	pop	r26
 232:	9f 91       	pop	r25
 234:	8f 91       	pop	r24
 236:	7f 91       	pop	r23
 238:	6f 91       	pop	r22
 23a:	5f 91       	pop	r21
 23c:	4f 91       	pop	r20
 23e:	3f 91       	pop	r19
 240:	2f 91       	pop	r18
 242:	0f 90       	pop	r0
 244:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
 248:	0f 90       	pop	r0
 24a:	1f 90       	pop	r1
 24c:	18 95       	reti

0000024e <Init_GPIO>:
unsigned char Read_Pins(St_GPIO *GPIO)
{
	if(!(Check_PORT(GPIO))){return 0;}
	return (GPIO->Un_PINx.PINx);

}
 24e:	cf 93       	push	r28
 250:	df 93       	push	r29
 252:	cd b7       	in	r28, 0x3d	; 61
 254:	de b7       	in	r29, 0x3e	; 62
 256:	28 97       	sbiw	r28, 0x08	; 8
 258:	0f b6       	in	r0, 0x3f	; 63
 25a:	f8 94       	cli
 25c:	de bf       	out	0x3e, r29	; 62
 25e:	0f be       	out	0x3f, r0	; 63
 260:	cd bf       	out	0x3d, r28	; 61
 262:	9e 83       	std	Y+6, r25	; 0x06
 264:	8d 83       	std	Y+5, r24	; 0x05
 266:	78 87       	std	Y+8, r23	; 0x08
 268:	6f 83       	std	Y+7, r22	; 0x07
 26a:	8d 81       	ldd	r24, Y+5	; 0x05
 26c:	9e 81       	ldd	r25, Y+6	; 0x06
 26e:	c9 97       	sbiw	r24, 0x39	; 57
 270:	71 f0       	breq	.+28     	; 0x28e <Init_GPIO+0x40>
 272:	8d 81       	ldd	r24, Y+5	; 0x05
 274:	9e 81       	ldd	r25, Y+6	; 0x06
 276:	c6 97       	sbiw	r24, 0x36	; 54
 278:	51 f0       	breq	.+20     	; 0x28e <Init_GPIO+0x40>
 27a:	8d 81       	ldd	r24, Y+5	; 0x05
 27c:	9e 81       	ldd	r25, Y+6	; 0x06
 27e:	c3 97       	sbiw	r24, 0x33	; 51
 280:	31 f0       	breq	.+12     	; 0x28e <Init_GPIO+0x40>
 282:	8d 81       	ldd	r24, Y+5	; 0x05
 284:	9e 81       	ldd	r25, Y+6	; 0x06
 286:	c0 97       	sbiw	r24, 0x30	; 48
 288:	11 f0       	breq	.+4      	; 0x28e <Init_GPIO+0x40>
 28a:	80 e0       	ldi	r24, 0x00	; 0
 28c:	c7 c0       	rjmp	.+398    	; 0x41c <__EEPROM_REGION_LENGTH__+0x1c>
 28e:	1b 82       	std	Y+3, r1	; 0x03
 290:	1c 82       	std	Y+4, r1	; 0x04
 292:	19 82       	std	Y+1, r1	; 0x01
 294:	1a 82       	std	Y+2, r1	; 0x02
 296:	bd c0       	rjmp	.+378    	; 0x412 <__EEPROM_REGION_LENGTH__+0x12>
 298:	8a 81       	ldd	r24, Y+2	; 0x02
 29a:	28 2f       	mov	r18, r24
 29c:	30 e0       	ldi	r19, 0x00	; 0
 29e:	81 e0       	ldi	r24, 0x01	; 1
 2a0:	90 e0       	ldi	r25, 0x00	; 0
 2a2:	02 c0       	rjmp	.+4      	; 0x2a8 <Init_GPIO+0x5a>
 2a4:	88 0f       	add	r24, r24
 2a6:	99 1f       	adc	r25, r25
 2a8:	2a 95       	dec	r18
 2aa:	e2 f7       	brpl	.-8      	; 0x2a4 <Init_GPIO+0x56>
 2ac:	8b 83       	std	Y+3, r24	; 0x03
 2ae:	8f 81       	ldd	r24, Y+7	; 0x07
 2b0:	98 85       	ldd	r25, Y+8	; 0x08
 2b2:	fc 01       	movw	r30, r24
 2b4:	90 81       	ld	r25, Z
 2b6:	8b 81       	ldd	r24, Y+3	; 0x03
 2b8:	89 23       	and	r24, r25
 2ba:	8c 83       	std	Y+4, r24	; 0x04
 2bc:	9b 81       	ldd	r25, Y+3	; 0x03
 2be:	8c 81       	ldd	r24, Y+4	; 0x04
 2c0:	98 17       	cp	r25, r24
 2c2:	09 f0       	breq	.+2      	; 0x2c6 <Init_GPIO+0x78>
 2c4:	a3 c0       	rjmp	.+326    	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
 2c6:	8f 81       	ldd	r24, Y+7	; 0x07
 2c8:	98 85       	ldd	r25, Y+8	; 0x08
 2ca:	fc 01       	movw	r30, r24
 2cc:	81 81       	ldd	r24, Z+1	; 0x01
 2ce:	81 30       	cpi	r24, 0x01	; 1
 2d0:	79 f5       	brne	.+94     	; 0x330 <Init_GPIO+0xe2>
 2d2:	8d 81       	ldd	r24, Y+5	; 0x05
 2d4:	9e 81       	ldd	r25, Y+6	; 0x06
 2d6:	fc 01       	movw	r30, r24
 2d8:	81 81       	ldd	r24, Z+1	; 0x01
 2da:	89 83       	std	Y+1, r24	; 0x01
 2dc:	8f 81       	ldd	r24, Y+7	; 0x07
 2de:	98 85       	ldd	r25, Y+8	; 0x08
 2e0:	fc 01       	movw	r30, r24
 2e2:	81 81       	ldd	r24, Z+1	; 0x01
 2e4:	88 2f       	mov	r24, r24
 2e6:	90 e0       	ldi	r25, 0x00	; 0
 2e8:	2a 81       	ldd	r18, Y+2	; 0x02
 2ea:	22 2f       	mov	r18, r18
 2ec:	30 e0       	ldi	r19, 0x00	; 0
 2ee:	02 c0       	rjmp	.+4      	; 0x2f4 <Init_GPIO+0xa6>
 2f0:	88 0f       	add	r24, r24
 2f2:	99 1f       	adc	r25, r25
 2f4:	2a 95       	dec	r18
 2f6:	e2 f7       	brpl	.-8      	; 0x2f0 <Init_GPIO+0xa2>
 2f8:	98 2f       	mov	r25, r24
 2fa:	90 95       	com	r25
 2fc:	89 81       	ldd	r24, Y+1	; 0x01
 2fe:	89 23       	and	r24, r25
 300:	89 83       	std	Y+1, r24	; 0x01
 302:	8f 81       	ldd	r24, Y+7	; 0x07
 304:	98 85       	ldd	r25, Y+8	; 0x08
 306:	fc 01       	movw	r30, r24
 308:	81 81       	ldd	r24, Z+1	; 0x01
 30a:	88 2f       	mov	r24, r24
 30c:	90 e0       	ldi	r25, 0x00	; 0
 30e:	2a 81       	ldd	r18, Y+2	; 0x02
 310:	22 2f       	mov	r18, r18
 312:	30 e0       	ldi	r19, 0x00	; 0
 314:	02 c0       	rjmp	.+4      	; 0x31a <Init_GPIO+0xcc>
 316:	88 0f       	add	r24, r24
 318:	99 1f       	adc	r25, r25
 31a:	2a 95       	dec	r18
 31c:	e2 f7       	brpl	.-8      	; 0x316 <Init_GPIO+0xc8>
 31e:	98 2f       	mov	r25, r24
 320:	89 81       	ldd	r24, Y+1	; 0x01
 322:	89 2b       	or	r24, r25
 324:	89 83       	std	Y+1, r24	; 0x01
 326:	8d 81       	ldd	r24, Y+5	; 0x05
 328:	9e 81       	ldd	r25, Y+6	; 0x06
 32a:	29 81       	ldd	r18, Y+1	; 0x01
 32c:	fc 01       	movw	r30, r24
 32e:	21 83       	std	Z+1, r18	; 0x01
 330:	8f 81       	ldd	r24, Y+7	; 0x07
 332:	98 85       	ldd	r25, Y+8	; 0x08
 334:	fc 01       	movw	r30, r24
 336:	81 81       	ldd	r24, Z+1	; 0x01
 338:	88 23       	and	r24, r24
 33a:	0c f0       	brlt	.+2      	; 0x33e <Init_GPIO+0xf0>
 33c:	67 c0       	rjmp	.+206    	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
 33e:	8d 81       	ldd	r24, Y+5	; 0x05
 340:	9e 81       	ldd	r25, Y+6	; 0x06
 342:	c0 97       	sbiw	r24, 0x30	; 48
 344:	79 f5       	brne	.+94     	; 0x3a4 <Init_GPIO+0x156>
 346:	85 e5       	ldi	r24, 0x55	; 85
 348:	90 e0       	ldi	r25, 0x00	; 0
 34a:	fc 01       	movw	r30, r24
 34c:	80 81       	ld	r24, Z
 34e:	89 83       	std	Y+1, r24	; 0x01
 350:	8c 81       	ldd	r24, Y+4	; 0x04
 352:	84 30       	cpi	r24, 0x04	; 4
 354:	69 f4       	brne	.+26     	; 0x370 <Init_GPIO+0x122>
 356:	89 81       	ldd	r24, Y+1	; 0x01
 358:	8c 7f       	andi	r24, 0xFC	; 252
 35a:	89 83       	std	Y+1, r24	; 0x01
 35c:	8f 81       	ldd	r24, Y+7	; 0x07
 35e:	98 85       	ldd	r25, Y+8	; 0x08
 360:	fc 01       	movw	r30, r24
 362:	81 81       	ldd	r24, Z+1	; 0x01
 364:	98 2f       	mov	r25, r24
 366:	93 70       	andi	r25, 0x03	; 3
 368:	89 81       	ldd	r24, Y+1	; 0x01
 36a:	89 2b       	or	r24, r25
 36c:	89 83       	std	Y+1, r24	; 0x01
 36e:	15 c0       	rjmp	.+42     	; 0x39a <Init_GPIO+0x14c>
 370:	8c 81       	ldd	r24, Y+4	; 0x04
 372:	88 30       	cpi	r24, 0x08	; 8
 374:	91 f4       	brne	.+36     	; 0x39a <Init_GPIO+0x14c>
 376:	89 81       	ldd	r24, Y+1	; 0x01
 378:	83 7f       	andi	r24, 0xF3	; 243
 37a:	89 83       	std	Y+1, r24	; 0x01
 37c:	8f 81       	ldd	r24, Y+7	; 0x07
 37e:	98 85       	ldd	r25, Y+8	; 0x08
 380:	fc 01       	movw	r30, r24
 382:	81 81       	ldd	r24, Z+1	; 0x01
 384:	88 2f       	mov	r24, r24
 386:	90 e0       	ldi	r25, 0x00	; 0
 388:	88 0f       	add	r24, r24
 38a:	99 1f       	adc	r25, r25
 38c:	88 0f       	add	r24, r24
 38e:	99 1f       	adc	r25, r25
 390:	98 2f       	mov	r25, r24
 392:	9c 70       	andi	r25, 0x0C	; 12
 394:	89 81       	ldd	r24, Y+1	; 0x01
 396:	89 2b       	or	r24, r25
 398:	89 83       	std	Y+1, r24	; 0x01
 39a:	85 e5       	ldi	r24, 0x55	; 85
 39c:	90 e0       	ldi	r25, 0x00	; 0
 39e:	29 81       	ldd	r18, Y+1	; 0x01
 3a0:	fc 01       	movw	r30, r24
 3a2:	20 83       	st	Z, r18
 3a4:	8c 81       	ldd	r24, Y+4	; 0x04
 3a6:	84 30       	cpi	r24, 0x04	; 4
 3a8:	89 f5       	brne	.+98     	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
 3aa:	8d 81       	ldd	r24, Y+5	; 0x05
 3ac:	9e 81       	ldd	r25, Y+6	; 0x06
 3ae:	c6 97       	sbiw	r24, 0x36	; 54
 3b0:	69 f5       	brne	.+90     	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
 3b2:	84 e5       	ldi	r24, 0x54	; 84
 3b4:	90 e0       	ldi	r25, 0x00	; 0
 3b6:	fc 01       	movw	r30, r24
 3b8:	80 81       	ld	r24, Z
 3ba:	89 83       	std	Y+1, r24	; 0x01
 3bc:	8f 81       	ldd	r24, Y+7	; 0x07
 3be:	98 85       	ldd	r25, Y+8	; 0x08
 3c0:	fc 01       	movw	r30, r24
 3c2:	81 81       	ldd	r24, Z+1	; 0x01
 3c4:	82 78       	andi	r24, 0x82	; 130
 3c6:	82 95       	swap	r24
 3c8:	88 0f       	add	r24, r24
 3ca:	88 0f       	add	r24, r24
 3cc:	80 7c       	andi	r24, 0xC0	; 192
 3ce:	80 95       	com	r24
 3d0:	98 2f       	mov	r25, r24
 3d2:	89 81       	ldd	r24, Y+1	; 0x01
 3d4:	89 23       	and	r24, r25
 3d6:	89 83       	std	Y+1, r24	; 0x01
 3d8:	8f 81       	ldd	r24, Y+7	; 0x07
 3da:	98 85       	ldd	r25, Y+8	; 0x08
 3dc:	fc 01       	movw	r30, r24
 3de:	81 81       	ldd	r24, Z+1	; 0x01
 3e0:	88 2f       	mov	r24, r24
 3e2:	90 e0       	ldi	r25, 0x00	; 0
 3e4:	82 78       	andi	r24, 0x82	; 130
 3e6:	99 27       	eor	r25, r25
 3e8:	00 24       	eor	r0, r0
 3ea:	96 95       	lsr	r25
 3ec:	87 95       	ror	r24
 3ee:	07 94       	ror	r0
 3f0:	96 95       	lsr	r25
 3f2:	87 95       	ror	r24
 3f4:	07 94       	ror	r0
 3f6:	98 2f       	mov	r25, r24
 3f8:	80 2d       	mov	r24, r0
 3fa:	98 2f       	mov	r25, r24
 3fc:	89 81       	ldd	r24, Y+1	; 0x01
 3fe:	89 2b       	or	r24, r25
 400:	89 83       	std	Y+1, r24	; 0x01
 402:	84 e5       	ldi	r24, 0x54	; 84
 404:	90 e0       	ldi	r25, 0x00	; 0
 406:	29 81       	ldd	r18, Y+1	; 0x01
 408:	fc 01       	movw	r30, r24
 40a:	20 83       	st	Z, r18
 40c:	8a 81       	ldd	r24, Y+2	; 0x02
 40e:	8f 5f       	subi	r24, 0xFF	; 255
 410:	8a 83       	std	Y+2, r24	; 0x02
 412:	8a 81       	ldd	r24, Y+2	; 0x02
 414:	88 30       	cpi	r24, 0x08	; 8
 416:	08 f4       	brcc	.+2      	; 0x41a <__EEPROM_REGION_LENGTH__+0x1a>
 418:	3f cf       	rjmp	.-386    	; 0x298 <Init_GPIO+0x4a>
 41a:	81 e0       	ldi	r24, 0x01	; 1
 41c:	28 96       	adiw	r28, 0x08	; 8
 41e:	0f b6       	in	r0, 0x3f	; 63
 420:	f8 94       	cli
 422:	de bf       	out	0x3e, r29	; 62
 424:	0f be       	out	0x3f, r0	; 63
 426:	cd bf       	out	0x3d, r28	; 61
 428:	df 91       	pop	r29
 42a:	cf 91       	pop	r28
 42c:	08 95       	ret

0000042e <Write_Pin>:
 42e:	cf 93       	push	r28
 430:	df 93       	push	r29
 432:	00 d0       	rcall	.+0      	; 0x434 <Write_Pin+0x6>
 434:	00 d0       	rcall	.+0      	; 0x436 <Write_Pin+0x8>
 436:	cd b7       	in	r28, 0x3d	; 61
 438:	de b7       	in	r29, 0x3e	; 62
 43a:	9a 83       	std	Y+2, r25	; 0x02
 43c:	89 83       	std	Y+1, r24	; 0x01
 43e:	6b 83       	std	Y+3, r22	; 0x03
 440:	4c 83       	std	Y+4, r20	; 0x04
 442:	89 81       	ldd	r24, Y+1	; 0x01
 444:	9a 81       	ldd	r25, Y+2	; 0x02
 446:	c9 97       	sbiw	r24, 0x39	; 57
 448:	71 f0       	breq	.+28     	; 0x466 <Write_Pin+0x38>
 44a:	89 81       	ldd	r24, Y+1	; 0x01
 44c:	9a 81       	ldd	r25, Y+2	; 0x02
 44e:	c6 97       	sbiw	r24, 0x36	; 54
 450:	51 f0       	breq	.+20     	; 0x466 <Write_Pin+0x38>
 452:	89 81       	ldd	r24, Y+1	; 0x01
 454:	9a 81       	ldd	r25, Y+2	; 0x02
 456:	c3 97       	sbiw	r24, 0x33	; 51
 458:	31 f0       	breq	.+12     	; 0x466 <Write_Pin+0x38>
 45a:	89 81       	ldd	r24, Y+1	; 0x01
 45c:	9a 81       	ldd	r25, Y+2	; 0x02
 45e:	c0 97       	sbiw	r24, 0x30	; 48
 460:	11 f0       	breq	.+4      	; 0x466 <Write_Pin+0x38>
 462:	80 e0       	ldi	r24, 0x00	; 0
 464:	1d c0       	rjmp	.+58     	; 0x4a0 <Write_Pin+0x72>
 466:	8c 81       	ldd	r24, Y+4	; 0x04
 468:	81 30       	cpi	r24, 0x01	; 1
 46a:	61 f4       	brne	.+24     	; 0x484 <Write_Pin+0x56>
 46c:	89 81       	ldd	r24, Y+1	; 0x01
 46e:	9a 81       	ldd	r25, Y+2	; 0x02
 470:	fc 01       	movw	r30, r24
 472:	92 81       	ldd	r25, Z+2	; 0x02
 474:	8b 81       	ldd	r24, Y+3	; 0x03
 476:	29 2f       	mov	r18, r25
 478:	28 2b       	or	r18, r24
 47a:	89 81       	ldd	r24, Y+1	; 0x01
 47c:	9a 81       	ldd	r25, Y+2	; 0x02
 47e:	fc 01       	movw	r30, r24
 480:	22 83       	std	Z+2, r18	; 0x02
 482:	0d c0       	rjmp	.+26     	; 0x49e <Write_Pin+0x70>
 484:	89 81       	ldd	r24, Y+1	; 0x01
 486:	9a 81       	ldd	r25, Y+2	; 0x02
 488:	fc 01       	movw	r30, r24
 48a:	82 81       	ldd	r24, Z+2	; 0x02
 48c:	98 2f       	mov	r25, r24
 48e:	8b 81       	ldd	r24, Y+3	; 0x03
 490:	80 95       	com	r24
 492:	89 23       	and	r24, r25
 494:	28 2f       	mov	r18, r24
 496:	89 81       	ldd	r24, Y+1	; 0x01
 498:	9a 81       	ldd	r25, Y+2	; 0x02
 49a:	fc 01       	movw	r30, r24
 49c:	22 83       	std	Z+2, r18	; 0x02
 49e:	81 e0       	ldi	r24, 0x01	; 1
 4a0:	0f 90       	pop	r0
 4a2:	0f 90       	pop	r0
 4a4:	0f 90       	pop	r0
 4a6:	0f 90       	pop	r0
 4a8:	df 91       	pop	r29
 4aa:	cf 91       	pop	r28
 4ac:	08 95       	ret

000004ae <Toggle_pin>:

void Toggle_pin(St_GPIO *GPIO,unsigned char Pin)
{
 4ae:	cf 93       	push	r28
 4b0:	df 93       	push	r29
 4b2:	00 d0       	rcall	.+0      	; 0x4b4 <Toggle_pin+0x6>
 4b4:	1f 92       	push	r1
 4b6:	cd b7       	in	r28, 0x3d	; 61
 4b8:	de b7       	in	r29, 0x3e	; 62
 4ba:	9a 83       	std	Y+2, r25	; 0x02
 4bc:	89 83       	std	Y+1, r24	; 0x01
 4be:	6b 83       	std	Y+3, r22	; 0x03
	if(!(Check_PORT(GPIO))){return;}
 4c0:	89 81       	ldd	r24, Y+1	; 0x01
 4c2:	9a 81       	ldd	r25, Y+2	; 0x02
 4c4:	c9 97       	sbiw	r24, 0x39	; 57
 4c6:	61 f0       	breq	.+24     	; 0x4e0 <Toggle_pin+0x32>
 4c8:	89 81       	ldd	r24, Y+1	; 0x01
 4ca:	9a 81       	ldd	r25, Y+2	; 0x02
 4cc:	c6 97       	sbiw	r24, 0x36	; 54
 4ce:	41 f0       	breq	.+16     	; 0x4e0 <Toggle_pin+0x32>
 4d0:	89 81       	ldd	r24, Y+1	; 0x01
 4d2:	9a 81       	ldd	r25, Y+2	; 0x02
 4d4:	c3 97       	sbiw	r24, 0x33	; 51
 4d6:	21 f0       	breq	.+8      	; 0x4e0 <Toggle_pin+0x32>
 4d8:	89 81       	ldd	r24, Y+1	; 0x01
 4da:	9a 81       	ldd	r25, Y+2	; 0x02
 4dc:	c0 97       	sbiw	r24, 0x30	; 48
 4de:	61 f4       	brne	.+24     	; 0x4f8 <Toggle_pin+0x4a>

	GPIO->Un_PORTx.PORTx ^= Pin;
 4e0:	89 81       	ldd	r24, Y+1	; 0x01
 4e2:	9a 81       	ldd	r25, Y+2	; 0x02
 4e4:	fc 01       	movw	r30, r24
 4e6:	92 81       	ldd	r25, Z+2	; 0x02
 4e8:	8b 81       	ldd	r24, Y+3	; 0x03
 4ea:	29 2f       	mov	r18, r25
 4ec:	28 27       	eor	r18, r24
 4ee:	89 81       	ldd	r24, Y+1	; 0x01
 4f0:	9a 81       	ldd	r25, Y+2	; 0x02
 4f2:	fc 01       	movw	r30, r24
 4f4:	22 83       	std	Z+2, r18	; 0x02
 4f6:	01 c0       	rjmp	.+2      	; 0x4fa <Toggle_pin+0x4c>

}

void Toggle_pin(St_GPIO *GPIO,unsigned char Pin)
{
	if(!(Check_PORT(GPIO))){return;}
 4f8:	00 00       	nop

	GPIO->Un_PORTx.PORTx ^= Pin;
}
 4fa:	0f 90       	pop	r0
 4fc:	0f 90       	pop	r0
 4fe:	0f 90       	pop	r0
 500:	df 91       	pop	r29
 502:	cf 91       	pop	r28
 504:	08 95       	ret

00000506 <Init_PIR>:


//------------------------------ Global Functions ------------------------------

uint8_t Init_PIR(St_PIR_Sensor_Typedef *Instance)
{
 506:	cf 93       	push	r28
 508:	df 93       	push	r29
 50a:	00 d0       	rcall	.+0      	; 0x50c <Init_PIR+0x6>
 50c:	00 d0       	rcall	.+0      	; 0x50e <Init_PIR+0x8>
 50e:	1f 92       	push	r1
 510:	cd b7       	in	r28, 0x3d	; 61
 512:	de b7       	in	r29, 0x3e	; 62
 514:	9d 83       	std	Y+5, r25	; 0x05
 516:	8c 83       	std	Y+4, r24	; 0x04
    GPIO_config config_i_o = {0};
 518:	19 82       	std	Y+1, r1	; 0x01
 51a:	1a 82       	std	Y+2, r1	; 0x02
 51c:	1b 82       	std	Y+3, r1	; 0x03
    config_i_o.pin = Instance->Input_Pin;
 51e:	8c 81       	ldd	r24, Y+4	; 0x04
 520:	9d 81       	ldd	r25, Y+5	; 0x05
 522:	fc 01       	movw	r30, r24
 524:	82 81       	ldd	r24, Z+2	; 0x02
 526:	89 83       	std	Y+1, r24	; 0x01
	if(Instance->method)
 528:	8c 81       	ldd	r24, Y+4	; 0x04
 52a:	9d 81       	ldd	r25, Y+5	; 0x05
 52c:	fc 01       	movw	r30, r24
 52e:	83 81       	ldd	r24, Z+3	; 0x03
 530:	88 23       	and	r24, r24
 532:	09 f4       	brne	.+2      	; 0x536 <Init_PIR+0x30>
 534:	50 c0       	rjmp	.+160    	; 0x5d6 <Init_PIR+0xd0>
    {
        config_i_o.mode = Any_Ch_Ex_Int;
 536:	81 e8       	ldi	r24, 0x81	; 129
 538:	8a 83       	std	Y+2, r24	; 0x02
        if((Instance->Input_Pin == PIN_2) && (Instance->Input_Port == PORT_D))
 53a:	8c 81       	ldd	r24, Y+4	; 0x04
 53c:	9d 81       	ldd	r25, Y+5	; 0x05
 53e:	fc 01       	movw	r30, r24
 540:	82 81       	ldd	r24, Z+2	; 0x02
 542:	84 30       	cpi	r24, 0x04	; 4
 544:	89 f4       	brne	.+34     	; 0x568 <Init_PIR+0x62>
 546:	8c 81       	ldd	r24, Y+4	; 0x04
 548:	9d 81       	ldd	r25, Y+5	; 0x05
 54a:	fc 01       	movw	r30, r24
 54c:	80 81       	ld	r24, Z
 54e:	91 81       	ldd	r25, Z+1	; 0x01
 550:	c0 97       	sbiw	r24, 0x30	; 48
 552:	51 f4       	brne	.+20     	; 0x568 <Init_PIR+0x62>
        {
            Enable_EXTI_0();
 554:	8b e5       	ldi	r24, 0x5B	; 91
 556:	90 e0       	ldi	r25, 0x00	; 0
 558:	2b e5       	ldi	r18, 0x5B	; 91
 55a:	30 e0       	ldi	r19, 0x00	; 0
 55c:	f9 01       	movw	r30, r18
 55e:	20 81       	ld	r18, Z
 560:	20 64       	ori	r18, 0x40	; 64
 562:	fc 01       	movw	r30, r24
 564:	20 83       	st	Z, r18
 566:	2d c0       	rjmp	.+90     	; 0x5c2 <Init_PIR+0xbc>
        }else if ((Instance->Input_Pin == PIN_3) && (Instance->Input_Port == PORT_D))
 568:	8c 81       	ldd	r24, Y+4	; 0x04
 56a:	9d 81       	ldd	r25, Y+5	; 0x05
 56c:	fc 01       	movw	r30, r24
 56e:	82 81       	ldd	r24, Z+2	; 0x02
 570:	88 30       	cpi	r24, 0x08	; 8
 572:	89 f4       	brne	.+34     	; 0x596 <Init_PIR+0x90>
 574:	8c 81       	ldd	r24, Y+4	; 0x04
 576:	9d 81       	ldd	r25, Y+5	; 0x05
 578:	fc 01       	movw	r30, r24
 57a:	80 81       	ld	r24, Z
 57c:	91 81       	ldd	r25, Z+1	; 0x01
 57e:	c0 97       	sbiw	r24, 0x30	; 48
 580:	51 f4       	brne	.+20     	; 0x596 <Init_PIR+0x90>
        {
            Enable_EXTI_1();
 582:	8b e5       	ldi	r24, 0x5B	; 91
 584:	90 e0       	ldi	r25, 0x00	; 0
 586:	2b e5       	ldi	r18, 0x5B	; 91
 588:	30 e0       	ldi	r19, 0x00	; 0
 58a:	f9 01       	movw	r30, r18
 58c:	20 81       	ld	r18, Z
 58e:	20 68       	ori	r18, 0x80	; 128
 590:	fc 01       	movw	r30, r24
 592:	20 83       	st	Z, r18
 594:	16 c0       	rjmp	.+44     	; 0x5c2 <Init_PIR+0xbc>
        }else if ((Instance->Input_Pin == PIN_2) && (Instance->Input_Port == PORT_B))
 596:	8c 81       	ldd	r24, Y+4	; 0x04
 598:	9d 81       	ldd	r25, Y+5	; 0x05
 59a:	fc 01       	movw	r30, r24
 59c:	82 81       	ldd	r24, Z+2	; 0x02
 59e:	84 30       	cpi	r24, 0x04	; 4
 5a0:	81 f4       	brne	.+32     	; 0x5c2 <Init_PIR+0xbc>
 5a2:	8c 81       	ldd	r24, Y+4	; 0x04
 5a4:	9d 81       	ldd	r25, Y+5	; 0x05
 5a6:	fc 01       	movw	r30, r24
 5a8:	80 81       	ld	r24, Z
 5aa:	91 81       	ldd	r25, Z+1	; 0x01
 5ac:	c6 97       	sbiw	r24, 0x36	; 54
 5ae:	49 f4       	brne	.+18     	; 0x5c2 <Init_PIR+0xbc>
        {
            Enable_EXTI_2();
 5b0:	8b e5       	ldi	r24, 0x5B	; 91
 5b2:	90 e0       	ldi	r25, 0x00	; 0
 5b4:	2b e5       	ldi	r18, 0x5B	; 91
 5b6:	30 e0       	ldi	r19, 0x00	; 0
 5b8:	f9 01       	movw	r30, r18
 5ba:	20 81       	ld	r18, Z
 5bc:	20 62       	ori	r18, 0x20	; 32
 5be:	fc 01       	movw	r30, r24
 5c0:	20 83       	st	Z, r18
        }
	    Enable_Global_EXTI();
 5c2:	8f e5       	ldi	r24, 0x5F	; 95
 5c4:	90 e0       	ldi	r25, 0x00	; 0
 5c6:	2f e5       	ldi	r18, 0x5F	; 95
 5c8:	30 e0       	ldi	r19, 0x00	; 0
 5ca:	f9 01       	movw	r30, r18
 5cc:	20 81       	ld	r18, Z
 5ce:	20 68       	ori	r18, 0x80	; 128
 5d0:	fc 01       	movw	r30, r24
 5d2:	20 83       	st	Z, r18
 5d4:	01 c0       	rjmp	.+2      	; 0x5d8 <Init_PIR+0xd2>
    }else
    {
        config_i_o.mode = INPUT;
 5d6:	1a 82       	std	Y+2, r1	; 0x02
    }
	Init_GPIO(Instance->Input_Port,&config_i_o);
 5d8:	8c 81       	ldd	r24, Y+4	; 0x04
 5da:	9d 81       	ldd	r25, Y+5	; 0x05
 5dc:	fc 01       	movw	r30, r24
 5de:	80 81       	ld	r24, Z
 5e0:	91 81       	ldd	r25, Z+1	; 0x01
 5e2:	9e 01       	movw	r18, r28
 5e4:	2f 5f       	subi	r18, 0xFF	; 255
 5e6:	3f 4f       	sbci	r19, 0xFF	; 255
 5e8:	b9 01       	movw	r22, r18
 5ea:	0e 94 27 01 	call	0x24e	; 0x24e <Init_GPIO>

    return 1;
 5ee:	81 e0       	ldi	r24, 0x01	; 1
}
 5f0:	0f 90       	pop	r0
 5f2:	0f 90       	pop	r0
 5f4:	0f 90       	pop	r0
 5f6:	0f 90       	pop	r0
 5f8:	0f 90       	pop	r0
 5fa:	df 91       	pop	r29
 5fc:	cf 91       	pop	r28
 5fe:	08 95       	ret

00000600 <SPI_Init>:
 * @param SPIx : SPI data structure containing the SPI parameters specified by the user 
 * @return uint8_t  0 : Fail
 *                  1 : Success
*/
uint8_t SPI_Init(St_SPI_API *SPIx)
{
 600:	cf 93       	push	r28
 602:	df 93       	push	r29
 604:	00 d0       	rcall	.+0      	; 0x606 <SPI_Init+0x6>
 606:	00 d0       	rcall	.+0      	; 0x608 <SPI_Init+0x8>
 608:	1f 92       	push	r1
 60a:	cd b7       	in	r28, 0x3d	; 61
 60c:	de b7       	in	r29, 0x3e	; 62
 60e:	9d 83       	std	Y+5, r25	; 0x05
 610:	8c 83       	std	Y+4, r24	; 0x04
    GPIO_config gpio_config = {0};
 612:	19 82       	std	Y+1, r1	; 0x01
 614:	1a 82       	std	Y+2, r1	; 0x02
 616:	1b 82       	std	Y+3, r1	; 0x03
    if(SPIx->Slave_Master)
 618:	8c 81       	ldd	r24, Y+4	; 0x04
 61a:	9d 81       	ldd	r25, Y+5	; 0x05
 61c:	fc 01       	movw	r30, r24
 61e:	82 81       	ldd	r24, Z+2	; 0x02
 620:	88 23       	and	r24, r24
 622:	b1 f0       	breq	.+44     	; 0x650 <SPI_Init+0x50>
    {
        // Set MOSI and SCK and SS output
        gpio_config.mode = OUTPUT;
 624:	81 e0       	ldi	r24, 0x01	; 1
 626:	8a 83       	std	Y+2, r24	; 0x02
        gpio_config.pin = DD_SCK | DD_MOSI | DD_SS;
 628:	80 eb       	ldi	r24, 0xB0	; 176
 62a:	89 83       	std	Y+1, r24	; 0x01
        Init_GPIO(DDR_SPI, &gpio_config);
 62c:	ce 01       	movw	r24, r28
 62e:	01 96       	adiw	r24, 0x01	; 1
 630:	bc 01       	movw	r22, r24
 632:	86 e3       	ldi	r24, 0x36	; 54
 634:	90 e0       	ldi	r25, 0x00	; 0
 636:	0e 94 27 01 	call	0x24e	; 0x24e <Init_GPIO>
        // Set MISO as Input
        gpio_config.mode = INPUT;
 63a:	1a 82       	std	Y+2, r1	; 0x02
        gpio_config.pin = DD_MISO;
 63c:	80 e4       	ldi	r24, 0x40	; 64
 63e:	89 83       	std	Y+1, r24	; 0x01
        Init_GPIO(DDR_SPI, &gpio_config);
 640:	ce 01       	movw	r24, r28
 642:	01 96       	adiw	r24, 0x01	; 1
 644:	bc 01       	movw	r22, r24
 646:	86 e3       	ldi	r24, 0x36	; 54
 648:	90 e0       	ldi	r25, 0x00	; 0
 64a:	0e 94 27 01 	call	0x24e	; 0x24e <Init_GPIO>
 64e:	15 c0       	rjmp	.+42     	; 0x67a <SPI_Init+0x7a>
    }
    else
    {
        // Set MOSI and SCK and SS INPUT
        gpio_config.mode = INPUT;
 650:	1a 82       	std	Y+2, r1	; 0x02
        gpio_config.pin = DD_SCK | DD_MOSI | DD_SS;
 652:	80 eb       	ldi	r24, 0xB0	; 176
 654:	89 83       	std	Y+1, r24	; 0x01
        Init_GPIO(DDR_SPI, &gpio_config);
 656:	ce 01       	movw	r24, r28
 658:	01 96       	adiw	r24, 0x01	; 1
 65a:	bc 01       	movw	r22, r24
 65c:	86 e3       	ldi	r24, 0x36	; 54
 65e:	90 e0       	ldi	r25, 0x00	; 0
 660:	0e 94 27 01 	call	0x24e	; 0x24e <Init_GPIO>
        // Set MISO as Output
        gpio_config.mode = OUTPUT;
 664:	81 e0       	ldi	r24, 0x01	; 1
 666:	8a 83       	std	Y+2, r24	; 0x02
        gpio_config.pin = DD_MISO;
 668:	80 e4       	ldi	r24, 0x40	; 64
 66a:	89 83       	std	Y+1, r24	; 0x01
        Init_GPIO(DDR_SPI, &gpio_config);
 66c:	ce 01       	movw	r24, r28
 66e:	01 96       	adiw	r24, 0x01	; 1
 670:	bc 01       	movw	r22, r24
 672:	86 e3       	ldi	r24, 0x36	; 54
 674:	90 e0       	ldi	r25, 0x00	; 0
 676:	0e 94 27 01 	call	0x24e	; 0x24e <Init_GPIO>
    }
    // Confige SPI
    SPCR = (1 << SPE) | (SPIx->Slave_Master) | (SPIx->SPI_Freq) | (SPIx->Data_Order) | (SPIx->En_interrupt) | (SPIx->Data_Modes);
 67a:	8d e2       	ldi	r24, 0x2D	; 45
 67c:	90 e0       	ldi	r25, 0x00	; 0
 67e:	2c 81       	ldd	r18, Y+4	; 0x04
 680:	3d 81       	ldd	r19, Y+5	; 0x05
 682:	f9 01       	movw	r30, r18
 684:	42 81       	ldd	r20, Z+2	; 0x02
 686:	2c 81       	ldd	r18, Y+4	; 0x04
 688:	3d 81       	ldd	r19, Y+5	; 0x05
 68a:	f9 01       	movw	r30, r18
 68c:	24 81       	ldd	r18, Z+4	; 0x04
 68e:	42 2b       	or	r20, r18
 690:	2c 81       	ldd	r18, Y+4	; 0x04
 692:	3d 81       	ldd	r19, Y+5	; 0x05
 694:	f9 01       	movw	r30, r18
 696:	21 81       	ldd	r18, Z+1	; 0x01
 698:	42 2b       	or	r20, r18
 69a:	2c 81       	ldd	r18, Y+4	; 0x04
 69c:	3d 81       	ldd	r19, Y+5	; 0x05
 69e:	f9 01       	movw	r30, r18
 6a0:	20 81       	ld	r18, Z
 6a2:	42 2b       	or	r20, r18
 6a4:	2c 81       	ldd	r18, Y+4	; 0x04
 6a6:	3d 81       	ldd	r19, Y+5	; 0x05
 6a8:	f9 01       	movw	r30, r18
 6aa:	23 81       	ldd	r18, Z+3	; 0x03
 6ac:	24 2b       	or	r18, r20
 6ae:	20 64       	ori	r18, 0x40	; 64
 6b0:	fc 01       	movw	r30, r24
 6b2:	20 83       	st	Z, r18

    return 1;
 6b4:	81 e0       	ldi	r24, 0x01	; 1
}
 6b6:	0f 90       	pop	r0
 6b8:	0f 90       	pop	r0
 6ba:	0f 90       	pop	r0
 6bc:	0f 90       	pop	r0
 6be:	0f 90       	pop	r0
 6c0:	df 91       	pop	r29
 6c2:	cf 91       	pop	r28
 6c4:	08 95       	ret

000006c6 <SPI_MasterTransmit_Char>:
 * @param data The data to be sent through SPI
 * @return uint8_t  0 : Fail
 *                  1 : Success 
 */
uint8_t SPI_MasterTransmit_Char(St_SPI_API *SPIx ,uint8_t data)
{
 6c6:	cf 93       	push	r28
 6c8:	df 93       	push	r29
 6ca:	00 d0       	rcall	.+0      	; 0x6cc <SPI_MasterTransmit_Char+0x6>
 6cc:	1f 92       	push	r1
 6ce:	cd b7       	in	r28, 0x3d	; 61
 6d0:	de b7       	in	r29, 0x3e	; 62
 6d2:	9a 83       	std	Y+2, r25	; 0x02
 6d4:	89 83       	std	Y+1, r24	; 0x01
 6d6:	6b 83       	std	Y+3, r22	; 0x03
    // Select Slave Low
    Write_Pin(DDR_SPI,DD_SS,Low);
 6d8:	40 e0       	ldi	r20, 0x00	; 0
 6da:	60 e1       	ldi	r22, 0x10	; 16
 6dc:	86 e3       	ldi	r24, 0x36	; 54
 6de:	90 e0       	ldi	r25, 0x00	; 0
 6e0:	0e 94 17 02 	call	0x42e	; 0x42e <Write_Pin>
    // Start transimission
    SPDR = data;
 6e4:	8f e2       	ldi	r24, 0x2F	; 47
 6e6:	90 e0       	ldi	r25, 0x00	; 0
 6e8:	2b 81       	ldd	r18, Y+3	; 0x03
 6ea:	fc 01       	movw	r30, r24
 6ec:	20 83       	st	Z, r18
    // Wait for transmission complate
    while(!(SPSR & (1 << SPIF)));
 6ee:	00 00       	nop
 6f0:	8e e2       	ldi	r24, 0x2E	; 46
 6f2:	90 e0       	ldi	r25, 0x00	; 0
 6f4:	fc 01       	movw	r30, r24
 6f6:	80 81       	ld	r24, Z
 6f8:	88 23       	and	r24, r24
 6fa:	d4 f7       	brge	.-12     	; 0x6f0 <SPI_MasterTransmit_Char+0x2a>
    // Select slave High
    Write_Pin(DDR_SPI,DD_SS,High);
 6fc:	41 e0       	ldi	r20, 0x01	; 1
 6fe:	60 e1       	ldi	r22, 0x10	; 16
 700:	86 e3       	ldi	r24, 0x36	; 54
 702:	90 e0       	ldi	r25, 0x00	; 0
 704:	0e 94 17 02 	call	0x42e	; 0x42e <Write_Pin>
    return SPDR;    
 708:	8f e2       	ldi	r24, 0x2F	; 47
 70a:	90 e0       	ldi	r25, 0x00	; 0
 70c:	fc 01       	movw	r30, r24
 70e:	80 81       	ld	r24, Z
}
 710:	0f 90       	pop	r0
 712:	0f 90       	pop	r0
 714:	0f 90       	pop	r0
 716:	df 91       	pop	r29
 718:	cf 91       	pop	r28
 71a:	08 95       	ret

0000071c <__vector_10>:
}



ISR(TIMER0_COMP_vect)
{
 71c:	1f 92       	push	r1
 71e:	0f 92       	push	r0
 720:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
 724:	0f 92       	push	r0
 726:	11 24       	eor	r1, r1
 728:	cf 93       	push	r28
 72a:	df 93       	push	r29
 72c:	cd b7       	in	r28, 0x3d	; 61
 72e:	de b7       	in	r29, 0x3e	; 62
    
}
 730:	00 00       	nop
 732:	df 91       	pop	r29
 734:	cf 91       	pop	r28
 736:	0f 90       	pop	r0
 738:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
 73c:	0f 90       	pop	r0
 73e:	1f 90       	pop	r1
 740:	18 95       	reti

00000742 <__vector_11>:


ISR(TIMER0_OVF_vect)
{
 742:	1f 92       	push	r1
 744:	0f 92       	push	r0
 746:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
 74a:	0f 92       	push	r0
 74c:	11 24       	eor	r1, r1
 74e:	cf 93       	push	r28
 750:	df 93       	push	r29
 752:	cd b7       	in	r28, 0x3d	; 61
 754:	de b7       	in	r29, 0x3e	; 62
    
}
 756:	00 00       	nop
 758:	df 91       	pop	r29
 75a:	cf 91       	pop	r28
 75c:	0f 90       	pop	r0
 75e:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
 762:	0f 90       	pop	r0
 764:	1f 90       	pop	r1
 766:	18 95       	reti

00000768 <__vector_9>:
}
//==============================================================================


ISR(TIMER1_OVF_vect)
{
 768:	1f 92       	push	r1
 76a:	0f 92       	push	r0
 76c:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
 770:	0f 92       	push	r0
 772:	11 24       	eor	r1, r1
 774:	cf 93       	push	r28
 776:	df 93       	push	r29
 778:	cd b7       	in	r28, 0x3d	; 61
 77a:	de b7       	in	r29, 0x3e	; 62
 
}
 77c:	00 00       	nop
 77e:	df 91       	pop	r29
 780:	cf 91       	pop	r28
 782:	0f 90       	pop	r0
 784:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
 788:	0f 90       	pop	r0
 78a:	1f 90       	pop	r1
 78c:	18 95       	reti

0000078e <Uart_Receive>:
/**
 * @brief   Used to Receiv Data form UART by polling
 * @return  unsigned char: return received value 
 */
unsigned char *Uart_Receive(St_UART_driver *_init_uart)
{
 78e:	cf 93       	push	r28
 790:	df 93       	push	r29
 792:	00 d0       	rcall	.+0      	; 0x794 <Uart_Receive+0x6>
 794:	00 d0       	rcall	.+0      	; 0x796 <Uart_Receive+0x8>
 796:	00 d0       	rcall	.+0      	; 0x798 <Uart_Receive+0xa>
 798:	cd b7       	in	r28, 0x3d	; 61
 79a:	de b7       	in	r29, 0x3e	; 62
 79c:	9e 83       	std	Y+6, r25	; 0x06
 79e:	8d 83       	std	Y+5, r24	; 0x05
    uint8_t index = 0;
 7a0:	19 82       	std	Y+1, r1	; 0x01
    unsigned char status, resh, resl;
    
    while(_init_uart->msg[index] != '#')
 7a2:	66 c0       	rjmp	.+204    	; 0x870 <__stack+0x11>
    {
        
        while(!(UCSRA_R->UCSRA_field & (1 << RXC)));
 7a4:	00 00       	nop
 7a6:	8b e2       	ldi	r24, 0x2B	; 43
 7a8:	90 e0       	ldi	r25, 0x00	; 0
 7aa:	fc 01       	movw	r30, r24
 7ac:	80 81       	ld	r24, Z
 7ae:	88 23       	and	r24, r24
 7b0:	d4 f7       	brge	.-12     	; 0x7a6 <Uart_Receive+0x18>

        status = UCSRA_R->UCSRA_field;
 7b2:	8b e2       	ldi	r24, 0x2B	; 43
 7b4:	90 e0       	ldi	r25, 0x00	; 0
 7b6:	fc 01       	movw	r30, r24
 7b8:	80 81       	ld	r24, Z
 7ba:	8a 83       	std	Y+2, r24	; 0x02
        resh = UCSRB_R->UCSRB_field;
 7bc:	8a e2       	ldi	r24, 0x2A	; 42
 7be:	90 e0       	ldi	r25, 0x00	; 0
 7c0:	fc 01       	movw	r30, r24
 7c2:	80 81       	ld	r24, Z
 7c4:	8b 83       	std	Y+3, r24	; 0x03
        resl = UDR;
 7c6:	8c e2       	ldi	r24, 0x2C	; 44
 7c8:	90 e0       	ldi	r25, 0x00	; 0
 7ca:	fc 01       	movw	r30, r24
 7cc:	80 81       	ld	r24, Z
 7ce:	8c 83       	std	Y+4, r24	; 0x04

        if(status & ((1 << FE)|(1 << DOR)|(1 << PE)))
 7d0:	8a 81       	ldd	r24, Y+2	; 0x02
 7d2:	88 2f       	mov	r24, r24
 7d4:	90 e0       	ldi	r25, 0x00	; 0
 7d6:	8c 71       	andi	r24, 0x1C	; 28
 7d8:	99 27       	eor	r25, r25
 7da:	89 2b       	or	r24, r25
 7dc:	19 f0       	breq	.+6      	; 0x7e4 <Uart_Receive+0x56>
            return -1;
 7de:	8f ef       	ldi	r24, 0xFF	; 255
 7e0:	9f ef       	ldi	r25, 0xFF	; 255
 7e2:	55 c0       	rjmp	.+170    	; 0x88e <__stack+0x2f>
        resh = (resh >> 1) & 0x01;
 7e4:	8b 81       	ldd	r24, Y+3	; 0x03
 7e6:	86 95       	lsr	r24
 7e8:	81 70       	andi	r24, 0x01	; 1
 7ea:	8b 83       	std	Y+3, r24	; 0x03
        if((index == 15) || (_init_uart->msg[index] == '#')){index = 0;}
 7ec:	89 81       	ldd	r24, Y+1	; 0x01
 7ee:	8f 30       	cpi	r24, 0x0F	; 15
 7f0:	71 f0       	breq	.+28     	; 0x80e <__DATA_REGION_LENGTH__+0xe>
 7f2:	8d 81       	ldd	r24, Y+5	; 0x05
 7f4:	9e 81       	ldd	r25, Y+6	; 0x06
 7f6:	fc 01       	movw	r30, r24
 7f8:	21 85       	ldd	r18, Z+9	; 0x09
 7fa:	32 85       	ldd	r19, Z+10	; 0x0a
 7fc:	89 81       	ldd	r24, Y+1	; 0x01
 7fe:	88 2f       	mov	r24, r24
 800:	90 e0       	ldi	r25, 0x00	; 0
 802:	82 0f       	add	r24, r18
 804:	93 1f       	adc	r25, r19
 806:	fc 01       	movw	r30, r24
 808:	80 81       	ld	r24, Z
 80a:	83 32       	cpi	r24, 0x23	; 35
 80c:	09 f4       	brne	.+2      	; 0x810 <__DATA_REGION_LENGTH__+0x10>
 80e:	19 82       	std	Y+1, r1	; 0x01
        _init_uart->msg[index] = ((resh << 8) | resl);
 810:	8d 81       	ldd	r24, Y+5	; 0x05
 812:	9e 81       	ldd	r25, Y+6	; 0x06
 814:	fc 01       	movw	r30, r24
 816:	21 85       	ldd	r18, Z+9	; 0x09
 818:	32 85       	ldd	r19, Z+10	; 0x0a
 81a:	89 81       	ldd	r24, Y+1	; 0x01
 81c:	88 2f       	mov	r24, r24
 81e:	90 e0       	ldi	r25, 0x00	; 0
 820:	82 0f       	add	r24, r18
 822:	93 1f       	adc	r25, r19
 824:	2b 81       	ldd	r18, Y+3	; 0x03
 826:	22 2f       	mov	r18, r18
 828:	30 e0       	ldi	r19, 0x00	; 0
 82a:	32 2f       	mov	r19, r18
 82c:	22 27       	eor	r18, r18
 82e:	32 2f       	mov	r19, r18
 830:	2c 81       	ldd	r18, Y+4	; 0x04
 832:	23 2b       	or	r18, r19
 834:	fc 01       	movw	r30, r24
 836:	20 83       	st	Z, r18
        if(_init_uart->msg[index] == '#') {return &_init_uart->msg[index];}
 838:	8d 81       	ldd	r24, Y+5	; 0x05
 83a:	9e 81       	ldd	r25, Y+6	; 0x06
 83c:	fc 01       	movw	r30, r24
 83e:	21 85       	ldd	r18, Z+9	; 0x09
 840:	32 85       	ldd	r19, Z+10	; 0x0a
 842:	89 81       	ldd	r24, Y+1	; 0x01
 844:	88 2f       	mov	r24, r24
 846:	90 e0       	ldi	r25, 0x00	; 0
 848:	82 0f       	add	r24, r18
 84a:	93 1f       	adc	r25, r19
 84c:	fc 01       	movw	r30, r24
 84e:	80 81       	ld	r24, Z
 850:	83 32       	cpi	r24, 0x23	; 35
 852:	59 f4       	brne	.+22     	; 0x86a <__stack+0xb>
 854:	8d 81       	ldd	r24, Y+5	; 0x05
 856:	9e 81       	ldd	r25, Y+6	; 0x06
 858:	fc 01       	movw	r30, r24
 85a:	21 85       	ldd	r18, Z+9	; 0x09
 85c:	32 85       	ldd	r19, Z+10	; 0x0a
 85e:	89 81       	ldd	r24, Y+1	; 0x01
 860:	88 2f       	mov	r24, r24
 862:	90 e0       	ldi	r25, 0x00	; 0
 864:	82 0f       	add	r24, r18
 866:	93 1f       	adc	r25, r19
 868:	12 c0       	rjmp	.+36     	; 0x88e <__stack+0x2f>
        index++;
 86a:	89 81       	ldd	r24, Y+1	; 0x01
 86c:	8f 5f       	subi	r24, 0xFF	; 255
 86e:	89 83       	std	Y+1, r24	; 0x01
unsigned char *Uart_Receive(St_UART_driver *_init_uart)
{
    uint8_t index = 0;
    unsigned char status, resh, resl;
    
    while(_init_uart->msg[index] != '#')
 870:	8d 81       	ldd	r24, Y+5	; 0x05
 872:	9e 81       	ldd	r25, Y+6	; 0x06
 874:	fc 01       	movw	r30, r24
 876:	21 85       	ldd	r18, Z+9	; 0x09
 878:	32 85       	ldd	r19, Z+10	; 0x0a
 87a:	89 81       	ldd	r24, Y+1	; 0x01
 87c:	88 2f       	mov	r24, r24
 87e:	90 e0       	ldi	r25, 0x00	; 0
 880:	82 0f       	add	r24, r18
 882:	93 1f       	adc	r25, r19
 884:	fc 01       	movw	r30, r24
 886:	80 81       	ld	r24, Z
 888:	83 32       	cpi	r24, 0x23	; 35
 88a:	09 f0       	breq	.+2      	; 0x88e <__stack+0x2f>
 88c:	8b cf       	rjmp	.-234    	; 0x7a4 <Uart_Receive+0x16>
        index++;
    }
    

    
}
 88e:	26 96       	adiw	r28, 0x06	; 6
 890:	0f b6       	in	r0, 0x3f	; 63
 892:	f8 94       	cli
 894:	de bf       	out	0x3e, r29	; 62
 896:	0f be       	out	0x3f, r0	; 63
 898:	cd bf       	out	0x3d, r28	; 61
 89a:	df 91       	pop	r29
 89c:	cf 91       	pop	r28
 89e:	08 95       	ret

000008a0 <__vector_13>:

ISR(USART_RXC_vect)
{
 8a0:	1f 92       	push	r1
 8a2:	0f 92       	push	r0
 8a4:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
 8a8:	0f 92       	push	r0
 8aa:	11 24       	eor	r1, r1
 8ac:	2f 93       	push	r18
 8ae:	3f 93       	push	r19
 8b0:	4f 93       	push	r20
 8b2:	5f 93       	push	r21
 8b4:	6f 93       	push	r22
 8b6:	7f 93       	push	r23
 8b8:	8f 93       	push	r24
 8ba:	9f 93       	push	r25
 8bc:	af 93       	push	r26
 8be:	bf 93       	push	r27
 8c0:	ef 93       	push	r30
 8c2:	ff 93       	push	r31
 8c4:	cf 93       	push	r28
 8c6:	df 93       	push	r29
 8c8:	cd b7       	in	r28, 0x3d	; 61
 8ca:	de b7       	in	r29, 0x3e	; 62
    Uart_Receive(&UART_Config);
 8cc:	84 e7       	ldi	r24, 0x74	; 116
 8ce:	90 e0       	ldi	r25, 0x00	; 0
 8d0:	0e 94 c7 03 	call	0x78e	; 0x78e <Uart_Receive>
}
 8d4:	00 00       	nop
 8d6:	df 91       	pop	r29
 8d8:	cf 91       	pop	r28
 8da:	ff 91       	pop	r31
 8dc:	ef 91       	pop	r30
 8de:	bf 91       	pop	r27
 8e0:	af 91       	pop	r26
 8e2:	9f 91       	pop	r25
 8e4:	8f 91       	pop	r24
 8e6:	7f 91       	pop	r23
 8e8:	6f 91       	pop	r22
 8ea:	5f 91       	pop	r21
 8ec:	4f 91       	pop	r20
 8ee:	3f 91       	pop	r19
 8f0:	2f 91       	pop	r18
 8f2:	0f 90       	pop	r0
 8f4:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
 8f8:	0f 90       	pop	r0
 8fa:	1f 90       	pop	r1
 8fc:	18 95       	reti

000008fe <__vector_15>:


ISR(USART_TXC_vect)
{
 8fe:	1f 92       	push	r1
 900:	0f 92       	push	r0
 902:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
 906:	0f 92       	push	r0
 908:	11 24       	eor	r1, r1
 90a:	cf 93       	push	r28
 90c:	df 93       	push	r29
 90e:	cd b7       	in	r28, 0x3d	; 61
 910:	de b7       	in	r29, 0x3e	; 62

}
 912:	00 00       	nop
 914:	df 91       	pop	r29
 916:	cf 91       	pop	r28
 918:	0f 90       	pop	r0
 91a:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
 91e:	0f 90       	pop	r0
 920:	1f 90       	pop	r1
 922:	18 95       	reti

00000924 <__vector_14>:


ISR(USART_UDRE_vect)
{
 924:	1f 92       	push	r1
 926:	0f 92       	push	r0
 928:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
 92c:	0f 92       	push	r0
 92e:	11 24       	eor	r1, r1
 930:	2f 93       	push	r18
 932:	8f 93       	push	r24
 934:	9f 93       	push	r25
 936:	ef 93       	push	r30
 938:	ff 93       	push	r31
 93a:	cf 93       	push	r28
 93c:	df 93       	push	r29
 93e:	cd b7       	in	r28, 0x3d	; 61
 940:	de b7       	in	r29, 0x3e	; 62
    UCSRB_R->UCSRB_bits.UDRIE_b = 0;
 942:	8a e2       	ldi	r24, 0x2A	; 42
 944:	90 e0       	ldi	r25, 0x00	; 0
 946:	fc 01       	movw	r30, r24
 948:	20 81       	ld	r18, Z
 94a:	2f 7d       	andi	r18, 0xDF	; 223
 94c:	fc 01       	movw	r30, r24
 94e:	20 83       	st	Z, r18
 950:	00 00       	nop
 952:	df 91       	pop	r29
 954:	cf 91       	pop	r28
 956:	ff 91       	pop	r31
 958:	ef 91       	pop	r30
 95a:	9f 91       	pop	r25
 95c:	8f 91       	pop	r24
 95e:	2f 91       	pop	r18
 960:	0f 90       	pop	r0
 962:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
 966:	0f 90       	pop	r0
 968:	1f 90       	pop	r1
 96a:	18 95       	reti

0000096c <main>:

extern void program(void);
extern void init(void);

int main(void)
{
 96c:	cf 93       	push	r28
 96e:	df 93       	push	r29
 970:	cd b7       	in	r28, 0x3d	; 61
 972:	de b7       	in	r29, 0x3e	; 62
    /* Replace with your application code */
	init();
 974:	0e 94 49 00 	call	0x92	; 0x92 <init>
	
	while (1)
	{
		program();
 978:	0e 94 78 00 	call	0xf0	; 0xf0 <program>
	}
 97c:	fd cf       	rjmp	.-6      	; 0x978 <main+0xc>

0000097e <_exit>:
 97e:	f8 94       	cli

00000980 <__stop_program>:
 980:	ff cf       	rjmp	.-2      	; 0x980 <__stop_program>
