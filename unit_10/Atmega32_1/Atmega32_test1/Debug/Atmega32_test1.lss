
Atmega32_test1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000ae2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000b56  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000023  00800060  00800060  00000b56  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000b56  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000b88  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000288  00000000  00000000  00000bc4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000029da  00000000  00000000  00000e4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000f34  00000000  00000000  00003826  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000014c8  00000000  00000000  0000475a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000850  00000000  00000000  00005c24  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001389  00000000  00000000  00006474  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000010ac  00000000  00000000  000077fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001e8  00000000  00000000  000088a9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__vector_1>
   8:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__vector_2>
   c:	0c 94 c1 00 	jmp	0x182	; 0x182 <__vector_3>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 64 04 	jmp	0x8c8	; 0x8c8 <__vector_9>
  28:	0c 94 71 03 	jmp	0x6e2	; 0x6e2 <__vector_10>
  2c:	0c 94 84 03 	jmp	0x708	; 0x708 <__vector_11>
  30:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__vector_12>
  34:	0c 94 00 05 	jmp	0xa00	; 0xa00 <__vector_13>
  38:	0c 94 42 05 	jmp	0xa84	; 0xa84 <__vector_14>
  3c:	0c 94 2f 05 	jmp	0xa5e	; 0xa5e <__vector_15>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 ee       	ldi	r30, 0xE2	; 226
  68:	fa e0       	ldi	r31, 0x0A	; 10
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a3 38       	cpi	r26, 0x83	; 131
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 66 05 	call	0xacc	; 0xacc <main>
  8a:	0c 94 6f 05 	jmp	0xade	; 0xade <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <init>:
//_____________________________ MACRO Definition _______________________________
#define Master			1
//==============================================================================

void init(void)
{
  92:	cf 93       	push	r28
  94:	df 93       	push	r29
  96:	cd b7       	in	r28, 0x3d	; 61
  98:	de b7       	in	r29, 0x3e	; 62
	// config_i_o.mode = OUTPUT;
	// Init_GPIO(PORT_D,&config_i_o);
// =============================================================================

// ---------------------------- PIR Sensor -------------------------------------
	Pir_config.Input_Port = PORT_D;
  9a:	80 e3       	ldi	r24, 0x30	; 48
  9c:	90 e0       	ldi	r25, 0x00	; 0
  9e:	90 93 66 00 	sts	0x0066, r25	; 0x800066 <Pir_config+0x1>
  a2:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <Pir_config>
	Pir_config.Input_Pin = PIN_2;
  a6:	84 e0       	ldi	r24, 0x04	; 4
  a8:	80 93 67 00 	sts	0x0067, r24	; 0x800067 <Pir_config+0x2>
	Pir_config.method = interrupt;
  ac:	81 e0       	ldi	r24, 0x01	; 1
  ae:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <Pir_config+0x3>
	Init_PIR(&Pir_config);
  b2:	85 e6       	ldi	r24, 0x65	; 101
  b4:	90 e0       	ldi	r25, 0x00	; 0
  b6:	0e 94 2f 02 	call	0x45e	; 0x45e <Init_PIR>

//==============================================================================

//------------------------------- Servo motor ----------------------------------
	config_servo_timer();
  ba:	0e 94 ac 02 	call	0x558	; 0x558 <config_servo_timer>
//==============================================================================

//--------------------------------- SPI Config ---------------------------------
	spi_confige.Data_Modes = Sample_Ris_Setup_Fall;
  be:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <__data_end+0x3>
	spi_confige.Data_Order = Data_Order_MSB;
  c2:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__data_end+0x1>
	spi_confige.En_interrupt = EN_SPI_Interrupt;
  c6:	80 e8       	ldi	r24, 0x80	; 128
  c8:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_end>
	spi_confige.Slave_Master = SPI_Slave;
  cc:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <__data_end+0x2>
	spi_confige.SPI_Freq = F_OSC_4;
  d0:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <__data_end+0x4>
	SPI_Init(&spi_confige);
  d4:	80 e6       	ldi	r24, 0x60	; 96
  d6:	90 e0       	ldi	r25, 0x00	; 0
  d8:	0e 94 ef 02 	call	0x5de	; 0x5de <SPI_Init>
// GPIO_config config_i_o = {0};
// config_i_o.pin = PIN_2;
// config_i_o.mode = Falling_Ed_Ex_Int;
// Init_GPIO(PORT_D,&config_i_o);
//==============================================================================
	sei();
  dc:	78 94       	sei
	Set_angle(_0_angle);
  de:	8b ed       	ldi	r24, 0xDB	; 219
  e0:	95 e0       	ldi	r25, 0x05	; 5
  e2:	0e 94 da 02 	call	0x5b4	; 0x5b4 <Set_angle>
	// Write_Character(&Lcd_config,'w');
}
  e6:	00 00       	nop
  e8:	df 91       	pop	r29
  ea:	cf 91       	pop	r28
  ec:	08 95       	ret

000000ee <program>:

void program(void)
{ 	
  ee:	cf 93       	push	r28
  f0:	df 93       	push	r29
  f2:	cd b7       	in	r28, 0x3d	; 61
  f4:	de b7       	in	r29, 0x3e	; 62
    // 	Write_Character(&Lcd_config, temp);
	// 	counter ++;
	// 	if(counter == 10){counter = 0;}
	// }

}
  f6:	00 00       	nop
  f8:	df 91       	pop	r29
  fa:	cf 91       	pop	r28
  fc:	08 95       	ret

000000fe <__vector_1>:



ISR(INT0_vect)
{
  fe:	1f 92       	push	r1
 100:	0f 92       	push	r0
 102:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
 106:	0f 92       	push	r0
 108:	11 24       	eor	r1, r1
 10a:	2f 93       	push	r18
 10c:	3f 93       	push	r19
 10e:	4f 93       	push	r20
 110:	5f 93       	push	r21
 112:	6f 93       	push	r22
 114:	7f 93       	push	r23
 116:	8f 93       	push	r24
 118:	9f 93       	push	r25
 11a:	af 93       	push	r26
 11c:	bf 93       	push	r27
 11e:	ef 93       	push	r30
 120:	ff 93       	push	r31
 122:	cf 93       	push	r28
 124:	df 93       	push	r29
 126:	cd b7       	in	r28, 0x3d	; 61
 128:	de b7       	in	r29, 0x3e	; 62
	Set_angle(_0_angle);
 12a:	8b ed       	ldi	r24, 0xDB	; 219
 12c:	95 e0       	ldi	r25, 0x05	; 5
 12e:	0e 94 da 02 	call	0x5b4	; 0x5b4 <Set_angle>
}
 132:	00 00       	nop
 134:	df 91       	pop	r29
 136:	cf 91       	pop	r28
 138:	ff 91       	pop	r31
 13a:	ef 91       	pop	r30
 13c:	bf 91       	pop	r27
 13e:	af 91       	pop	r26
 140:	9f 91       	pop	r25
 142:	8f 91       	pop	r24
 144:	7f 91       	pop	r23
 146:	6f 91       	pop	r22
 148:	5f 91       	pop	r21
 14a:	4f 91       	pop	r20
 14c:	3f 91       	pop	r19
 14e:	2f 91       	pop	r18
 150:	0f 90       	pop	r0
 152:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
 156:	0f 90       	pop	r0
 158:	1f 90       	pop	r1
 15a:	18 95       	reti

0000015c <__vector_2>:


ISR(INT1_vect)
{
 15c:	1f 92       	push	r1
 15e:	0f 92       	push	r0
 160:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
 164:	0f 92       	push	r0
 166:	11 24       	eor	r1, r1
 168:	cf 93       	push	r28
 16a:	df 93       	push	r29
 16c:	cd b7       	in	r28, 0x3d	; 61
 16e:	de b7       	in	r29, 0x3e	; 62

}
 170:	00 00       	nop
 172:	df 91       	pop	r29
 174:	cf 91       	pop	r28
 176:	0f 90       	pop	r0
 178:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
 17c:	0f 90       	pop	r0
 17e:	1f 90       	pop	r1
 180:	18 95       	reti

00000182 <__vector_3>:


ISR(INT2_vect)
{
 182:	1f 92       	push	r1
 184:	0f 92       	push	r0
 186:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
 18a:	0f 92       	push	r0
 18c:	11 24       	eor	r1, r1
 18e:	cf 93       	push	r28
 190:	df 93       	push	r29
 192:	cd b7       	in	r28, 0x3d	; 61
 194:	de b7       	in	r29, 0x3e	; 62

}
 196:	00 00       	nop
 198:	df 91       	pop	r29
 19a:	cf 91       	pop	r28
 19c:	0f 90       	pop	r0
 19e:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
 1a2:	0f 90       	pop	r0
 1a4:	1f 90       	pop	r1
 1a6:	18 95       	reti

000001a8 <__vector_12>:

ISR(SPI_STC_vect)
{
 1a8:	1f 92       	push	r1
 1aa:	0f 92       	push	r0
 1ac:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
 1b0:	0f 92       	push	r0
 1b2:	11 24       	eor	r1, r1
 1b4:	2f 93       	push	r18
 1b6:	3f 93       	push	r19
 1b8:	4f 93       	push	r20
 1ba:	5f 93       	push	r21
 1bc:	6f 93       	push	r22
 1be:	7f 93       	push	r23
 1c0:	8f 93       	push	r24
 1c2:	9f 93       	push	r25
 1c4:	af 93       	push	r26
 1c6:	bf 93       	push	r27
 1c8:	ef 93       	push	r30
 1ca:	ff 93       	push	r31
 1cc:	cf 93       	push	r28
 1ce:	df 93       	push	r29
 1d0:	1f 92       	push	r1
 1d2:	cd b7       	in	r28, 0x3d	; 61
 1d4:	de b7       	in	r29, 0x3e	; 62
    uint8_t temp ;
    temp = SPI_SlaveReceive_Char(&spi_confige, 200);
 1d6:	68 ec       	ldi	r22, 0xC8	; 200
 1d8:	80 e6       	ldi	r24, 0x60	; 96
 1da:	90 e0       	ldi	r25, 0x00	; 0
 1dc:	0e 94 52 03 	call	0x6a4	; 0x6a4 <SPI_SlaveReceive_Char>
 1e0:	89 83       	std	Y+1, r24	; 0x01
    Data_analysis(temp);
 1e2:	89 81       	ldd	r24, Y+1	; 0x01
 1e4:	88 2f       	mov	r24, r24
 1e6:	90 e0       	ldi	r25, 0x00	; 0
 1e8:	0e 94 0c 01 	call	0x218	; 0x218 <Data_analysis>

 1ec:	00 00       	nop
 1ee:	0f 90       	pop	r0
 1f0:	df 91       	pop	r29
 1f2:	cf 91       	pop	r28
 1f4:	ff 91       	pop	r31
 1f6:	ef 91       	pop	r30
 1f8:	bf 91       	pop	r27
 1fa:	af 91       	pop	r26
 1fc:	9f 91       	pop	r25
 1fe:	8f 91       	pop	r24
 200:	7f 91       	pop	r23
 202:	6f 91       	pop	r22
 204:	5f 91       	pop	r21
 206:	4f 91       	pop	r20
 208:	3f 91       	pop	r19
 20a:	2f 91       	pop	r18
 20c:	0f 90       	pop	r0
 20e:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
 212:	0f 90       	pop	r0
 214:	1f 90       	pop	r1
 216:	18 95       	reti

00000218 <Data_analysis>:
//==============================================================================


//------------------------------ GLOBAL FUNCTIONS ------------------------------
uint8_t Data_analysis(uint8_t *data)
{
 218:	cf 93       	push	r28
 21a:	df 93       	push	r29
 21c:	00 d0       	rcall	.+0      	; 0x21e <Data_analysis+0x6>
 21e:	1f 92       	push	r1
 220:	cd b7       	in	r28, 0x3d	; 61
 222:	de b7       	in	r29, 0x3e	; 62
 224:	9b 83       	std	Y+3, r25	; 0x03
 226:	8a 83       	std	Y+2, r24	; 0x02
    uint8_t retval = 0;
 228:	19 82       	std	Y+1, r1	; 0x01
    if(data == Open_entry_gate1)
 22a:	8a 81       	ldd	r24, Y+2	; 0x02
 22c:	9b 81       	ldd	r25, Y+3	; 0x03
 22e:	41 97       	sbiw	r24, 0x11	; 17
 230:	41 f4       	brne	.+16     	; 0x242 <Data_analysis+0x2a>
    {
        Set_angle(positive_90_angle);
 232:	8f ec       	ldi	r24, 0xCF	; 207
 234:	97 e0       	ldi	r25, 0x07	; 7
 236:	0e 94 da 02 	call	0x5b4	; 0x5b4 <Set_angle>
        retval++;
 23a:	89 81       	ldd	r24, Y+1	; 0x01
 23c:	8f 5f       	subi	r24, 0xFF	; 255
 23e:	89 83       	std	Y+1, r24	; 0x01
 240:	17 c0       	rjmp	.+46     	; 0x270 <Data_analysis+0x58>
    }else if(data == Close_entry_gate1)
 242:	8a 81       	ldd	r24, Y+2	; 0x02
 244:	9b 81       	ldd	r25, Y+3	; 0x03
 246:	40 97       	sbiw	r24, 0x10	; 16
 248:	21 f4       	brne	.+8      	; 0x252 <Data_analysis+0x3a>
    {

        retval++;
 24a:	89 81       	ldd	r24, Y+1	; 0x01
 24c:	8f 5f       	subi	r24, 0xFF	; 255
 24e:	89 83       	std	Y+1, r24	; 0x01
 250:	0f c0       	rjmp	.+30     	; 0x270 <Data_analysis+0x58>
    }else if(data == Open_exit_gate2)
 252:	8a 81       	ldd	r24, Y+2	; 0x02
 254:	9b 81       	ldd	r25, Y+3	; 0x03
 256:	81 97       	sbiw	r24, 0x21	; 33
 258:	21 f4       	brne	.+8      	; 0x262 <Data_analysis+0x4a>
    {

        retval++;
 25a:	89 81       	ldd	r24, Y+1	; 0x01
 25c:	8f 5f       	subi	r24, 0xFF	; 255
 25e:	89 83       	std	Y+1, r24	; 0x01
 260:	07 c0       	rjmp	.+14     	; 0x270 <Data_analysis+0x58>
    }else if(data == Close_exit_gate2)
 262:	8a 81       	ldd	r24, Y+2	; 0x02
 264:	9b 81       	ldd	r25, Y+3	; 0x03
 266:	82 97       	sbiw	r24, 0x22	; 34
 268:	19 f4       	brne	.+6      	; 0x270 <Data_analysis+0x58>
    {

        retval++;
 26a:	89 81       	ldd	r24, Y+1	; 0x01
 26c:	8f 5f       	subi	r24, 0xFF	; 255
 26e:	89 83       	std	Y+1, r24	; 0x01
    }else
    {

    }
    return retval;
 270:	89 81       	ldd	r24, Y+1	; 0x01
}
 272:	0f 90       	pop	r0
 274:	0f 90       	pop	r0
 276:	0f 90       	pop	r0
 278:	df 91       	pop	r29
 27a:	cf 91       	pop	r28
 27c:	08 95       	ret

0000027e <Init_GPIO>:
 27e:	cf 93       	push	r28
 280:	df 93       	push	r29
 282:	cd b7       	in	r28, 0x3d	; 61
 284:	de b7       	in	r29, 0x3e	; 62
 286:	28 97       	sbiw	r28, 0x08	; 8
 288:	0f b6       	in	r0, 0x3f	; 63
 28a:	f8 94       	cli
 28c:	de bf       	out	0x3e, r29	; 62
 28e:	0f be       	out	0x3f, r0	; 63
 290:	cd bf       	out	0x3d, r28	; 61
 292:	9e 83       	std	Y+6, r25	; 0x06
 294:	8d 83       	std	Y+5, r24	; 0x05
 296:	78 87       	std	Y+8, r23	; 0x08
 298:	6f 83       	std	Y+7, r22	; 0x07
 29a:	8d 81       	ldd	r24, Y+5	; 0x05
 29c:	9e 81       	ldd	r25, Y+6	; 0x06
 29e:	c9 97       	sbiw	r24, 0x39	; 57
 2a0:	71 f0       	breq	.+28     	; 0x2be <Init_GPIO+0x40>
 2a2:	8d 81       	ldd	r24, Y+5	; 0x05
 2a4:	9e 81       	ldd	r25, Y+6	; 0x06
 2a6:	c6 97       	sbiw	r24, 0x36	; 54
 2a8:	51 f0       	breq	.+20     	; 0x2be <Init_GPIO+0x40>
 2aa:	8d 81       	ldd	r24, Y+5	; 0x05
 2ac:	9e 81       	ldd	r25, Y+6	; 0x06
 2ae:	c3 97       	sbiw	r24, 0x33	; 51
 2b0:	31 f0       	breq	.+12     	; 0x2be <Init_GPIO+0x40>
 2b2:	8d 81       	ldd	r24, Y+5	; 0x05
 2b4:	9e 81       	ldd	r25, Y+6	; 0x06
 2b6:	c0 97       	sbiw	r24, 0x30	; 48
 2b8:	11 f0       	breq	.+4      	; 0x2be <Init_GPIO+0x40>
 2ba:	80 e0       	ldi	r24, 0x00	; 0
 2bc:	c7 c0       	rjmp	.+398    	; 0x44c <__EEPROM_REGION_LENGTH__+0x4c>
 2be:	1b 82       	std	Y+3, r1	; 0x03
 2c0:	1c 82       	std	Y+4, r1	; 0x04
 2c2:	19 82       	std	Y+1, r1	; 0x01
 2c4:	1a 82       	std	Y+2, r1	; 0x02
 2c6:	bd c0       	rjmp	.+378    	; 0x442 <__EEPROM_REGION_LENGTH__+0x42>
 2c8:	8a 81       	ldd	r24, Y+2	; 0x02
 2ca:	28 2f       	mov	r18, r24
 2cc:	30 e0       	ldi	r19, 0x00	; 0
 2ce:	81 e0       	ldi	r24, 0x01	; 1
 2d0:	90 e0       	ldi	r25, 0x00	; 0
 2d2:	02 c0       	rjmp	.+4      	; 0x2d8 <Init_GPIO+0x5a>
 2d4:	88 0f       	add	r24, r24
 2d6:	99 1f       	adc	r25, r25
 2d8:	2a 95       	dec	r18
 2da:	e2 f7       	brpl	.-8      	; 0x2d4 <Init_GPIO+0x56>
 2dc:	8b 83       	std	Y+3, r24	; 0x03
 2de:	8f 81       	ldd	r24, Y+7	; 0x07
 2e0:	98 85       	ldd	r25, Y+8	; 0x08
 2e2:	fc 01       	movw	r30, r24
 2e4:	90 81       	ld	r25, Z
 2e6:	8b 81       	ldd	r24, Y+3	; 0x03
 2e8:	89 23       	and	r24, r25
 2ea:	8c 83       	std	Y+4, r24	; 0x04
 2ec:	9b 81       	ldd	r25, Y+3	; 0x03
 2ee:	8c 81       	ldd	r24, Y+4	; 0x04
 2f0:	98 17       	cp	r25, r24
 2f2:	09 f0       	breq	.+2      	; 0x2f6 <Init_GPIO+0x78>
 2f4:	a3 c0       	rjmp	.+326    	; 0x43c <__EEPROM_REGION_LENGTH__+0x3c>
 2f6:	8f 81       	ldd	r24, Y+7	; 0x07
 2f8:	98 85       	ldd	r25, Y+8	; 0x08
 2fa:	fc 01       	movw	r30, r24
 2fc:	81 81       	ldd	r24, Z+1	; 0x01
 2fe:	81 30       	cpi	r24, 0x01	; 1
 300:	79 f5       	brne	.+94     	; 0x360 <Init_GPIO+0xe2>
 302:	8d 81       	ldd	r24, Y+5	; 0x05
 304:	9e 81       	ldd	r25, Y+6	; 0x06
 306:	fc 01       	movw	r30, r24
 308:	81 81       	ldd	r24, Z+1	; 0x01
 30a:	89 83       	std	Y+1, r24	; 0x01
 30c:	8f 81       	ldd	r24, Y+7	; 0x07
 30e:	98 85       	ldd	r25, Y+8	; 0x08
 310:	fc 01       	movw	r30, r24
 312:	81 81       	ldd	r24, Z+1	; 0x01
 314:	88 2f       	mov	r24, r24
 316:	90 e0       	ldi	r25, 0x00	; 0
 318:	2a 81       	ldd	r18, Y+2	; 0x02
 31a:	22 2f       	mov	r18, r18
 31c:	30 e0       	ldi	r19, 0x00	; 0
 31e:	02 c0       	rjmp	.+4      	; 0x324 <Init_GPIO+0xa6>
 320:	88 0f       	add	r24, r24
 322:	99 1f       	adc	r25, r25
 324:	2a 95       	dec	r18
 326:	e2 f7       	brpl	.-8      	; 0x320 <Init_GPIO+0xa2>
 328:	98 2f       	mov	r25, r24
 32a:	90 95       	com	r25
 32c:	89 81       	ldd	r24, Y+1	; 0x01
 32e:	89 23       	and	r24, r25
 330:	89 83       	std	Y+1, r24	; 0x01
 332:	8f 81       	ldd	r24, Y+7	; 0x07
 334:	98 85       	ldd	r25, Y+8	; 0x08
 336:	fc 01       	movw	r30, r24
 338:	81 81       	ldd	r24, Z+1	; 0x01
 33a:	88 2f       	mov	r24, r24
 33c:	90 e0       	ldi	r25, 0x00	; 0
 33e:	2a 81       	ldd	r18, Y+2	; 0x02
 340:	22 2f       	mov	r18, r18
 342:	30 e0       	ldi	r19, 0x00	; 0
 344:	02 c0       	rjmp	.+4      	; 0x34a <Init_GPIO+0xcc>
 346:	88 0f       	add	r24, r24
 348:	99 1f       	adc	r25, r25
 34a:	2a 95       	dec	r18
 34c:	e2 f7       	brpl	.-8      	; 0x346 <Init_GPIO+0xc8>
 34e:	98 2f       	mov	r25, r24
 350:	89 81       	ldd	r24, Y+1	; 0x01
 352:	89 2b       	or	r24, r25
 354:	89 83       	std	Y+1, r24	; 0x01
 356:	8d 81       	ldd	r24, Y+5	; 0x05
 358:	9e 81       	ldd	r25, Y+6	; 0x06
 35a:	29 81       	ldd	r18, Y+1	; 0x01
 35c:	fc 01       	movw	r30, r24
 35e:	21 83       	std	Z+1, r18	; 0x01
 360:	8f 81       	ldd	r24, Y+7	; 0x07
 362:	98 85       	ldd	r25, Y+8	; 0x08
 364:	fc 01       	movw	r30, r24
 366:	81 81       	ldd	r24, Z+1	; 0x01
 368:	88 23       	and	r24, r24
 36a:	0c f0       	brlt	.+2      	; 0x36e <Init_GPIO+0xf0>
 36c:	67 c0       	rjmp	.+206    	; 0x43c <__EEPROM_REGION_LENGTH__+0x3c>
 36e:	8d 81       	ldd	r24, Y+5	; 0x05
 370:	9e 81       	ldd	r25, Y+6	; 0x06
 372:	c0 97       	sbiw	r24, 0x30	; 48
 374:	79 f5       	brne	.+94     	; 0x3d4 <Init_GPIO+0x156>
 376:	85 e5       	ldi	r24, 0x55	; 85
 378:	90 e0       	ldi	r25, 0x00	; 0
 37a:	fc 01       	movw	r30, r24
 37c:	80 81       	ld	r24, Z
 37e:	89 83       	std	Y+1, r24	; 0x01
 380:	8c 81       	ldd	r24, Y+4	; 0x04
 382:	84 30       	cpi	r24, 0x04	; 4
 384:	69 f4       	brne	.+26     	; 0x3a0 <Init_GPIO+0x122>
 386:	89 81       	ldd	r24, Y+1	; 0x01
 388:	8c 7f       	andi	r24, 0xFC	; 252
 38a:	89 83       	std	Y+1, r24	; 0x01
 38c:	8f 81       	ldd	r24, Y+7	; 0x07
 38e:	98 85       	ldd	r25, Y+8	; 0x08
 390:	fc 01       	movw	r30, r24
 392:	81 81       	ldd	r24, Z+1	; 0x01
 394:	98 2f       	mov	r25, r24
 396:	93 70       	andi	r25, 0x03	; 3
 398:	89 81       	ldd	r24, Y+1	; 0x01
 39a:	89 2b       	or	r24, r25
 39c:	89 83       	std	Y+1, r24	; 0x01
 39e:	15 c0       	rjmp	.+42     	; 0x3ca <Init_GPIO+0x14c>
 3a0:	8c 81       	ldd	r24, Y+4	; 0x04
 3a2:	88 30       	cpi	r24, 0x08	; 8
 3a4:	91 f4       	brne	.+36     	; 0x3ca <Init_GPIO+0x14c>
 3a6:	89 81       	ldd	r24, Y+1	; 0x01
 3a8:	83 7f       	andi	r24, 0xF3	; 243
 3aa:	89 83       	std	Y+1, r24	; 0x01
 3ac:	8f 81       	ldd	r24, Y+7	; 0x07
 3ae:	98 85       	ldd	r25, Y+8	; 0x08
 3b0:	fc 01       	movw	r30, r24
 3b2:	81 81       	ldd	r24, Z+1	; 0x01
 3b4:	88 2f       	mov	r24, r24
 3b6:	90 e0       	ldi	r25, 0x00	; 0
 3b8:	88 0f       	add	r24, r24
 3ba:	99 1f       	adc	r25, r25
 3bc:	88 0f       	add	r24, r24
 3be:	99 1f       	adc	r25, r25
 3c0:	98 2f       	mov	r25, r24
 3c2:	9c 70       	andi	r25, 0x0C	; 12
 3c4:	89 81       	ldd	r24, Y+1	; 0x01
 3c6:	89 2b       	or	r24, r25
 3c8:	89 83       	std	Y+1, r24	; 0x01
 3ca:	85 e5       	ldi	r24, 0x55	; 85
 3cc:	90 e0       	ldi	r25, 0x00	; 0
 3ce:	29 81       	ldd	r18, Y+1	; 0x01
 3d0:	fc 01       	movw	r30, r24
 3d2:	20 83       	st	Z, r18
 3d4:	8c 81       	ldd	r24, Y+4	; 0x04
 3d6:	84 30       	cpi	r24, 0x04	; 4
 3d8:	89 f5       	brne	.+98     	; 0x43c <__EEPROM_REGION_LENGTH__+0x3c>
 3da:	8d 81       	ldd	r24, Y+5	; 0x05
 3dc:	9e 81       	ldd	r25, Y+6	; 0x06
 3de:	c6 97       	sbiw	r24, 0x36	; 54
 3e0:	69 f5       	brne	.+90     	; 0x43c <__EEPROM_REGION_LENGTH__+0x3c>
 3e2:	84 e5       	ldi	r24, 0x54	; 84
 3e4:	90 e0       	ldi	r25, 0x00	; 0
 3e6:	fc 01       	movw	r30, r24
 3e8:	80 81       	ld	r24, Z
 3ea:	89 83       	std	Y+1, r24	; 0x01
 3ec:	8f 81       	ldd	r24, Y+7	; 0x07
 3ee:	98 85       	ldd	r25, Y+8	; 0x08
 3f0:	fc 01       	movw	r30, r24
 3f2:	81 81       	ldd	r24, Z+1	; 0x01
 3f4:	82 78       	andi	r24, 0x82	; 130
 3f6:	82 95       	swap	r24
 3f8:	88 0f       	add	r24, r24
 3fa:	88 0f       	add	r24, r24
 3fc:	80 7c       	andi	r24, 0xC0	; 192
 3fe:	80 95       	com	r24
 400:	98 2f       	mov	r25, r24
 402:	89 81       	ldd	r24, Y+1	; 0x01
 404:	89 23       	and	r24, r25
 406:	89 83       	std	Y+1, r24	; 0x01
 408:	8f 81       	ldd	r24, Y+7	; 0x07
 40a:	98 85       	ldd	r25, Y+8	; 0x08
 40c:	fc 01       	movw	r30, r24
 40e:	81 81       	ldd	r24, Z+1	; 0x01
 410:	88 2f       	mov	r24, r24
 412:	90 e0       	ldi	r25, 0x00	; 0
 414:	82 78       	andi	r24, 0x82	; 130
 416:	99 27       	eor	r25, r25
 418:	00 24       	eor	r0, r0
 41a:	96 95       	lsr	r25
 41c:	87 95       	ror	r24
 41e:	07 94       	ror	r0
 420:	96 95       	lsr	r25
 422:	87 95       	ror	r24
 424:	07 94       	ror	r0
 426:	98 2f       	mov	r25, r24
 428:	80 2d       	mov	r24, r0
 42a:	98 2f       	mov	r25, r24
 42c:	89 81       	ldd	r24, Y+1	; 0x01
 42e:	89 2b       	or	r24, r25
 430:	89 83       	std	Y+1, r24	; 0x01
 432:	84 e5       	ldi	r24, 0x54	; 84
 434:	90 e0       	ldi	r25, 0x00	; 0
 436:	29 81       	ldd	r18, Y+1	; 0x01
 438:	fc 01       	movw	r30, r24
 43a:	20 83       	st	Z, r18
 43c:	8a 81       	ldd	r24, Y+2	; 0x02
 43e:	8f 5f       	subi	r24, 0xFF	; 255
 440:	8a 83       	std	Y+2, r24	; 0x02
 442:	8a 81       	ldd	r24, Y+2	; 0x02
 444:	88 30       	cpi	r24, 0x08	; 8
 446:	08 f4       	brcc	.+2      	; 0x44a <__EEPROM_REGION_LENGTH__+0x4a>
 448:	3f cf       	rjmp	.-386    	; 0x2c8 <Init_GPIO+0x4a>
 44a:	81 e0       	ldi	r24, 0x01	; 1
 44c:	28 96       	adiw	r28, 0x08	; 8
 44e:	0f b6       	in	r0, 0x3f	; 63
 450:	f8 94       	cli
 452:	de bf       	out	0x3e, r29	; 62
 454:	0f be       	out	0x3f, r0	; 63
 456:	cd bf       	out	0x3d, r28	; 61
 458:	df 91       	pop	r29
 45a:	cf 91       	pop	r28
 45c:	08 95       	ret

0000045e <Init_PIR>:


//------------------------------ Global Functions ------------------------------

uint8_t Init_PIR(St_PIR_Sensor_Typedef *Instance)
{
 45e:	cf 93       	push	r28
 460:	df 93       	push	r29
 462:	00 d0       	rcall	.+0      	; 0x464 <Init_PIR+0x6>
 464:	00 d0       	rcall	.+0      	; 0x466 <Init_PIR+0x8>
 466:	1f 92       	push	r1
 468:	cd b7       	in	r28, 0x3d	; 61
 46a:	de b7       	in	r29, 0x3e	; 62
 46c:	9d 83       	std	Y+5, r25	; 0x05
 46e:	8c 83       	std	Y+4, r24	; 0x04
    GPIO_config config_i_o = {0};
 470:	19 82       	std	Y+1, r1	; 0x01
 472:	1a 82       	std	Y+2, r1	; 0x02
 474:	1b 82       	std	Y+3, r1	; 0x03
    config_i_o.pin = Instance->Input_Pin;
 476:	8c 81       	ldd	r24, Y+4	; 0x04
 478:	9d 81       	ldd	r25, Y+5	; 0x05
 47a:	fc 01       	movw	r30, r24
 47c:	82 81       	ldd	r24, Z+2	; 0x02
 47e:	89 83       	std	Y+1, r24	; 0x01
	if(Instance->method)
 480:	8c 81       	ldd	r24, Y+4	; 0x04
 482:	9d 81       	ldd	r25, Y+5	; 0x05
 484:	fc 01       	movw	r30, r24
 486:	83 81       	ldd	r24, Z+3	; 0x03
 488:	88 23       	and	r24, r24
 48a:	09 f4       	brne	.+2      	; 0x48e <Init_PIR+0x30>
 48c:	50 c0       	rjmp	.+160    	; 0x52e <Init_PIR+0xd0>
    {
        config_i_o.mode = Rising_Ed_Ex_Int;
 48e:	83 e8       	ldi	r24, 0x83	; 131
 490:	8a 83       	std	Y+2, r24	; 0x02
        if((Instance->Input_Pin == PIN_2) && (Instance->Input_Port == PORT_D))
 492:	8c 81       	ldd	r24, Y+4	; 0x04
 494:	9d 81       	ldd	r25, Y+5	; 0x05
 496:	fc 01       	movw	r30, r24
 498:	82 81       	ldd	r24, Z+2	; 0x02
 49a:	84 30       	cpi	r24, 0x04	; 4
 49c:	89 f4       	brne	.+34     	; 0x4c0 <Init_PIR+0x62>
 49e:	8c 81       	ldd	r24, Y+4	; 0x04
 4a0:	9d 81       	ldd	r25, Y+5	; 0x05
 4a2:	fc 01       	movw	r30, r24
 4a4:	80 81       	ld	r24, Z
 4a6:	91 81       	ldd	r25, Z+1	; 0x01
 4a8:	c0 97       	sbiw	r24, 0x30	; 48
 4aa:	51 f4       	brne	.+20     	; 0x4c0 <Init_PIR+0x62>
        {
            Enable_EXTI_0();
 4ac:	8b e5       	ldi	r24, 0x5B	; 91
 4ae:	90 e0       	ldi	r25, 0x00	; 0
 4b0:	2b e5       	ldi	r18, 0x5B	; 91
 4b2:	30 e0       	ldi	r19, 0x00	; 0
 4b4:	f9 01       	movw	r30, r18
 4b6:	20 81       	ld	r18, Z
 4b8:	20 64       	ori	r18, 0x40	; 64
 4ba:	fc 01       	movw	r30, r24
 4bc:	20 83       	st	Z, r18
 4be:	2d c0       	rjmp	.+90     	; 0x51a <Init_PIR+0xbc>
        }else if ((Instance->Input_Pin == PIN_3) && (Instance->Input_Port == PORT_D))
 4c0:	8c 81       	ldd	r24, Y+4	; 0x04
 4c2:	9d 81       	ldd	r25, Y+5	; 0x05
 4c4:	fc 01       	movw	r30, r24
 4c6:	82 81       	ldd	r24, Z+2	; 0x02
 4c8:	88 30       	cpi	r24, 0x08	; 8
 4ca:	89 f4       	brne	.+34     	; 0x4ee <Init_PIR+0x90>
 4cc:	8c 81       	ldd	r24, Y+4	; 0x04
 4ce:	9d 81       	ldd	r25, Y+5	; 0x05
 4d0:	fc 01       	movw	r30, r24
 4d2:	80 81       	ld	r24, Z
 4d4:	91 81       	ldd	r25, Z+1	; 0x01
 4d6:	c0 97       	sbiw	r24, 0x30	; 48
 4d8:	51 f4       	brne	.+20     	; 0x4ee <Init_PIR+0x90>
        {
            Enable_EXTI_1();
 4da:	8b e5       	ldi	r24, 0x5B	; 91
 4dc:	90 e0       	ldi	r25, 0x00	; 0
 4de:	2b e5       	ldi	r18, 0x5B	; 91
 4e0:	30 e0       	ldi	r19, 0x00	; 0
 4e2:	f9 01       	movw	r30, r18
 4e4:	20 81       	ld	r18, Z
 4e6:	20 68       	ori	r18, 0x80	; 128
 4e8:	fc 01       	movw	r30, r24
 4ea:	20 83       	st	Z, r18
 4ec:	16 c0       	rjmp	.+44     	; 0x51a <Init_PIR+0xbc>
        }else if ((Instance->Input_Pin == PIN_2) && (Instance->Input_Port == PORT_B))
 4ee:	8c 81       	ldd	r24, Y+4	; 0x04
 4f0:	9d 81       	ldd	r25, Y+5	; 0x05
 4f2:	fc 01       	movw	r30, r24
 4f4:	82 81       	ldd	r24, Z+2	; 0x02
 4f6:	84 30       	cpi	r24, 0x04	; 4
 4f8:	81 f4       	brne	.+32     	; 0x51a <Init_PIR+0xbc>
 4fa:	8c 81       	ldd	r24, Y+4	; 0x04
 4fc:	9d 81       	ldd	r25, Y+5	; 0x05
 4fe:	fc 01       	movw	r30, r24
 500:	80 81       	ld	r24, Z
 502:	91 81       	ldd	r25, Z+1	; 0x01
 504:	c6 97       	sbiw	r24, 0x36	; 54
 506:	49 f4       	brne	.+18     	; 0x51a <Init_PIR+0xbc>
        {
            Enable_EXTI_2();
 508:	8b e5       	ldi	r24, 0x5B	; 91
 50a:	90 e0       	ldi	r25, 0x00	; 0
 50c:	2b e5       	ldi	r18, 0x5B	; 91
 50e:	30 e0       	ldi	r19, 0x00	; 0
 510:	f9 01       	movw	r30, r18
 512:	20 81       	ld	r18, Z
 514:	20 62       	ori	r18, 0x20	; 32
 516:	fc 01       	movw	r30, r24
 518:	20 83       	st	Z, r18
        }
	    Enable_Global_EXTI();
 51a:	8f e5       	ldi	r24, 0x5F	; 95
 51c:	90 e0       	ldi	r25, 0x00	; 0
 51e:	2f e5       	ldi	r18, 0x5F	; 95
 520:	30 e0       	ldi	r19, 0x00	; 0
 522:	f9 01       	movw	r30, r18
 524:	20 81       	ld	r18, Z
 526:	20 68       	ori	r18, 0x80	; 128
 528:	fc 01       	movw	r30, r24
 52a:	20 83       	st	Z, r18
 52c:	01 c0       	rjmp	.+2      	; 0x530 <Init_PIR+0xd2>
    }else
    {
        config_i_o.mode = INPUT;
 52e:	1a 82       	std	Y+2, r1	; 0x02
    }
	Init_GPIO(Instance->Input_Port,&config_i_o);
 530:	8c 81       	ldd	r24, Y+4	; 0x04
 532:	9d 81       	ldd	r25, Y+5	; 0x05
 534:	fc 01       	movw	r30, r24
 536:	80 81       	ld	r24, Z
 538:	91 81       	ldd	r25, Z+1	; 0x01
 53a:	9e 01       	movw	r18, r28
 53c:	2f 5f       	subi	r18, 0xFF	; 255
 53e:	3f 4f       	sbci	r19, 0xFF	; 255
 540:	b9 01       	movw	r22, r18
 542:	0e 94 3f 01 	call	0x27e	; 0x27e <Init_GPIO>

    return 1;
 546:	81 e0       	ldi	r24, 0x01	; 1
}
 548:	0f 90       	pop	r0
 54a:	0f 90       	pop	r0
 54c:	0f 90       	pop	r0
 54e:	0f 90       	pop	r0
 550:	0f 90       	pop	r0
 552:	df 91       	pop	r29
 554:	cf 91       	pop	r28
 556:	08 95       	ret

00000558 <config_servo_timer>:
/**
 * @brief Is used to config timer1 for servo motor
 * @return uint8_t  0 : Fail
 *                  1 : Success */
uint8_t config_servo_timer()
{
 558:	cf 93       	push	r28
 55a:	df 93       	push	r29
 55c:	cd b7       	in	r28, 0x3d	; 61
 55e:	de b7       	in	r29, 0x3e	; 62
    //----------------- Config Timer1 -----------------
    Timer1_Typedef.clk_soruce = Clk_divid_8;
 560:	82 e0       	ldi	r24, 0x02	; 2
 562:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <Timer1_Typedef+0xd>
    Timer1_Typedef.init_tick_count = 0;
 566:	10 92 75 00 	sts	0x0075, r1	; 0x800075 <Timer1_Typedef+0x1>
 56a:	10 92 74 00 	sts	0x0074, r1	; 0x800074 <Timer1_Typedef>
    Timer1_Typedef.Input_capture_edge = Input_Capture_falling_edge;
 56e:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <Timer1_Typedef+0xc>
    Timer1_Typedef.Input_capture_reg = 19999;
 572:	8f e1       	ldi	r24, 0x1F	; 31
 574:	9e e4       	ldi	r25, 0x4E	; 78
 576:	90 93 7b 00 	sts	0x007B, r25	; 0x80007b <Timer1_Typedef+0x7>
 57a:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <Timer1_Typedef+0x6>
    Timer1_Typedef.Input_nosise = Disable_cancel_input_noise;
 57e:	10 92 7f 00 	sts	0x007F, r1	; 0x80007f <Timer1_Typedef+0xb>
    Timer1_Typedef.output_compare_A1 = 0;
 582:	10 92 77 00 	sts	0x0077, r1	; 0x800077 <Timer1_Typedef+0x3>
 586:	10 92 76 00 	sts	0x0076, r1	; 0x800076 <Timer1_Typedef+0x2>
    Timer1_Typedef.output_compare_B1 = 0;
 58a:	10 92 79 00 	sts	0x0079, r1	; 0x800079 <Timer1_Typedef+0x5>
 58e:	10 92 78 00 	sts	0x0078, r1	; 0x800078 <Timer1_Typedef+0x4>
    Timer1_Typedef.output_compare_mode = Fast_PWM_Clear_on_compare_set_at_bottom;
 592:	82 e0       	ldi	r24, 0x02	; 2
 594:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <Timer1_Typedef+0x8>
    Timer1_Typedef.output_pin = OC1A_pin;
 598:	86 e0       	ldi	r24, 0x06	; 6
 59a:	80 93 7d 00 	sts	0x007D, r24	; 0x80007d <Timer1_Typedef+0x9>
    Timer1_Typedef.timer1_interrput = 0;
 59e:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <Timer1_Typedef+0xe>
    Timer1_Typedef.wave_generation_mode = Fast_pwm_ICR1;
 5a2:	8e e0       	ldi	r24, 0x0E	; 14
 5a4:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <Timer1_Typedef+0xa>
    Init_Timer1();
 5a8:	0e 94 97 03 	call	0x72e	; 0x72e <Init_Timer1>

    return 1;
 5ac:	81 e0       	ldi	r24, 0x01	; 1
}
 5ae:	df 91       	pop	r29
 5b0:	cf 91       	pop	r28
 5b2:	08 95       	ret

000005b4 <Set_angle>:
 * @note angle =-90  -> value = 999
 * @note angle = 0   -> value = 1499
 * @note angle = +90 -> value = 1999
 */
uint16_t Set_angle(uint16_t value)
{
 5b4:	cf 93       	push	r28
 5b6:	df 93       	push	r29
 5b8:	00 d0       	rcall	.+0      	; 0x5ba <Set_angle+0x6>
 5ba:	cd b7       	in	r28, 0x3d	; 61
 5bc:	de b7       	in	r29, 0x3e	; 62
 5be:	9a 83       	std	Y+2, r25	; 0x02
 5c0:	89 83       	std	Y+1, r24	; 0x01
    OCR1A = value;
 5c2:	8a e4       	ldi	r24, 0x4A	; 74
 5c4:	90 e0       	ldi	r25, 0x00	; 0
 5c6:	29 81       	ldd	r18, Y+1	; 0x01
 5c8:	3a 81       	ldd	r19, Y+2	; 0x02
 5ca:	fc 01       	movw	r30, r24
 5cc:	31 83       	std	Z+1, r19	; 0x01
 5ce:	20 83       	st	Z, r18
    return value;
 5d0:	89 81       	ldd	r24, Y+1	; 0x01
 5d2:	9a 81       	ldd	r25, Y+2	; 0x02
}
 5d4:	0f 90       	pop	r0
 5d6:	0f 90       	pop	r0
 5d8:	df 91       	pop	r29
 5da:	cf 91       	pop	r28
 5dc:	08 95       	ret

000005de <SPI_Init>:
 5de:	cf 93       	push	r28
 5e0:	df 93       	push	r29
 5e2:	00 d0       	rcall	.+0      	; 0x5e4 <SPI_Init+0x6>
 5e4:	00 d0       	rcall	.+0      	; 0x5e6 <SPI_Init+0x8>
 5e6:	1f 92       	push	r1
 5e8:	cd b7       	in	r28, 0x3d	; 61
 5ea:	de b7       	in	r29, 0x3e	; 62
 5ec:	9d 83       	std	Y+5, r25	; 0x05
 5ee:	8c 83       	std	Y+4, r24	; 0x04
 5f0:	19 82       	std	Y+1, r1	; 0x01
 5f2:	1a 82       	std	Y+2, r1	; 0x02
 5f4:	1b 82       	std	Y+3, r1	; 0x03
 5f6:	8c 81       	ldd	r24, Y+4	; 0x04
 5f8:	9d 81       	ldd	r25, Y+5	; 0x05
 5fa:	fc 01       	movw	r30, r24
 5fc:	82 81       	ldd	r24, Z+2	; 0x02
 5fe:	88 23       	and	r24, r24
 600:	b1 f0       	breq	.+44     	; 0x62e <SPI_Init+0x50>
 602:	81 e0       	ldi	r24, 0x01	; 1
 604:	8a 83       	std	Y+2, r24	; 0x02
 606:	80 eb       	ldi	r24, 0xB0	; 176
 608:	89 83       	std	Y+1, r24	; 0x01
 60a:	ce 01       	movw	r24, r28
 60c:	01 96       	adiw	r24, 0x01	; 1
 60e:	bc 01       	movw	r22, r24
 610:	86 e3       	ldi	r24, 0x36	; 54
 612:	90 e0       	ldi	r25, 0x00	; 0
 614:	0e 94 3f 01 	call	0x27e	; 0x27e <Init_GPIO>
 618:	1a 82       	std	Y+2, r1	; 0x02
 61a:	80 e4       	ldi	r24, 0x40	; 64
 61c:	89 83       	std	Y+1, r24	; 0x01
 61e:	ce 01       	movw	r24, r28
 620:	01 96       	adiw	r24, 0x01	; 1
 622:	bc 01       	movw	r22, r24
 624:	86 e3       	ldi	r24, 0x36	; 54
 626:	90 e0       	ldi	r25, 0x00	; 0
 628:	0e 94 3f 01 	call	0x27e	; 0x27e <Init_GPIO>
 62c:	15 c0       	rjmp	.+42     	; 0x658 <SPI_Init+0x7a>
 62e:	1a 82       	std	Y+2, r1	; 0x02
 630:	80 eb       	ldi	r24, 0xB0	; 176
 632:	89 83       	std	Y+1, r24	; 0x01
 634:	ce 01       	movw	r24, r28
 636:	01 96       	adiw	r24, 0x01	; 1
 638:	bc 01       	movw	r22, r24
 63a:	86 e3       	ldi	r24, 0x36	; 54
 63c:	90 e0       	ldi	r25, 0x00	; 0
 63e:	0e 94 3f 01 	call	0x27e	; 0x27e <Init_GPIO>
 642:	81 e0       	ldi	r24, 0x01	; 1
 644:	8a 83       	std	Y+2, r24	; 0x02
 646:	80 e4       	ldi	r24, 0x40	; 64
 648:	89 83       	std	Y+1, r24	; 0x01
 64a:	ce 01       	movw	r24, r28
 64c:	01 96       	adiw	r24, 0x01	; 1
 64e:	bc 01       	movw	r22, r24
 650:	86 e3       	ldi	r24, 0x36	; 54
 652:	90 e0       	ldi	r25, 0x00	; 0
 654:	0e 94 3f 01 	call	0x27e	; 0x27e <Init_GPIO>
 658:	8d e2       	ldi	r24, 0x2D	; 45
 65a:	90 e0       	ldi	r25, 0x00	; 0
 65c:	2c 81       	ldd	r18, Y+4	; 0x04
 65e:	3d 81       	ldd	r19, Y+5	; 0x05
 660:	f9 01       	movw	r30, r18
 662:	42 81       	ldd	r20, Z+2	; 0x02
 664:	2c 81       	ldd	r18, Y+4	; 0x04
 666:	3d 81       	ldd	r19, Y+5	; 0x05
 668:	f9 01       	movw	r30, r18
 66a:	24 81       	ldd	r18, Z+4	; 0x04
 66c:	42 2b       	or	r20, r18
 66e:	2c 81       	ldd	r18, Y+4	; 0x04
 670:	3d 81       	ldd	r19, Y+5	; 0x05
 672:	f9 01       	movw	r30, r18
 674:	21 81       	ldd	r18, Z+1	; 0x01
 676:	42 2b       	or	r20, r18
 678:	2c 81       	ldd	r18, Y+4	; 0x04
 67a:	3d 81       	ldd	r19, Y+5	; 0x05
 67c:	f9 01       	movw	r30, r18
 67e:	20 81       	ld	r18, Z
 680:	42 2b       	or	r20, r18
 682:	2c 81       	ldd	r18, Y+4	; 0x04
 684:	3d 81       	ldd	r19, Y+5	; 0x05
 686:	f9 01       	movw	r30, r18
 688:	23 81       	ldd	r18, Z+3	; 0x03
 68a:	24 2b       	or	r18, r20
 68c:	20 64       	ori	r18, 0x40	; 64
 68e:	fc 01       	movw	r30, r24
 690:	20 83       	st	Z, r18
 692:	81 e0       	ldi	r24, 0x01	; 1
 694:	0f 90       	pop	r0
 696:	0f 90       	pop	r0
 698:	0f 90       	pop	r0
 69a:	0f 90       	pop	r0
 69c:	0f 90       	pop	r0
 69e:	df 91       	pop	r29
 6a0:	cf 91       	pop	r28
 6a2:	08 95       	ret

000006a4 <SPI_SlaveReceive_Char>:
 6a4:	cf 93       	push	r28
 6a6:	df 93       	push	r29
 6a8:	00 d0       	rcall	.+0      	; 0x6aa <SPI_SlaveReceive_Char+0x6>
 6aa:	1f 92       	push	r1
 6ac:	cd b7       	in	r28, 0x3d	; 61
 6ae:	de b7       	in	r29, 0x3e	; 62
 6b0:	9a 83       	std	Y+2, r25	; 0x02
 6b2:	89 83       	std	Y+1, r24	; 0x01
 6b4:	6b 83       	std	Y+3, r22	; 0x03
 6b6:	8f e2       	ldi	r24, 0x2F	; 47
 6b8:	90 e0       	ldi	r25, 0x00	; 0
 6ba:	2b 81       	ldd	r18, Y+3	; 0x03
 6bc:	fc 01       	movw	r30, r24
 6be:	20 83       	st	Z, r18
 6c0:	00 00       	nop
 6c2:	8e e2       	ldi	r24, 0x2E	; 46
 6c4:	90 e0       	ldi	r25, 0x00	; 0
 6c6:	fc 01       	movw	r30, r24
 6c8:	80 81       	ld	r24, Z
 6ca:	88 23       	and	r24, r24
 6cc:	d4 f7       	brge	.-12     	; 0x6c2 <SPI_SlaveReceive_Char+0x1e>
 6ce:	8f e2       	ldi	r24, 0x2F	; 47
 6d0:	90 e0       	ldi	r25, 0x00	; 0
 6d2:	fc 01       	movw	r30, r24
 6d4:	80 81       	ld	r24, Z
 6d6:	0f 90       	pop	r0
 6d8:	0f 90       	pop	r0
 6da:	0f 90       	pop	r0
 6dc:	df 91       	pop	r29
 6de:	cf 91       	pop	r28
 6e0:	08 95       	ret

000006e2 <__vector_10>:
 6e2:	1f 92       	push	r1
 6e4:	0f 92       	push	r0
 6e6:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
 6ea:	0f 92       	push	r0
 6ec:	11 24       	eor	r1, r1
 6ee:	cf 93       	push	r28
 6f0:	df 93       	push	r29
 6f2:	cd b7       	in	r28, 0x3d	; 61
 6f4:	de b7       	in	r29, 0x3e	; 62
 6f6:	00 00       	nop
 6f8:	df 91       	pop	r29
 6fa:	cf 91       	pop	r28
 6fc:	0f 90       	pop	r0
 6fe:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
 702:	0f 90       	pop	r0
 704:	1f 90       	pop	r1
 706:	18 95       	reti

00000708 <__vector_11>:
 708:	1f 92       	push	r1
 70a:	0f 92       	push	r0
 70c:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
 710:	0f 92       	push	r0
 712:	11 24       	eor	r1, r1
 714:	cf 93       	push	r28
 716:	df 93       	push	r29
 718:	cd b7       	in	r28, 0x3d	; 61
 71a:	de b7       	in	r29, 0x3e	; 62
 71c:	00 00       	nop
 71e:	df 91       	pop	r29
 720:	cf 91       	pop	r28
 722:	0f 90       	pop	r0
 724:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
 728:	0f 90       	pop	r0
 72a:	1f 90       	pop	r1
 72c:	18 95       	reti

0000072e <Init_Timer1>:
 72e:	cf 93       	push	r28
 730:	df 93       	push	r29
 732:	cd b7       	in	r28, 0x3d	; 61
 734:	de b7       	in	r29, 0x3e	; 62
 736:	8f e4       	ldi	r24, 0x4F	; 79
 738:	90 e0       	ldi	r25, 0x00	; 0
 73a:	20 91 7c 00 	lds	r18, 0x007C	; 0x80007c <Timer1_Typedef+0x8>
 73e:	22 2f       	mov	r18, r18
 740:	30 e0       	ldi	r19, 0x00	; 0
 742:	40 91 7d 00 	lds	r20, 0x007D	; 0x80007d <Timer1_Typedef+0x9>
 746:	44 2f       	mov	r20, r20
 748:	50 e0       	ldi	r21, 0x00	; 0
 74a:	02 c0       	rjmp	.+4      	; 0x750 <Init_Timer1+0x22>
 74c:	22 0f       	add	r18, r18
 74e:	33 1f       	adc	r19, r19
 750:	4a 95       	dec	r20
 752:	e2 f7       	brpl	.-8      	; 0x74c <Init_Timer1+0x1e>
 754:	32 2f       	mov	r19, r18
 756:	20 91 7e 00 	lds	r18, 0x007E	; 0x80007e <Timer1_Typedef+0xa>
 75a:	23 70       	andi	r18, 0x03	; 3
 75c:	23 2b       	or	r18, r19
 75e:	fc 01       	movw	r30, r24
 760:	20 83       	st	Z, r18
 762:	8e e4       	ldi	r24, 0x4E	; 78
 764:	90 e0       	ldi	r25, 0x00	; 0
 766:	20 91 7e 00 	lds	r18, 0x007E	; 0x80007e <Timer1_Typedef+0xa>
 76a:	22 2f       	mov	r18, r18
 76c:	30 e0       	ldi	r19, 0x00	; 0
 76e:	2c 70       	andi	r18, 0x0C	; 12
 770:	33 27       	eor	r19, r19
 772:	22 0f       	add	r18, r18
 774:	33 1f       	adc	r19, r19
 776:	32 2f       	mov	r19, r18
 778:	20 91 7f 00 	lds	r18, 0x007F	; 0x80007f <Timer1_Typedef+0xb>
 77c:	23 2b       	or	r18, r19
 77e:	30 91 80 00 	lds	r19, 0x0080	; 0x800080 <Timer1_Typedef+0xc>
 782:	23 2b       	or	r18, r19
 784:	30 91 81 00 	lds	r19, 0x0081	; 0x800081 <Timer1_Typedef+0xd>
 788:	23 2b       	or	r18, r19
 78a:	fc 01       	movw	r30, r24
 78c:	20 83       	st	Z, r18
 78e:	80 91 7e 00 	lds	r24, 0x007E	; 0x80007e <Timer1_Typedef+0xa>
 792:	91 e0       	ldi	r25, 0x01	; 1
 794:	84 30       	cpi	r24, 0x04	; 4
 796:	09 f0       	breq	.+2      	; 0x79a <Init_Timer1+0x6c>
 798:	90 e0       	ldi	r25, 0x00	; 0
 79a:	20 91 7e 00 	lds	r18, 0x007E	; 0x80007e <Timer1_Typedef+0xa>
 79e:	81 e0       	ldi	r24, 0x01	; 1
 7a0:	29 30       	cpi	r18, 0x09	; 9
 7a2:	09 f0       	breq	.+2      	; 0x7a6 <Init_Timer1+0x78>
 7a4:	80 e0       	ldi	r24, 0x00	; 0
 7a6:	89 2b       	or	r24, r25
 7a8:	28 2f       	mov	r18, r24
 7aa:	30 e0       	ldi	r19, 0x00	; 0
 7ac:	90 91 7e 00 	lds	r25, 0x007E	; 0x80007e <Timer1_Typedef+0xa>
 7b0:	81 e0       	ldi	r24, 0x01	; 1
 7b2:	9b 30       	cpi	r25, 0x0B	; 11
 7b4:	09 f0       	breq	.+2      	; 0x7b8 <Init_Timer1+0x8a>
 7b6:	80 e0       	ldi	r24, 0x00	; 0
 7b8:	88 2f       	mov	r24, r24
 7ba:	90 e0       	ldi	r25, 0x00	; 0
 7bc:	28 2b       	or	r18, r24
 7be:	39 2b       	or	r19, r25
 7c0:	90 91 7e 00 	lds	r25, 0x007E	; 0x80007e <Timer1_Typedef+0xa>
 7c4:	81 e0       	ldi	r24, 0x01	; 1
 7c6:	9f 30       	cpi	r25, 0x0F	; 15
 7c8:	09 f0       	breq	.+2      	; 0x7cc <Init_Timer1+0x9e>
 7ca:	80 e0       	ldi	r24, 0x00	; 0
 7cc:	88 2f       	mov	r24, r24
 7ce:	90 e0       	ldi	r25, 0x00	; 0
 7d0:	82 2b       	or	r24, r18
 7d2:	93 2b       	or	r25, r19
 7d4:	89 2b       	or	r24, r25
 7d6:	51 f0       	breq	.+20     	; 0x7ec <Init_Timer1+0xbe>
 7d8:	8a e4       	ldi	r24, 0x4A	; 74
 7da:	90 e0       	ldi	r25, 0x00	; 0
 7dc:	20 91 76 00 	lds	r18, 0x0076	; 0x800076 <Timer1_Typedef+0x2>
 7e0:	30 91 77 00 	lds	r19, 0x0077	; 0x800077 <Timer1_Typedef+0x3>
 7e4:	fc 01       	movw	r30, r24
 7e6:	31 83       	std	Z+1, r19	; 0x01
 7e8:	20 83       	st	Z, r18
 7ea:	2e c0       	rjmp	.+92     	; 0x848 <__DATA_REGION_LENGTH__+0x48>
 7ec:	80 91 7e 00 	lds	r24, 0x007E	; 0x80007e <Timer1_Typedef+0xa>
 7f0:	91 e0       	ldi	r25, 0x01	; 1
 7f2:	8e 30       	cpi	r24, 0x0E	; 14
 7f4:	09 f0       	breq	.+2      	; 0x7f8 <Init_Timer1+0xca>
 7f6:	90 e0       	ldi	r25, 0x00	; 0
 7f8:	20 91 7e 00 	lds	r18, 0x007E	; 0x80007e <Timer1_Typedef+0xa>
 7fc:	81 e0       	ldi	r24, 0x01	; 1
 7fe:	2c 30       	cpi	r18, 0x0C	; 12
 800:	09 f0       	breq	.+2      	; 0x804 <__DATA_REGION_LENGTH__+0x4>
 802:	80 e0       	ldi	r24, 0x00	; 0
 804:	89 2b       	or	r24, r25
 806:	28 2f       	mov	r18, r24
 808:	30 e0       	ldi	r19, 0x00	; 0
 80a:	90 91 7e 00 	lds	r25, 0x007E	; 0x80007e <Timer1_Typedef+0xa>
 80e:	81 e0       	ldi	r24, 0x01	; 1
 810:	9a 30       	cpi	r25, 0x0A	; 10
 812:	09 f0       	breq	.+2      	; 0x816 <__DATA_REGION_LENGTH__+0x16>
 814:	80 e0       	ldi	r24, 0x00	; 0
 816:	88 2f       	mov	r24, r24
 818:	90 e0       	ldi	r25, 0x00	; 0
 81a:	28 2b       	or	r18, r24
 81c:	39 2b       	or	r19, r25
 81e:	90 91 7e 00 	lds	r25, 0x007E	; 0x80007e <Timer1_Typedef+0xa>
 822:	81 e0       	ldi	r24, 0x01	; 1
 824:	98 30       	cpi	r25, 0x08	; 8
 826:	09 f0       	breq	.+2      	; 0x82a <__DATA_REGION_LENGTH__+0x2a>
 828:	80 e0       	ldi	r24, 0x00	; 0
 82a:	88 2f       	mov	r24, r24
 82c:	90 e0       	ldi	r25, 0x00	; 0
 82e:	82 2b       	or	r24, r18
 830:	93 2b       	or	r25, r19
 832:	89 2b       	or	r24, r25
 834:	49 f0       	breq	.+18     	; 0x848 <__DATA_REGION_LENGTH__+0x48>
 836:	86 e4       	ldi	r24, 0x46	; 70
 838:	90 e0       	ldi	r25, 0x00	; 0
 83a:	20 91 7a 00 	lds	r18, 0x007A	; 0x80007a <Timer1_Typedef+0x6>
 83e:	30 91 7b 00 	lds	r19, 0x007B	; 0x80007b <Timer1_Typedef+0x7>
 842:	fc 01       	movw	r30, r24
 844:	31 83       	std	Z+1, r19	; 0x01
 846:	20 83       	st	Z, r18
 848:	8c e4       	ldi	r24, 0x4C	; 76
 84a:	90 e0       	ldi	r25, 0x00	; 0
 84c:	20 91 74 00 	lds	r18, 0x0074	; 0x800074 <Timer1_Typedef>
 850:	30 91 75 00 	lds	r19, 0x0075	; 0x800075 <Timer1_Typedef+0x1>
 854:	fc 01       	movw	r30, r24
 856:	31 83       	std	Z+1, r19	; 0x01
 858:	20 83       	st	Z, r18
 85a:	89 e5       	ldi	r24, 0x59	; 89
 85c:	90 e0       	ldi	r25, 0x00	; 0
 85e:	29 e5       	ldi	r18, 0x59	; 89
 860:	30 e0       	ldi	r19, 0x00	; 0
 862:	f9 01       	movw	r30, r18
 864:	30 81       	ld	r19, Z
 866:	20 91 82 00 	lds	r18, 0x0082	; 0x800082 <Timer1_Typedef+0xe>
 86a:	23 2b       	or	r18, r19
 86c:	fc 01       	movw	r30, r24
 86e:	20 83       	st	Z, r18
 870:	80 91 7d 00 	lds	r24, 0x007D	; 0x80007d <Timer1_Typedef+0x9>
 874:	88 23       	and	r24, r24
 876:	21 f0       	breq	.+8      	; 0x880 <__stack+0x21>
 878:	80 91 7d 00 	lds	r24, 0x007D	; 0x80007d <Timer1_Typedef+0x9>
 87c:	0e 94 44 04 	call	0x888	; 0x888 <config_pwm_pin>
 880:	81 e0       	ldi	r24, 0x01	; 1
 882:	df 91       	pop	r29
 884:	cf 91       	pop	r28
 886:	08 95       	ret

00000888 <config_pwm_pin>:
 888:	cf 93       	push	r28
 88a:	df 93       	push	r29
 88c:	00 d0       	rcall	.+0      	; 0x88e <config_pwm_pin+0x6>
 88e:	00 d0       	rcall	.+0      	; 0x890 <config_pwm_pin+0x8>
 890:	cd b7       	in	r28, 0x3d	; 61
 892:	de b7       	in	r29, 0x3e	; 62
 894:	8c 83       	std	Y+4, r24	; 0x04
 896:	81 e0       	ldi	r24, 0x01	; 1
 898:	8a 83       	std	Y+2, r24	; 0x02
 89a:	8c 81       	ldd	r24, Y+4	; 0x04
 89c:	86 30       	cpi	r24, 0x06	; 6
 89e:	19 f4       	brne	.+6      	; 0x8a6 <config_pwm_pin+0x1e>
 8a0:	80 e2       	ldi	r24, 0x20	; 32
 8a2:	89 83       	std	Y+1, r24	; 0x01
 8a4:	02 c0       	rjmp	.+4      	; 0x8aa <config_pwm_pin+0x22>
 8a6:	80 e1       	ldi	r24, 0x10	; 16
 8a8:	89 83       	std	Y+1, r24	; 0x01
 8aa:	ce 01       	movw	r24, r28
 8ac:	01 96       	adiw	r24, 0x01	; 1
 8ae:	bc 01       	movw	r22, r24
 8b0:	80 e3       	ldi	r24, 0x30	; 48
 8b2:	90 e0       	ldi	r25, 0x00	; 0
 8b4:	0e 94 3f 01 	call	0x27e	; 0x27e <Init_GPIO>
 8b8:	00 00       	nop
 8ba:	0f 90       	pop	r0
 8bc:	0f 90       	pop	r0
 8be:	0f 90       	pop	r0
 8c0:	0f 90       	pop	r0
 8c2:	df 91       	pop	r29
 8c4:	cf 91       	pop	r28
 8c6:	08 95       	ret

000008c8 <__vector_9>:
 8c8:	1f 92       	push	r1
 8ca:	0f 92       	push	r0
 8cc:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
 8d0:	0f 92       	push	r0
 8d2:	11 24       	eor	r1, r1
 8d4:	cf 93       	push	r28
 8d6:	df 93       	push	r29
 8d8:	cd b7       	in	r28, 0x3d	; 61
 8da:	de b7       	in	r29, 0x3e	; 62
 8dc:	00 00       	nop
 8de:	df 91       	pop	r29
 8e0:	cf 91       	pop	r28
 8e2:	0f 90       	pop	r0
 8e4:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
 8e8:	0f 90       	pop	r0
 8ea:	1f 90       	pop	r1
 8ec:	18 95       	reti

000008ee <Uart_Receive>:
 8ee:	cf 93       	push	r28
 8f0:	df 93       	push	r29
 8f2:	00 d0       	rcall	.+0      	; 0x8f4 <Uart_Receive+0x6>
 8f4:	00 d0       	rcall	.+0      	; 0x8f6 <Uart_Receive+0x8>
 8f6:	00 d0       	rcall	.+0      	; 0x8f8 <Uart_Receive+0xa>
 8f8:	cd b7       	in	r28, 0x3d	; 61
 8fa:	de b7       	in	r29, 0x3e	; 62
 8fc:	9e 83       	std	Y+6, r25	; 0x06
 8fe:	8d 83       	std	Y+5, r24	; 0x05
 900:	19 82       	std	Y+1, r1	; 0x01
 902:	66 c0       	rjmp	.+204    	; 0x9d0 <Uart_Receive+0xe2>
 904:	00 00       	nop
 906:	8b e2       	ldi	r24, 0x2B	; 43
 908:	90 e0       	ldi	r25, 0x00	; 0
 90a:	fc 01       	movw	r30, r24
 90c:	80 81       	ld	r24, Z
 90e:	88 23       	and	r24, r24
 910:	d4 f7       	brge	.-12     	; 0x906 <Uart_Receive+0x18>
 912:	8b e2       	ldi	r24, 0x2B	; 43
 914:	90 e0       	ldi	r25, 0x00	; 0
 916:	fc 01       	movw	r30, r24
 918:	80 81       	ld	r24, Z
 91a:	8a 83       	std	Y+2, r24	; 0x02
 91c:	8a e2       	ldi	r24, 0x2A	; 42
 91e:	90 e0       	ldi	r25, 0x00	; 0
 920:	fc 01       	movw	r30, r24
 922:	80 81       	ld	r24, Z
 924:	8b 83       	std	Y+3, r24	; 0x03
 926:	8c e2       	ldi	r24, 0x2C	; 44
 928:	90 e0       	ldi	r25, 0x00	; 0
 92a:	fc 01       	movw	r30, r24
 92c:	80 81       	ld	r24, Z
 92e:	8c 83       	std	Y+4, r24	; 0x04
 930:	8a 81       	ldd	r24, Y+2	; 0x02
 932:	88 2f       	mov	r24, r24
 934:	90 e0       	ldi	r25, 0x00	; 0
 936:	8c 71       	andi	r24, 0x1C	; 28
 938:	99 27       	eor	r25, r25
 93a:	89 2b       	or	r24, r25
 93c:	19 f0       	breq	.+6      	; 0x944 <Uart_Receive+0x56>
 93e:	8f ef       	ldi	r24, 0xFF	; 255
 940:	9f ef       	ldi	r25, 0xFF	; 255
 942:	55 c0       	rjmp	.+170    	; 0x9ee <Uart_Receive+0x100>
 944:	8b 81       	ldd	r24, Y+3	; 0x03
 946:	86 95       	lsr	r24
 948:	81 70       	andi	r24, 0x01	; 1
 94a:	8b 83       	std	Y+3, r24	; 0x03
 94c:	89 81       	ldd	r24, Y+1	; 0x01
 94e:	8f 30       	cpi	r24, 0x0F	; 15
 950:	71 f0       	breq	.+28     	; 0x96e <Uart_Receive+0x80>
 952:	8d 81       	ldd	r24, Y+5	; 0x05
 954:	9e 81       	ldd	r25, Y+6	; 0x06
 956:	fc 01       	movw	r30, r24
 958:	21 85       	ldd	r18, Z+9	; 0x09
 95a:	32 85       	ldd	r19, Z+10	; 0x0a
 95c:	89 81       	ldd	r24, Y+1	; 0x01
 95e:	88 2f       	mov	r24, r24
 960:	90 e0       	ldi	r25, 0x00	; 0
 962:	82 0f       	add	r24, r18
 964:	93 1f       	adc	r25, r19
 966:	fc 01       	movw	r30, r24
 968:	80 81       	ld	r24, Z
 96a:	83 32       	cpi	r24, 0x23	; 35
 96c:	09 f4       	brne	.+2      	; 0x970 <Uart_Receive+0x82>
 96e:	19 82       	std	Y+1, r1	; 0x01
 970:	8d 81       	ldd	r24, Y+5	; 0x05
 972:	9e 81       	ldd	r25, Y+6	; 0x06
 974:	fc 01       	movw	r30, r24
 976:	21 85       	ldd	r18, Z+9	; 0x09
 978:	32 85       	ldd	r19, Z+10	; 0x0a
 97a:	89 81       	ldd	r24, Y+1	; 0x01
 97c:	88 2f       	mov	r24, r24
 97e:	90 e0       	ldi	r25, 0x00	; 0
 980:	82 0f       	add	r24, r18
 982:	93 1f       	adc	r25, r19
 984:	2b 81       	ldd	r18, Y+3	; 0x03
 986:	22 2f       	mov	r18, r18
 988:	30 e0       	ldi	r19, 0x00	; 0
 98a:	32 2f       	mov	r19, r18
 98c:	22 27       	eor	r18, r18
 98e:	32 2f       	mov	r19, r18
 990:	2c 81       	ldd	r18, Y+4	; 0x04
 992:	23 2b       	or	r18, r19
 994:	fc 01       	movw	r30, r24
 996:	20 83       	st	Z, r18
 998:	8d 81       	ldd	r24, Y+5	; 0x05
 99a:	9e 81       	ldd	r25, Y+6	; 0x06
 99c:	fc 01       	movw	r30, r24
 99e:	21 85       	ldd	r18, Z+9	; 0x09
 9a0:	32 85       	ldd	r19, Z+10	; 0x0a
 9a2:	89 81       	ldd	r24, Y+1	; 0x01
 9a4:	88 2f       	mov	r24, r24
 9a6:	90 e0       	ldi	r25, 0x00	; 0
 9a8:	82 0f       	add	r24, r18
 9aa:	93 1f       	adc	r25, r19
 9ac:	fc 01       	movw	r30, r24
 9ae:	80 81       	ld	r24, Z
 9b0:	83 32       	cpi	r24, 0x23	; 35
 9b2:	59 f4       	brne	.+22     	; 0x9ca <Uart_Receive+0xdc>
 9b4:	8d 81       	ldd	r24, Y+5	; 0x05
 9b6:	9e 81       	ldd	r25, Y+6	; 0x06
 9b8:	fc 01       	movw	r30, r24
 9ba:	21 85       	ldd	r18, Z+9	; 0x09
 9bc:	32 85       	ldd	r19, Z+10	; 0x0a
 9be:	89 81       	ldd	r24, Y+1	; 0x01
 9c0:	88 2f       	mov	r24, r24
 9c2:	90 e0       	ldi	r25, 0x00	; 0
 9c4:	82 0f       	add	r24, r18
 9c6:	93 1f       	adc	r25, r19
 9c8:	12 c0       	rjmp	.+36     	; 0x9ee <Uart_Receive+0x100>
 9ca:	89 81       	ldd	r24, Y+1	; 0x01
 9cc:	8f 5f       	subi	r24, 0xFF	; 255
 9ce:	89 83       	std	Y+1, r24	; 0x01
 9d0:	8d 81       	ldd	r24, Y+5	; 0x05
 9d2:	9e 81       	ldd	r25, Y+6	; 0x06
 9d4:	fc 01       	movw	r30, r24
 9d6:	21 85       	ldd	r18, Z+9	; 0x09
 9d8:	32 85       	ldd	r19, Z+10	; 0x0a
 9da:	89 81       	ldd	r24, Y+1	; 0x01
 9dc:	88 2f       	mov	r24, r24
 9de:	90 e0       	ldi	r25, 0x00	; 0
 9e0:	82 0f       	add	r24, r18
 9e2:	93 1f       	adc	r25, r19
 9e4:	fc 01       	movw	r30, r24
 9e6:	80 81       	ld	r24, Z
 9e8:	83 32       	cpi	r24, 0x23	; 35
 9ea:	09 f0       	breq	.+2      	; 0x9ee <Uart_Receive+0x100>
 9ec:	8b cf       	rjmp	.-234    	; 0x904 <Uart_Receive+0x16>
 9ee:	26 96       	adiw	r28, 0x06	; 6
 9f0:	0f b6       	in	r0, 0x3f	; 63
 9f2:	f8 94       	cli
 9f4:	de bf       	out	0x3e, r29	; 62
 9f6:	0f be       	out	0x3f, r0	; 63
 9f8:	cd bf       	out	0x3d, r28	; 61
 9fa:	df 91       	pop	r29
 9fc:	cf 91       	pop	r28
 9fe:	08 95       	ret

00000a00 <__vector_13>:
 a00:	1f 92       	push	r1
 a02:	0f 92       	push	r0
 a04:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
 a08:	0f 92       	push	r0
 a0a:	11 24       	eor	r1, r1
 a0c:	2f 93       	push	r18
 a0e:	3f 93       	push	r19
 a10:	4f 93       	push	r20
 a12:	5f 93       	push	r21
 a14:	6f 93       	push	r22
 a16:	7f 93       	push	r23
 a18:	8f 93       	push	r24
 a1a:	9f 93       	push	r25
 a1c:	af 93       	push	r26
 a1e:	bf 93       	push	r27
 a20:	ef 93       	push	r30
 a22:	ff 93       	push	r31
 a24:	cf 93       	push	r28
 a26:	df 93       	push	r29
 a28:	cd b7       	in	r28, 0x3d	; 61
 a2a:	de b7       	in	r29, 0x3e	; 62
 a2c:	89 e6       	ldi	r24, 0x69	; 105
 a2e:	90 e0       	ldi	r25, 0x00	; 0
 a30:	0e 94 77 04 	call	0x8ee	; 0x8ee <Uart_Receive>
 a34:	00 00       	nop
 a36:	df 91       	pop	r29
 a38:	cf 91       	pop	r28
 a3a:	ff 91       	pop	r31
 a3c:	ef 91       	pop	r30
 a3e:	bf 91       	pop	r27
 a40:	af 91       	pop	r26
 a42:	9f 91       	pop	r25
 a44:	8f 91       	pop	r24
 a46:	7f 91       	pop	r23
 a48:	6f 91       	pop	r22
 a4a:	5f 91       	pop	r21
 a4c:	4f 91       	pop	r20
 a4e:	3f 91       	pop	r19
 a50:	2f 91       	pop	r18
 a52:	0f 90       	pop	r0
 a54:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
 a58:	0f 90       	pop	r0
 a5a:	1f 90       	pop	r1
 a5c:	18 95       	reti

00000a5e <__vector_15>:
 a5e:	1f 92       	push	r1
 a60:	0f 92       	push	r0
 a62:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
 a66:	0f 92       	push	r0
 a68:	11 24       	eor	r1, r1
 a6a:	cf 93       	push	r28
 a6c:	df 93       	push	r29
 a6e:	cd b7       	in	r28, 0x3d	; 61
 a70:	de b7       	in	r29, 0x3e	; 62
 a72:	00 00       	nop
 a74:	df 91       	pop	r29
 a76:	cf 91       	pop	r28
 a78:	0f 90       	pop	r0
 a7a:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
 a7e:	0f 90       	pop	r0
 a80:	1f 90       	pop	r1
 a82:	18 95       	reti

00000a84 <__vector_14>:
 a84:	1f 92       	push	r1
 a86:	0f 92       	push	r0
 a88:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
 a8c:	0f 92       	push	r0
 a8e:	11 24       	eor	r1, r1
 a90:	2f 93       	push	r18
 a92:	8f 93       	push	r24
 a94:	9f 93       	push	r25
 a96:	ef 93       	push	r30
 a98:	ff 93       	push	r31
 a9a:	cf 93       	push	r28
 a9c:	df 93       	push	r29
 a9e:	cd b7       	in	r28, 0x3d	; 61
 aa0:	de b7       	in	r29, 0x3e	; 62
 aa2:	8a e2       	ldi	r24, 0x2A	; 42
 aa4:	90 e0       	ldi	r25, 0x00	; 0
 aa6:	fc 01       	movw	r30, r24
 aa8:	20 81       	ld	r18, Z
 aaa:	2f 7d       	andi	r18, 0xDF	; 223
 aac:	fc 01       	movw	r30, r24
 aae:	20 83       	st	Z, r18
 ab0:	00 00       	nop
 ab2:	df 91       	pop	r29
 ab4:	cf 91       	pop	r28
 ab6:	ff 91       	pop	r31
 ab8:	ef 91       	pop	r30
 aba:	9f 91       	pop	r25
 abc:	8f 91       	pop	r24
 abe:	2f 91       	pop	r18
 ac0:	0f 90       	pop	r0
 ac2:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
 ac6:	0f 90       	pop	r0
 ac8:	1f 90       	pop	r1
 aca:	18 95       	reti

00000acc <main>:
 acc:	cf 93       	push	r28
 ace:	df 93       	push	r29
 ad0:	cd b7       	in	r28, 0x3d	; 61
 ad2:	de b7       	in	r29, 0x3e	; 62
 ad4:	0e 94 49 00 	call	0x92	; 0x92 <init>
 ad8:	0e 94 77 00 	call	0xee	; 0xee <program>
 adc:	fd cf       	rjmp	.-6      	; 0xad8 <main+0xc>

00000ade <_exit>:
 ade:	f8 94       	cli

00000ae0 <__stop_program>:
 ae0:	ff cf       	rjmp	.-2      	; 0xae0 <__stop_program>
